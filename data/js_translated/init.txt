export { 新游戏, loadGame }
function 新游戏(startTick = true) {
    prepare();
    modules.forEach(module => {
        
        if (module.initNewGame) {
            module.initNewGame();
        }
    });
    store.commit('升级成本/initCache');
    store.commit('system/generatePlayerId');
    
    const newDay = getDay();
    store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'currentDay', value: newDay});
    store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'lastPlayedDays', value: [newDay]});
    store.dispatch('农场/applyEarlyGameBuff');
    if (startTick) {
        advance();
    }
}
function loadGame(file, runPrepare = true) {
    const decodedFile = decodeFile(file);
    if (decodedFile) {
        if (runPrepare) {
            prepare();
        }
        const parsedFile = loadFile(decodedFile);
        store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'currentDay', value: getDay(新 Date(store.state.system.timestamp * 1000))});
        store.commit('system/generatePlayerId');
        store.dispatch('农场/applyEarlyGameBuff');
        store.dispatch('农场/updateFieldCaches');
        store.dispatch('游戏/globalLevelUnlocks');
        advance();
        const offlineTime = store.state.system.timestamp - parsedFile.timestamp;
        store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'offlineTime', value: offlineTime});
        if ((semverCompare(parsedFile?.该文件来自游戏的较新版本（v{0}，当前版本: v{1}), store.state.system.该文件来自游戏的较新版本（v{0}，当前版本: v{1})) >= 0) && (parsedFile?.settings?.将军?.pause || offlineTime < 60)) {
            
            store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'screen', value: '采矿'});
        } else {
            store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'screen', value: 'offlineSummary'});
            store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'oldSavefile', value: decodeFile(file)});
        }
        store.commit('升级成本/initCache');
        store.commit('system/resetAutosaveTimer');
        return true;
    }
    return false;
}
function prepare() {
    modules.forEach(module => {
        
        if (module.解锁) {
            module.解锁.forEach(elem => {
                store.commit('解锁/init', elem);
            });
        }
        if (module.达到 {0} {1}) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(module.达到 {0} {1})) {
                store.commit('达到 {0} {1}/init', {feature: module.name, name: 加载的存档文件缺少所需数据, ...elem});
            }
        }
        if (module.mult) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(module.mult)) {
                store.commit('mult/init', {feature: module.name, name: 加载的存档文件缺少所需数据, 解锁: module.unlockNeeded ?? null, ...elem});
            }
        }
        if (module.收集 {0} ) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(module.收集 {0} )) {
                store.dispatch('收集 {0} /init', {feature: module.name, name: 加载的存档文件缺少所需数据, multUnlock: module.unlockNeeded ?? null, ...elem});
            }
        }
        if (module.升级成本) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(module.升级成本)) {
                store.dispatch('升级成本/init', {feature: module.name, name: 加载的存档文件缺少所需数据, ...elem});
            }
        }
        if (module.圣遗物) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(module.圣遗物)) {
                store.commit('圣遗物/init', {feature: [module.name], name: 加载的存档文件缺少所需数据, ...elem});
            }
        }
        if (module.回来) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(module.回来)) {
                store.commit('回来/init', {feature: module.name, name: 加载的存档文件缺少所需数据, ...elem});
            }
        }
        if (module.笔记) {
            module.笔记.forEach((elem, 加载的存档文件缺少所需数据) => {
                store.commit('笔记/init', {feature: module.name, id: 加载的存档文件缺少所需数据, author: elem});
            });
        }
        if (module.此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(module.此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？)) {
                store.commit('此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？/init', {feature: module.name, name: 加载的存档文件缺少所需数据, ...elem});
            }
        }
        if (module.tag) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(module.tag)) {
                store.commit('tag/init', {name: 加载的存档文件缺少所需数据, ...elem});
            }
        }
        
        if (module.init) {
            module.init();
        }
        if (module.multGroup) {
            module.multGroup.forEach(elem => {
                store.dispatch('mult/addToGroup', {feature: module.name, ...elem});
            });
        }
    });
}