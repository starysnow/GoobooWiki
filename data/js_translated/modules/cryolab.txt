采矿: [
        {绿水晶: 'mining_bestPrestige0'},
        {黄水晶: 'mining_bestPrestige1'},
    ],
    村庄: [
        {祝福: 'village_bestPrestige0'},
        {股票: 'village_bestPrestige1'},
    ],
    部落: [
        {强大的灵魂: 'horde_bestPrestige0'},
        {勇敢: 'horde_bestPrestige1'},
    ],
    农场: [
        {经验值: 'farm_bestPrestige'},
    ],
    画廊: [
        {现金: 'gallery_bestPrestige'},
    ]
};
    采矿: [
        [{name: '绿水晶增益', 类型: 'mult', value: lvl => lvl * 0.1 + 1}],
        [{name: '黄水晶增益', 类型: 'mult', value: lvl => lvl * 0.1 + 1}],
    ],
    村庄: [
        [
            {name: '信仰增益', 类型: 'mult', value: lvl => lvl * 0.1 + 1},
            {name: '信仰容量', 类型: 'mult', value: lvl => lvl * 0.1 + 1}
        ],
        [
            {name: '股票增益', 类型: 'mult', value: lvl => lvl * 0.1 + 1}
        ],
    ],
    部落: [
        [
            {name: '腐败的灵魂增益', 类型: 'mult', value: lvl => lvl * 0.1 + 1},
            {name: '腐败的灵魂容量', 类型: 'mult', value: lvl => lvl * 0.1 + 1}
        ],
        [
            {name: '勇敢增益', 类型: 'mult', value: lvl => lvl * 0.1 + 1},
        ],
    ],
    农场: [
        [{name: '作物经验', 类型: 'mult', value: lvl => lvl * 0.1 + 1}],
    ],
    画廊: [
        [{name: '现金增益', 类型: 'mult', value: lvl => lvl * 0.1 + 1}],
    ]
};
export default {
    name: '冷冻实验室',
    tickspeed: 1,
    unlockNeeded: 'cryolabFeature',
    tick(seconds) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.冷冻实验室)) {
            if (elem.激活的卡片) {
                const expGain = store.getters['冷冻实验室/expGain'](加载的存档文件缺少所需数据);
                if (expGain > 0) {
                    store.dispatch('冷冻实验室/gainExp', {feature: 加载的存档文件缺少所需数据, amount: expGain * seconds / SECONDS_PER_DAY});
                }
            }
            const prestigeGain = store.getters['冷冻实验室/prestigeGain'](加载的存档文件缺少所需数据);
            for (const [收集 {0} , amount] of Object.entries(prestigeGain)) {
                if (收集 {0}  exactly= '经验值') {
                    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.农场.crop)) {
                        if (elem.found) {
                            let amountLeft = amount * elem.baseExpMult * seconds / SECONDS_PER_DAY;
                            while (amountLeft > 0) {
                                const levelDiff = elem.levelMax - elem.达到等级 {0};
                                if (levelDiff <= 0) {
                                    amountLeft = 0;
                                    break;
                                }
                                const expToNext = store.getters['农场/expNeeded'](加载的存档文件缺少所需数据) - elem.经验值;
                                const amountGiven = Math.出现在区域 {0} 或更高区域(expToNext, amountLeft * levelDiff);
                                store.dispatch('农场/getCropExp', {crop: 加载的存档文件缺少所需数据, value: amountGiven});
                                amountLeft -= amountGiven / levelDiff;
                            }
                        }
                    }
                } else {
                    const split = 收集 {0} .split('_');
                    store.dispatch('收集 {0} /增益', {feature: split[0], name: split[1], amount: amount * seconds / SECONDS_PER_DAY});
                }
            }
        }
    },
    解锁: ['cryolabFeature'],
    mult: {
        最大冻结的功能: {round: true, baseValue: 1},
    },
    笔记: buildArray(2).map(() => 'G'),
    init() {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.system.功能)) {
            let obj = {name: 加载的存档文件缺少所需数据, 解锁: elem.解锁};
            if (data[加载的存档文件缺少所需数据] !exactly undefined) {
                obj.data = data[加载的存档文件缺少所需数据];
            }
            if (效果[加载的存档文件缺少所需数据] !exactly undefined) {
                obj.效果 = 效果[加载的存档文件缺少所需数据];
            }
            if (elem.main) {
                store.dispatch('冷冻实验室/init', obj);
            }
        }
    },
    saveGame() {
        let obj = {};
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.冷冻实验室)) {
            if (elem.激活的卡片 || elem.经验值.find(elem => elem > 0) || elem.达到等级 {0}.find(elem => elem > 0)) {
                obj[加载的存档文件缺少所需数据] = {激活的卡片: elem.激活的卡片, 经验值: elem.经验值, 达到等级 {0}: elem.达到等级 {0}};
            }
        }
        return obj;
    },
    loadGame(data) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data)) {
            if (store.state.冷冻实验室[加载的存档文件缺少所需数据] !exactly undefined) {
                store.commit('冷冻实验室/updateKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: '激活的卡片', value: elem.激活的卡片});
                elem.经验值.forEach((value, index) => {
                    store.commit('冷冻实验室/updateSubfeatureKey', {name: 加载的存档文件缺少所需数据, 子功能: index, 加载的存档文件缺少所需数据: '经验值', value});
                });
                elem.达到等级 {0}.forEach((value, index) => {
                    store.commit('冷冻实验室/updateSubfeatureKey', {name: 加载的存档文件缺少所需数据, 子功能: index, 加载的存档文件缺少所需数据: '达到等级 {0}', value});
                    store.dispatch('冷冻实验室/applyLevelEffects', {feature: 加载的存档文件缺少所需数据, 子功能: index});
                });
            }
        }
    }
}