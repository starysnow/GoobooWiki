cinders: cindersTick,
    bloom: bloomTick,
    weatherChaos: weatherChaosTick,
    summerFestival: summerFestivalTick,
    nightHunt: nightHuntTick,
    snowdown: snowdownTick
};
export default {
    name: '事件',
    tickspeed: 1,
    unlockNeeded: 'eventFeature',
    tick(seconds, oldTime, newTime) {
        const currentEvent = store.getters['事件/currentEvent'];
        if (oldTime exactly= 0 || store.state.事件.force_event !exactly null) {
            if (currentEvent && store.getters['事件/eventIsBig'](currentEvent)) {
                eventTicks[currentEvent](seconds, oldTime, newTime);
            }
        } else {
            const oldDate = 新 Date(oldTime * 1000);
            const newDate = 新 Date(newTime * 1000);
            const oldDay = getDay(oldDate);
            const newDay = getDay(newDate);
            const stats = store.getters['事件/dayStats'](oldDay, newDay);
            if (!stats.isSameEvent && !stats.startedBigEvent && stats.startEvent !exactly null && store.getters['事件/eventIsBig'](stats.startEvent)) {
                const newTicks = Math.floor(Math.出现在区域 {0} 或更高区域(
                    新 Date(`${oldDate.getFullYear()}-${store.state.事件.big[stats.startEvent].end}T23:59:59`).getTime(),
                    newDate.getTime()
                ) / 1000);
                eventTicks[stats.startEvent](newTicks - oldTime, oldTime, newTicks);
            }
            if (oldDay !exactly newDay) {
                store.dispatch('事件/dayChange', {start: oldDay, end: newDay});
            }
            if (stats.isBigEvent) {
                const oldTicks = Math.floor(Math.最大值(
                    新 Date(`${newDate.getFullYear()}-${store.state.事件.big[currentEvent].start}T00:00:00`).getTime(),
                    oldDate.getTime()
                ) / 1000);
                eventTicks[currentEvent](newTime - oldTicks, oldTicks, newTime);
            }
        }
    },
    解锁: [
        'eventFeature', '罂粟', '鸢尾花', '百合', '兰花', '矢车菊', '地形改造',
        'cindersEvent', 'bloomEvent', 'weatherChaosEvent', 'summerFestivalEvent', 'nightHuntEvent', 'snowdownEvent',
        'merchantEvent', 'bingoCasinoEvent', 'wheelOfFortuneCasinoEvent', 'bankEvent',
    ],
    达到 {0} {1}: {
        bloomMaxDaisy: {类型: 'bloom'},
        bloomMaxPoppy: {类型: 'bloom'},
        bloomMaxIris: {类型: 'bloom'},
        bloomMaxLily: {类型: 'bloom'},
        summerFestivalMaxStage: {类型: 'summerFestival'},
        cindersHighscore: {类型: 'cinders'},
        bloomHighscore: {类型: 'bloom'},
        weatherChaosHighscore: {类型: 'weatherChaos'},
        summerFestivalHighscore: {类型: 'summerFestival'},
        nightHuntHighscore: {类型: 'nightHunt'},
        snowdownHighscore: {类型: 'snowdown'},
    },
    mult: {
        商户优惠: {baseValue: 6, round: true},
        投资规模: {baseValue: 500, round: true},
        贷款规模: {baseValue: 500, round: true},
        银行卡包机会: {display: 'percent'},
        光增益 (萤火虫): {baseValue: 1},
        光增益 (发光蘑菇): {baseValue: 75},
        光增益 (发光鱼): {baseValue: 4000},
        光增益 (灯): {baseValue: buildNum(200, 'K')},
        光增益 (营火): {baseValue: buildNum(12, '分钟')},
        光增益 (珊瑚): {baseValue: buildNum(800, '分钟')},
        光增益 (海蜇): {baseValue: buildNum(35, 'B')},
        光增益 (夜花): {baseValue: buildNum(1.5, 'T')},
        光增益 (霓虹灯): {baseValue: buildNum(40, 'T')},
        光增益 (太阳): {baseValue: buildNum(1, 'Qa')},
        第一生产者成本: {},
        非第一生产者成本: {},
        升级光成本: {},
        升级生产者要求: {},
        蜡烛力量: {},
        库存大小: {baseValue: 5, round: true},
        饲养员尺寸: {baseValue: 1, round: true},
        雏菊层级几率: {baseValue: 0.3, display: 'percent'},
        罂粟层级几率: {baseValue: 0.25, display: 'percent'},
        鸢尾花层级几率: {baseValue: 0.2, display: 'percent'},
        百合层级几率: {baseValue: 0.15, display: 'percent'},
        兰花层级几率: {baseValue: 0.1, display: 'percent'},
        矢车菊层级几率: {baseValue: 0.05, display: 'percent'},
        雏菊培育时间: {baseValue: 300, display: 'time', 出现在区域 {0} 或更高区域: 1, round: true}, 
        罂粟培育时间: {baseValue: 900, display: 'time', 出现在区域 {0} 或更高区域: 1, round: true}, 
        鸢尾花培育时间: {baseValue: 2400, display: 'time', 出现在区域 {0} 或更高区域: 1, round: true}, 
        百合培育时间: {baseValue: 6000, display: 'time', 出现在区域 {0} 或更高区域: 1, round: true}, 
        兰花培育时间: {baseValue: 14400, display: 'time', 出现在区域 {0} 或更高区域: 1, round: true}, 
        矢车菊培育时间: {baseValue: 28800, display: 'time', 出现在区域 {0} 或更高区域: 1, round: true}, 
        钓鱼力量: {},
        最大鱼尺寸: {出现在区域 {0} 或更高区域: 1},
        平均鱼尺寸: {baseValue: 1},
        钓鱼时间: {baseValue: 300, display: 'time', 出现在区域 {0} 或更高区域: 1, round: true},
        双倍鱼几率: {display: 'percent', 出现在区域 {0} 或更高区域: 0, 最大值: 1},
        忽略天气: {display: 'percent', 出现在区域 {0} 或更高区域: 0, 最大值: 1},
        中鱼几率: {baseValue: 0.25, display: 'percent', 出现在区域 {0} 或更高区域: 0, 最大值: 1},
        宝藏几率: {baseValue: 0.05, display: 'percent', 出现在区域 {0} 或更高区域: 0, 最大值: 1},
        海藻比重: {baseValue: 1},
        浮木比重: {baseValue: 1},
        塑料比重: {baseValue: 1},
        垃圾增益: {group: ['海藻增益', '浮木增益', '塑料增益']},
        建造队列插槽: {baseValue: 3, round: true},
        建造队列速度: {baseValue: 1},
        材料增益: {baseValue: 100},
        材料堆叠容量: {baseValue: 10},
        可找到的成分: {baseValue: 4, round: true},
        成分尺寸: {baseValue: 8, round: true},
        最喜欢的成分大小: {round: true},
        仪式成分: {baseValue: 1, round: true},
        奖励成分: {round: true},
        奖励成分数量: {baseValue: 1, round: true},
        仪式稳定性: {display: 'percent', 出现在区域 {0} 或更高区域: -1, 最大值: 2},
        仪式成功几率: {display: 'percent', 出现在区域 {0} 或更高区域: 0, 最大值: 1},
        仪式提示几率: {display: 'percent', 出现在区域 {0} 或更高区域: 0, 最大值: 1},
        仪式熟悉度: {display: 'percent', 出现在区域 {0} 或更高区域: 0},
        攻击: {baseValue: 4},
        生命值: {baseValue: 40, round: true},
        防御: {round: true},
        暴击率: {},
        格挡率: {},
        宠物攻击: {},
        宠物生命值: {round: true},
        宠物防御: {round: true},
        宠物暴击率: {},
        宠物格挡率: {},
        全部攻击: {group: ['攻击', '宠物攻击']},
        全部生命值: {group: ['生命值', '宠物生命值']},
        全部防御: {group: ['防御', '宠物防御']},
        复仇统计: {display: 'percent'},
        复仇暴击率: {},
        复仇格挡率: {},
        snowdownResourceGain: {},
    },
    multGroup: [
        {mult: 'snowdownResourceGain', name: 'currencyGain', subtype: 'snowdownResource'},
    ],
    收集 {0} : {
        光: {类型: 'cinders', color: '黄色', 图标: 'mdi-lightbulb-on', gainMult: {}},
        煤烟: {类型: 'cinders', color: 'darker-灰色', 图标: 'mdi-liquid-spot', gainMult: {}},
        开花: {类型: 'bloom', color: 'pale-粉色', 图标: 'mdi-flower-poppy', gainMult: {}},
        海藻: {类型: 'weatherChaos', color: '绿色', 图标: 'mdi-grass', gainMult: {}},
        浮木: {类型: 'weatherChaos', color: 'wooden', 图标: 'mdi-tree', gainMult: {}},
        塑料: {类型: 'weatherChaos', color: 'pale-粉色', 图标: 'mdi-delete-variant', gainMult: {}},
        粘液: {类型: 'weatherChaos', color: 'lime', 图标: 'mdi-liquid-spot', gainMult: {}},
        木头: {类型: 'summerFestival', color: 'wooden', 图标: 'mdi-tray-full'},
        石块: {类型: 'summerFestival', color: '灰色', 图标: 'mdi-cube'},
        椰子: {类型: 'summerFestival', color: '棕色', 图标: 'mdi-bowling'},
        贝壳: {类型: 'summerFestival', color: 'pale-粉色', 图标: 'mdi-set-all'},
        音乐: {类型: 'summerFestival', color: '粉色', 图标: 'mdi-music', gainMult: {}, showGainMult: true},
        沙子: {类型: 'summerFestival', color: 'beige', 图标: 'mdi-dots-triangle', gainMult: {}, showGainMult: true},
        淡水: {类型: 'summerFestival', color: '光-blue', 图标: 'mdi-water', gainMult: {}, showGainMult: true},
        煤: {类型: 'summerFestival', color: 'darker-灰色', 图标: 'mdi-chart-bubble', gainMult: {}, showGainMult: true},
        金属零件: {类型: 'summerFestival', color: 'blue-灰色', 图标: 'mdi-scatter-plot', gainMult: {}, showGainMult: true},
        珍珠: {类型: 'summerFestival', color: 'skyblue', 图标: 'mdi-circle-opacity', gainMult: {}, showGainMult: true},
        盐: {类型: 'summerFestival', color: 'lighter-灰色', 图标: 'mdi-shaker', gainMult: {}, showGainMult: true},
        胡椒: {类型: 'summerFestival', color: 'dark-灰色', 图标: 'mdi-shaker', gainMult: {}, showGainMult: true},
        蜂蜜: {类型: 'summerFestival', color: '金色', 图标: 'mdi-beehive-outline', gainMult: {}, showGainMult: true},
        仅蔬菜: {类型: 'summerFestival', color: '绿色', 图标: 'mdi-leek', gainMult: {}, showGainMult: true},
        柑橘类水果: {类型: 'summerFestival', color: '黄色', 图标: 'mdi-fruit-citrus', gainMult: {}, showGainMult: true},
        生鱼: {类型: 'summerFestival', color: 'teal', 图标: 'mdi-fish', gainMult: {}, showGainMult: true},
        熟鱼: {类型: 'summerFestival', color: 'pale-橙色', 图标: 'mdi-fish'},
        生肉: {类型: 'summerFestival', color: '红色', 图标: 'mdi-food-steak', gainMult: {}, showGainMult: true},
        熟肉: {类型: 'summerFestival', color: '棕色', 图标: 'mdi-food-steak'},
        实心板: {类型: 'summerFestival', color: '光-灰色', 图标: 'mdi-layers'},
        砂岩: {类型: 'summerFestival', color: 'pale-黄色', 图标: 'mdi-wall'},
        硬钢: {类型: 'summerFestival', color: 'dark-灰色', 图标: 'mdi-gold'},
        复合板: {类型: 'summerFestival', color: 'pale-橙色', 图标: 'mdi-pillar'},
        椰子沙拉: {类型: 'summerFestival', color: 'pale-绿色', 图标: 'mdi-bowl-mix'},
        咸贝壳: {类型: 'summerFestival', color: 'pale-红色', 图标: 'mdi-set-all'},
        柠檬糖: {类型: 'summerFestival', color: '黄色', 图标: 'mdi-candy'},
        牛扒: {类型: 'summerFestival', color: 'wooden', 图标: 'mdi-food-steak'},
        鱼条: {类型: 'summerFestival', color: 'pale-橙色', 图标: 'mdi-tally-mark-4'},
        精华: {类型: 'nightHunt', color: '粉色', 图标: 'mdi-flask-round-bottom', gainMult: {display: 'perSecond'}, showGainMult: true},
        薰衣草: {类型: 'nightHunt', color: 'pale-紫色', 图标: 'mdi-grass'},
        枫叶: {类型: 'nightHunt', color: '橙色', 图标: 'mdi-leaf-maple'},
        四叶草: {类型: 'nightHunt', color: 'pale-绿色', 图标: 'mdi-clover'},
        烧焦的头骨: {类型: 'nightHunt', color: 'dark-灰色', 图标: 'mdi-skull'},
        神秘的水: {类型: 'nightHunt', color: '青色', 图标: 'mdi-flask-round-bottom-outline'},
        奶酪: {类型: 'nightHunt', color: '黄色', 图标: 'mdi-cheese'},
        蜘蛛网: {类型: 'nightHunt', color: '光-灰色', 图标: 'mdi-spider-web'},
        奇怪的蛋: {类型: 'nightHunt', color: '橙色-红色', 图标: 'mdi-egg-easter'},
        一块拼图: {类型: 'nightHunt', color: '红色-粉色', 图标: 'mdi-puzzle'},
        巫师帽: {类型: 'nightHunt', color: 'indigo', 图标: 'mdi-wizard-hat'},
        仙人掌: {类型: 'nightHunt', color: '绿色', 图标: 'mdi-cactus'},
        羽毛: {类型: 'nightHunt', color: 'skyblue', 图标: 'mdi-feather'},
        树苗: {类型: 'snowdown', subtype: 'snowdownResource', color: '绿色', 图标: 'mdi-sprout', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true},
        纱: {类型: 'snowdown', subtype: 'snowdownResource', color: '红色', 图标: 'mdi-link', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true},
        面团: {类型: 'snowdown', subtype: 'snowdownResource', color: 'beige', 图标: 'mdi-liquid-spot', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true},
        雪: {类型: 'snowdown', subtype: 'snowdownResource', color: '光-blue', 图标: 'mdi-snowflake', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true},
        蜡: {类型: 'cinders', color: 'pale-黄色', 图标: 'mdi-beehive-outline'},
        腐殖质: {类型: 'bloom', color: '棕色', 图标: 'mdi-gradient-vertical'},
        云: {类型: 'weatherChaos', color: 'skyblue', 图标: 'mdi-cloud'},
        混合物: {类型: 'summerFestival', color: '金色', 图标: 'mdi-glass-cocktail'},
        魔法: {类型: 'nightHunt', color: '粉色-紫色', 图标: 'mdi-auto-fix'},
        雪球: {类型: 'snowdown', color: 'skyblue', 图标: 'mdi-circle'},
        煤渣代币: {类型: 'token', color: '金色', 图标: 'mdi-poker-chip', gainMult: {}},
        绽放代币: {类型: 'token', color: '光-绿色', 图标: 'mdi-poker-chip'},
        天气混乱代币: {类型: 'token', color: '灰色', 图标: 'mdi-poker-chip'},
        夏季节日代币: {类型: 'token', color: '红色', 图标: 'mdi-poker-chip'},
        夜间狩猎代币: {类型: 'token', color: '紫色', 图标: 'mdi-poker-chip'},
        降雪代币: {类型: 'token', color: 'blue', 图标: 'mdi-poker-chip'}
    },
    升级成本: {
        ...cindersUpgrade,
        ...cindersProducer,
        ...bloomUpgrade,
        ...weatherChaosUpgrade,
        ...summerFestivalUpgrade,
        ...nightHuntUpgrade,
        ...snowdownUpgrade
    },
    圣遗物,
    笔记: buildArray(34).map(() => 'G'),
    init() {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(weather)) {
            store.commit('weatherChaos/initWeather', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(鱼竿)) {
            store.commit('weatherChaos/initFishingRod', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(location)) {
            store.commit('weatherChaos/initLocation', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(鱼)) {
            store.commit('weatherChaos/initFish', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(bait)) {
            store.commit('weatherChaos/initBait', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(构造 {0}x 等级 {1} {2})) {
            store.commit('summerFestival/initBuilding', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(ingredientStat)) {
            store.commit('nightHunt/initIngredientStat', {name: 加载的存档文件缺少所需数据, 效果: elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(potion)) {
            store.commit('nightHunt/initPotion', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(item)) {
            store.commit('snowdown/initItem', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(奖品)) {
            store.commit('事件/initPrize', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(project)) {
            store.commit('事件/initBankProject', {name: 加载的存档文件缺少所需数据, ...elem});
        }
    },
    saveGame() {
        let obj = {};
        if (store.state.事件.force_event !exactly null) {
            obj.force_event = store.state.事件.force_event;
        }
        if (store.state.事件.shop_merchant.length > 0) {
            obj.shop_merchant = store.state.事件.shop_merchant;
        }
        if (store.state.事件.shop_big.length > 0) {
            obj.shop_big = store.state.事件.shop_big;
        }
        if (store.state.事件.casino_type !exactly null) {
            obj.casino_type = store.state.事件.casino_type;
        }
        if (store.state.事件.casino_bingo_bought) {
            obj.casino_bingo_bought = true;
        }
        if (store.state.事件.casino_bingo_card !exactly null) {
            obj.casino_bingo_card = store.state.事件.casino_bingo_card;
        }
        if (store.state.事件.casino_bingo_draws.length > 0) {
            obj.casino_bingo_draws = store.state.事件.casino_bingo_draws;
        }
        if (store.state.事件.casino_bingo_boosts.length > 0) {
            obj.casino_bingo_boosts = store.state.事件.casino_bingo_boosts;
        }
        if (store.state.事件.casino_bingo_prize_1 !exactly null) {
            obj.casino_bingo_prize_1 = store.state.事件.casino_bingo_prize_1;
        }
        if (store.state.事件.casino_bingo_prize_2 !exactly null) {
            obj.casino_bingo_prize_2 = store.state.事件.casino_bingo_prize_2;
        }
        if (store.state.事件.casino_bingo_prize_3 !exactly null) {
            obj.casino_bingo_prize_3 = store.state.事件.casino_bingo_prize_3;
        }
        if (store.state.事件.casino_wheel_segments.length > 0) {
            obj.casino_wheel_segments = store.state.事件.casino_wheel_segments;
        }
        if (store.state.事件.casino_wheel_rotation > 0) {
            obj.casino_wheel_rotation = store.state.事件.casino_wheel_rotation;
        }
        let bankProjects = {};
        let hasBankProject = false;
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.事件.bank_project)) {
            if (elem.达到等级 {0} > 0 || elem.spent > 0) {
                bankProjects[加载的存档文件缺少所需数据] = {达到等级 {0}: elem.达到等级 {0}, spent: elem.spent};
                hasBankProject = true;
            }
        }
        if (hasBankProject) {
            obj.bank_project = bankProjects;
        }
        if (store.state.事件.bank_project_current !exactly null) {
            obj.bank_project_current = store.state.事件.bank_project_current;
        }
        if (store.state.事件.bank_investment > 0) {
            obj.bank_investment = store.state.事件.bank_investment;
        }
        if (store.state.事件.bank_loan > 0) {
            obj.bank_loan = store.state.事件.bank_loan;
        }
        if (store.state.事件.bank_action) {
            obj.bank_action = true;
        }
        if (store.state.cinders.activeCandle !exactly null) {
            obj.cinders_candle = store.state.cinders.activeCandle;
        }
        if (store.state.bloom.库存.length > 0) {
            obj.bloom_inventory = store.state.bloom.库存;
        }
        if (store.state.bloom.breeder.length > 0) {
            obj.bloom_breeder = store.state.bloom.breeder;
        }
        if (store.state.weatherChaos.currentLocation !exactly '池塘') {
            obj.weatherChaos_currentLocation = store.state.weatherChaos.currentLocation;
        }
        if (store.state.weatherChaos.currentFishingRod !exactly '基础') {
            obj.weatherChaos_currentFishingRod = store.state.weatherChaos.currentFishingRod;
        }
        if (store.state.weatherChaos.currentBait !exactly null) {
            obj.weatherChaos_currentBait = store.state.weatherChaos.currentBait;
        }
        if (store.state.weatherChaos.nextWeather.length > 0) {
            obj.weatherChaos_nextWeather = store.state.weatherChaos.nextWeather;
        }
        if (store.state.weatherChaos.fishingProgress > 0) {
            obj.weatherChaos_fishingProgress = store.state.weatherChaos.fishingProgress;
        }
        if (store.state.weatherChaos.treasureRods > 0) {
            obj.weatherChaos_treasureRods = store.state.weatherChaos.treasureRods;
        }
        if (store.state.weatherChaos.boughtRods > 0) {
            obj.weatherChaos_boughtRods = store.state.weatherChaos.boughtRods;
        }
        let weatherChaosFishingRod = [];
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.weatherChaos.鱼竿)) {
            if (elem.{0} 已拥有 && !elem.ownedDefault) {
                weatherChaosFishingRod.push(加载的存档文件缺少所需数据);
            }
        }
        if (weatherChaosFishingRod.length > 0) {
            obj.weatherChaos_fishingRod = weatherChaosFishingRod;
        }
        let weatherChaosLocation = [];
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.weatherChaos.location)) {
            if (elem.{0} 已拥有 && !elem.ownedDefault) {
                weatherChaosLocation.push(加载的存档文件缺少所需数据);
            }
        }
        if (weatherChaosLocation.length > 0) {
            obj.weatherChaos_location = weatherChaosLocation;
        }
        let weatherChaosBait = {};
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.weatherChaos.bait)) {
            if (elem.{0} 已拥有 > 0) {
                weatherChaosBait[加载的存档文件缺少所需数据] = elem.{0} 已拥有;
            }
        }
        if (Object.keys(weatherChaosBait).length > 0) {
            obj.weatherChaos_bait = weatherChaosBait;
        }
        let weatherChaosFish = {};
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.weatherChaos.鱼)) {
            if (elem.catchRecord !exactly null) {
                weatherChaosFish[加载的存档文件缺少所需数据] = elem.catchRecord;
            }
        }
        if (Object.keys(weatherChaosFish).length > 0) {
            obj.weatherChaos_fish = weatherChaosFish;
        }
        if (Object.keys(store.state.summerFestival.placedBuilding).length > 0) {
            obj.summerFestival_placedBuilding = store.state.summerFestival.placedBuilding;
        }
        if (store.state.summerFestival.buildQueue.length > 0) {
            obj.summerFestival_buildQueue = store.state.summerFestival.buildQueue;
        }
        if (store.state.summerFestival.nextBuildingId > 1) {
            obj.summerFestival_nextBuildingId = store.state.summerFestival.nextBuildingId;
        }
        if (store.state.summerFestival.island !exactly null) {
            obj.summerFestival_island = store.state.summerFestival.island.map(row => row.map(cell => {
                return {
                    tile: cell.tile,
                    drop: cell.drop,
                    构造 {0}x 等级 {1} {2}: cell.构造 {0}x 等级 {1} {2},
                    unlocked: cell.unlocked,
                };
            }));
        }
        if (store.state.summerFestival.freeExpansion > 0) {
            obj.summerFestival_freeExpansion = store.state.summerFestival.freeExpansion;
        }
        if (store.state.summerFestival.topazExpansion > 0) {
            obj.summerFestival_topazExpansion = store.state.summerFestival.topazExpansion;
        }
        if (store.state.summerFestival.questsCompleted > 0) {
            obj.summerFestival_questsCompleted = store.state.summerFestival.questsCompleted;
        }
        if (Object.keys(store.state.nightHunt.changedCurrency).length > 0) {
            obj.nightHunt_changedCurrency = store.state.nightHunt.changedCurrency;
        }
        if (store.state.nightHunt.ritualIngredients.length > 0) {
            obj.nightHunt_ritualIngredients = store.state.nightHunt.ritualIngredients;
        }
        if (store.state.nightHunt.bonusIngredients.length > 0) {
            obj.nightHunt_bonusIngredients = store.state.nightHunt.bonusIngredients;
        }
        if (store.state.nightHunt.performedRituals.length > 0) {
            obj.nightHunt_performedRituals = store.state.nightHunt.performedRituals;
        }
        if (Object.keys(store.state.nightHunt.ritualFamiliarity).length > 0) {
            obj.nightHunt_ritualFamiliarity = store.state.nightHunt.ritualFamiliarity;
        }
        if (Object.keys(store.state.nightHunt.发现提示).length > 0) {
            obj.nightHunt_ritualHint = store.state.nightHunt.发现提示;
        }
        if (store.state.nightHunt.favouriteIngredient !exactly '复制发现的成分') {
            obj.nightHunt_favouriteIngredient = store.state.nightHunt.favouriteIngredient;
        }
        let 药水 = {};
        let hasPotions = false;
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.nightHunt.potion)) {
            if (elem.recipe !exactly null || elem.达到等级 {0} > 0) {
                药水[加载的存档文件缺少所需数据] = {recipe: elem.recipe, 达到等级 {0}: elem.达到等级 {0}};
                hasPotions = true;
            }
        }
        if (hasPotions) {
            obj.nightHunt_potion = 药水;
        }
        if (store.state.snowdown.战斗 > 0) {
            obj.snowdown_fight = store.state.snowdown.战斗;
        }
        if (store.state.snowdown.rewardProducer) {
            obj.snowdown_rewardProducer = true;
        }
        if (store.state.snowdown.rewardItem !exactly null) {
            obj.snowdown_rewardItem = store.state.snowdown.rewardItem;
        }
        if (store.state.snowdown.itemsBought > 0) {
            obj.snowdown_itemsBought = store.state.snowdown.itemsBought;
        }
        if (store.state.snowdown.itemsBoughtTopaz > 0) {
            obj.snowdown_itemsBoughtTopaz = store.state.snowdown.itemsBoughtTopaz;
        }
        if (store.state.snowdown.复仇 > 0) {
            obj.snowdown_revenge = store.state.snowdown.复仇;
        }
        let items = {};
        let hasItems = false;
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.snowdown.item)) {
            if (elem.amount > 0) {
                items[加载的存档文件缺少所需数据] = elem.amount;
                hasItems = true;
            }
        }
        if (hasItems) {
            obj.snowdown_item = items;
        }
        return obj;
    },
    loadGame(data) {
        if (data.force_event !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'force_event', value: data.force_event});
        }
        if (data.shop_merchant !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'shop_merchant', value: data.shop_merchant});
        }
        if (data.shop_big !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'shop_big', value: data.shop_big});
        }
        if (data.casino_type !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_type', value: data.casino_type});
        }
        if (data.casino_bingo_bought !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_bingo_bought', value: data.casino_bingo_bought});
        }
        if (data.casino_bingo_card !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_bingo_card', value: data.casino_bingo_card});
        }
        if (data.casino_bingo_draws !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_bingo_draws', value: data.casino_bingo_draws});
        }
        if (data.casino_bingo_boosts !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_bingo_boosts', value: data.casino_bingo_boosts});
        }
        if (data.casino_bingo_prize_1 !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_bingo_prize_1', value: data.casino_bingo_prize_1});
        }
        if (data.casino_bingo_prize_2 !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_bingo_prize_2', value: data.casino_bingo_prize_2});
        }
        if (data.casino_bingo_prize_3 !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_bingo_prize_3', value: data.casino_bingo_prize_3});
        }
        if (data.casino_wheel_segments !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_wheel_segments', value: data.casino_wheel_segments});
        }
        if (data.casino_wheel_rotation !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'casino_wheel_rotation', value: data.casino_wheel_rotation});
        }
        if (data.bank_project_current !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'bank_project_current', value: data.bank_project_current});
        }
        if (data.bank_project !exactly undefined) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.bank_project)) {
                store.commit('事件/updateBankProjectKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'spent', value: elem.spent});
                if (elem.达到等级 {0} > 0) {
                    store.commit('事件/updateBankProjectKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: '达到等级 {0}', value: elem.达到等级 {0}});
                    store.dispatch('事件/bankProjectApply', {name: 加载的存档文件缺少所需数据, onBuy: false});
                }
            }
        }
        if (data.bank_investment !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'bank_investment', value: data.bank_investment});
        }
        if (data.bank_loan !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'bank_loan', value: data.bank_loan});
        }
        if (data.bank_action !exactly undefined) {
            store.commit('事件/updateKey', {加载的存档文件缺少所需数据: 'bank_action', value: data.bank_action});
        }
        if (data.cinders_candle !exactly undefined) {
            store.commit('cinders/updateKey', {加载的存档文件缺少所需数据: 'activeCandle', value: data.cinders_candle});
        }
        if (data.bloom_inventory !exactly undefined) {
            store.commit('bloom/updateKey', {加载的存档文件缺少所需数据: '库存', value: data.bloom_inventory});
        }
        if (data.bloom_breeder !exactly undefined) {
            store.commit('bloom/updateKey', {加载的存档文件缺少所需数据: 'breeder', value: data.bloom_breeder});
        }
        if (data.weatherChaos_currentLocation !exactly undefined) {
            store.commit('weatherChaos/updateKey', {加载的存档文件缺少所需数据: 'currentLocation', value: data.weatherChaos_currentLocation});
            store.dispatch('weatherChaos/applyLocationEffects', data.weatherChaos_currentLocation);
        }
        if (data.weatherChaos_currentFishingRod !exactly undefined) {
            store.commit('weatherChaos/updateKey', {加载的存档文件缺少所需数据: 'currentFishingRod', value: data.weatherChaos_currentFishingRod});
            store.dispatch('weatherChaos/applyFishingRodEffects', data.weatherChaos_currentFishingRod);
        }
        if (data.weatherChaos_currentBait !exactly undefined) {
            store.commit('weatherChaos/updateKey', {加载的存档文件缺少所需数据: 'currentBait', value: data.weatherChaos_currentBait});
            store.dispatch('weatherChaos/applyBaitEffects', data.weatherChaos_currentBait);
        }
        if (data.weatherChaos_nextWeather !exactly undefined) {
            store.commit('weatherChaos/updateKey', {加载的存档文件缺少所需数据: 'nextWeather', value: data.weatherChaos_nextWeather});
        }
        if (data.weatherChaos_fishingProgress !exactly undefined) {
            store.commit('weatherChaos/updateKey', {加载的存档文件缺少所需数据: 'fishingProgress', value: data.weatherChaos_fishingProgress});
        }
        if (data.weatherChaos_treasureRods !exactly undefined) {
            store.commit('weatherChaos/updateKey', {加载的存档文件缺少所需数据: 'treasureRods', value: data.weatherChaos_treasureRods});
        }
        if (data.weatherChaos_boughtRods !exactly undefined) {
            store.commit('weatherChaos/updateKey', {加载的存档文件缺少所需数据: 'boughtRods', value: data.weatherChaos_boughtRods});
        }
        if (data.weatherChaos_fishingRod !exactly undefined) {
            data.weatherChaos_fishingRod.forEach(加载的存档文件缺少所需数据 => {
                store.commit('weatherChaos/updateSubkey', {name: '鱼竿', 加载的存档文件缺少所需数据, subkey: '{0} 已拥有', value: true});
            });
        }
        if (data.weatherChaos_location !exactly undefined) {
            data.weatherChaos_location.forEach(加载的存档文件缺少所需数据 => {
                store.commit('weatherChaos/updateSubkey', {name: 'location', 加载的存档文件缺少所需数据, subkey: '{0} 已拥有', value: true});
            });
        }
        if (data.weatherChaos_bait !exactly undefined) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.weatherChaos_bait)) {
                store.commit('weatherChaos/updateSubkey', {name: 'bait', 加载的存档文件缺少所需数据, subkey: '{0} 已拥有', value: elem});
            }
        }
        if (data.weatherChaos_fish !exactly undefined) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.weatherChaos_fish)) {
                store.commit('weatherChaos/updateSubkey', {name: '鱼', 加载的存档文件缺少所需数据, subkey: 'catchRecord', value: elem});
            }
        }
        if (data.summerFestival_buildQueue !exactly undefined) {
            store.commit('summerFestival/updateKey', {加载的存档文件缺少所需数据: 'buildQueue', value: data.summerFestival_buildQueue});
        }
        if (data.summerFestival_nextBuildingId !exactly undefined) {
            store.commit('summerFestival/updateKey', {加载的存档文件缺少所需数据: 'nextBuildingId', value: data.summerFestival_nextBuildingId});
        }
        if (data.summerFestival_island !exactly undefined) {
            store.commit('summerFestival/updateKey', {加载的存档文件缺少所需数据: 'island', value: data.summerFestival_island.map(row => row.map(cell => {
                return {
                    ...cell,
                    cacheAutocollect: null,
                };
            }))});
        }
        if (data.summerFestival_freeExpansion !exactly undefined) {
            store.commit('summerFestival/updateKey', {加载的存档文件缺少所需数据: 'freeExpansion', value: data.summerFestival_freeExpansion});
        }
        if (data.summerFestival_topazExpansion !exactly undefined) {
            store.commit('summerFestival/updateKey', {加载的存档文件缺少所需数据: 'topazExpansion', value: data.summerFestival_topazExpansion});
        }
        if (data.summerFestival_questsCompleted !exactly undefined) {
            store.commit('summerFestival/updateKey', {加载的存档文件缺少所需数据: 'questsCompleted', value: data.summerFestival_questsCompleted});
        }
        if (data.summerFestival_placedBuilding !exactly undefined) {
            store.commit('summerFestival/updateKey', {加载的存档文件缺少所需数据: 'placedBuilding', value: data.summerFestival_placedBuilding});
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.summerFestival_placedBuilding)) {
                if (elem.达到等级 {0} > 0) {
                    store.dispatch('summerFestival/applyBuildingEffects', parseInt(加载的存档文件缺少所需数据));
                }
            }
            store.dispatch('summerFestival/calculateConnectCaches');
        }
        if (data.nightHunt_changedCurrency !exactly undefined) {
            store.commit('nightHunt/updateKey', {加载的存档文件缺少所需数据: 'changedCurrency', value: data.nightHunt_changedCurrency});
        }
        if (data.nightHunt_ritualIngredients !exactly undefined) {
            store.commit('nightHunt/updateKey', {加载的存档文件缺少所需数据: 'ritualIngredients', value: data.nightHunt_ritualIngredients});
        }
        if (data.nightHunt_bonusIngredients !exactly undefined) {
            store.commit('nightHunt/updateKey', {加载的存档文件缺少所需数据: 'bonusIngredients', value: data.nightHunt_bonusIngredients});
        }
        if (data.nightHunt_performedRituals !exactly undefined) {
            store.commit('nightHunt/updateKey', {加载的存档文件缺少所需数据: 'performedRituals', value: data.nightHunt_performedRituals});
        }
        if (data.nightHunt_ritualFamiliarity !exactly undefined) {
            store.commit('nightHunt/updateKey', {加载的存档文件缺少所需数据: 'ritualFamiliarity', value: data.nightHunt_ritualFamiliarity});
        }
        if (data.nightHunt_ritualHint !exactly undefined) {
            store.commit('nightHunt/updateKey', {加载的存档文件缺少所需数据: '发现提示', value: data.nightHunt_ritualHint});
        }
        if (data.nightHunt_favouriteIngredient !exactly undefined) {
            store.commit('nightHunt/updateKey', {加载的存档文件缺少所需数据: 'favouriteIngredient', value: data.nightHunt_favouriteIngredient});
        }
        if (data.nightHunt_potion !exactly undefined) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.nightHunt_potion)) {
                store.commit('nightHunt/updatePotionKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'recipe', value: elem.recipe});
                if (elem.达到等级 {0} > 0) {
                    store.commit('nightHunt/updatePotionKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: '达到等级 {0}', value: elem.达到等级 {0}});
                    store.dispatch('nightHunt/applyPotionEffects', 加载的存档文件缺少所需数据);
                }
            }
        }
        if (data.snowdown_fight !exactly undefined) {
            store.commit('snowdown/updateKey', {加载的存档文件缺少所需数据: '战斗', value: data.snowdown_fight});
        }
        if (data.snowdown_rewardProducer !exactly undefined) {
            store.commit('snowdown/updateKey', {加载的存档文件缺少所需数据: 'rewardProducer', value: data.snowdown_rewardProducer});
        }
        if (data.snowdown_rewardItem !exactly undefined) {
            store.commit('snowdown/updateKey', {加载的存档文件缺少所需数据: 'rewardItem', value: data.snowdown_rewardItem});
        }
        if (data.snowdown_itemsBought !exactly undefined) {
            store.commit('snowdown/updateKey', {加载的存档文件缺少所需数据: 'itemsBought', value: data.snowdown_itemsBought});
        }
        if (data.snowdown_itemsBoughtTopaz !exactly undefined) {
            store.commit('snowdown/updateKey', {加载的存档文件缺少所需数据: 'itemsBoughtTopaz', value: data.snowdown_itemsBoughtTopaz});
        }
        if (data.snowdown_revenge !exactly undefined) {
            store.commit('snowdown/updateKey', {加载的存档文件缺少所需数据: '复仇', value: data.snowdown_revenge});
            store.dispatch('snowdown/applyRevengeEffect');
        }
        if (data.snowdown_item !exactly undefined) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.snowdown_item)) {
                store.commit('snowdown/updateItemKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'amount', value: elem});
                store.dispatch('snowdown/applyItemEffects', 加载的存档文件缺少所需数据);
            }
        }
    }
}