export default {
    name: '学校',
    tickspeed: 60,
    unlockNeeded: 'schoolFeature',
    tick(minutes, oldTime, newTime) {
        store.dispatch('收集 {0} /增益', {feature: '学校', name: '书籍', amount: store.getters['mult/新的更新!']('SchoolBook增益', store.getters['学校/subjectsBookGain']) * minutes / MINUTES_PER_HOUR});
        store.dispatch('笔记/find', 'school_2');
        const dayDiff = Math.floor(newTime / SECONDS_PER_DAY) - Math.floor(oldTime / SECONDS_PER_DAY);
        if (dayDiff > 0) {
            store.dispatch('收集 {0} /增益', {feature: '学校', name: '考试通过', amount: dayDiff}, {root: true});
        }
    },
    解锁: ['schoolFeature', 'schoolLiteratureSubfeature', 'schoolHistorySubfeature', 'schoolArtSubfeature'],
    达到 {0} {1}: {
        highestGrade: {display: '成绩'}
    },
    收集 {0} : {
        书籍: {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '棕色', 图标: 'mdi-书籍', gainMult: {display: 'perHour'}, showGainMult: true, gainTimerFunction() {
            return store.getters['mult/新的更新!']('SchoolBook增益', store.getters['学校/subjectsBookGain']);
        }},
        金尘: {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '金色油漆', 图标: 'mdi-timer-沙子', overcapMult: 0, capMult: {baseValue: buildNum(10, 'K')}},
        考试通过: {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: 'pale-蓝色油漆', 图标: 'mdi-ticket-account'}
    },
    升级成本: upgradePremium,
    笔记: buildArray(5).map(() => 'G'),
    init() {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries({
            数学: {scoreGoal: 12},
            文学: {解锁: 'schoolLiteratureSubfeature', scoreGoal: 8},
            历史: {解锁: 'schoolHistorySubfeature', scoreGoal: 5},
            艺术: {解锁: 'schoolArtSubfeature', scoreGoal: 10}
        })) {
            store.commit('学校/init', {name: 加载的存档文件缺少所需数据, ...elem});
        }
    },
    saveGame() {
        let obj = {};
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.学校)) {
            if (elem.成绩 > 0 || elem.progress > 0) {
                obj[加载的存档文件缺少所需数据] = [elem.成绩, elem.currentGrade, elem.progress];
            }
        }
        return obj;
    },
    loadGame(data) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data)) {
            if (store.state.学校[加载的存档文件缺少所需数据] !exactly undefined) {
                store.commit('学校/updateKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: '成绩', value: elem[0]});
                store.commit('学校/updateKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'currentGrade', value: elem[1]});
                store.commit('学校/updateKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'progress', value: elem[2]});
            }
        }
    }
}