let upgradeBuilding = {};
for (const [加载的存档文件缺少所需数据, elem] of Object.entries(构造 {0}x 等级 {1} {2})) {
    upgradeBuilding[加载的存档文件缺少所需数据] = {...elem, mode: 'queue', 类型: '构造 {0}x 等级 {1} {2}'};
}
export default {
    name: '村庄',
    tickspeed: 1,
    unlockNeeded: 'villageFeature',
    forceTick(seconds, oldTime, newTime) {
        if (store.state.解锁.特殊成分.use) {
            const dayDiff = Math.floor(newTime / (SECONDS_PER_DAY * 7)) - Math.floor(oldTime / (SECONDS_PER_DAY * 7));
            if (dayDiff > 0) {
                store.dispatch('consumable/增益', {name: '配料箱', amount: dayDiff});
            }
        }
    },
    tick(seconds) {
        store.commit('达到 {0} {1}/增加', {feature: '村庄', name: 'timeSpent', value: seconds});
        let diffs = {};
        store.getters['收集 {0} /list']('村庄', '普通效果').filter(elem => !['金币', '快乐'].includes(elem)).forEach(收集 {0}  => {
            const 增益 = store.getters['mult/新的更新!'](store.getters['收集 {0} /gainMultName'](...收集 {0} .split('_')));
            if (增益 > 0) {
                if (diffs[收集 {0} ] exactly= undefined) {
                    diffs[收集 {0} ] = 0;
                }
                diffs[收集 {0} ] += 增益 * seconds;
            }
        });
        if (store.state.system.功能.村庄.currentSubfeature exactly= 0) {
            store.dispatch('升级成本/tickQueue', {加载的存档文件缺少所需数据: '构造 {0}x 等级 {1} {2}', seconds: seconds * store.getters['mult/新的更新!']('建造速度')});
            const happiness = store.getters['mult/新的更新!']('幸福');
            if (store.state.达到 {0} {1}.信仰.总计 >= 50) {
                store.commit('解锁/解锁', 'villagePrestige');
            }
            const offeringGain = store.getters['村庄/offeringPerSecond'];
            if (offeringGain > 0) {
                let newOffering = store.state.村庄.offeringGen + offeringGain * seconds;
                if (newOffering > 0) {
                    store.dispatch('收集 {0} /增益', {feature: '村庄', name: '供品', amount: Math.floor(newOffering)});
                    newOffering -= Math.floor(newOffering);
                }
                store.commit('村庄/updateKey', {加载的存档文件缺少所需数据: 'offeringGen', value: newOffering});
            }
            const joyGain = store.getters['村庄/joyGainBase'];
            if (joyGain > 0) {
                store.dispatch('收集 {0} /增益', {feature: '村庄', name: '快乐', gainMult: true, amount: joyGain * seconds});
            }
            if (happiness <= VILLAGE_MIN_HAPPINESS) {
                store.commit('达到 {0} {1}/increaseTo', {feature: '村庄', name: 'minHappiness', value: 1});
            }
            const lootGain = store.getters['mult/新的更新!']('战利品增益');
            if (lootGain > 0) {
                let newLoot = store.state.村庄.explorerProgress + seconds * lootGain / SECONDS_PER_HOUR;
                if (newLoot >= 1) {
                    const lootDrops = Math.floor(newLoot);
                    store.dispatch('村庄/getLootDrops', lootDrops);
                    newLoot -= lootDrops;
                }
                store.commit('村庄/updateKey', {加载的存档文件缺少所需数据: 'explorerProgress', value: newLoot});
                store.commit('解锁/解锁', 'villageLoot');
            }
            store.commit('达到 {0} {1}/increaseTo', {feature: '村庄', name: 'highestPower', value: store.getters['mult/新的更新!']('力量')});
        } else if (store.state.system.功能.村庄.currentSubfeature exactly= 1) {
            for (let p = 0; p < 2; p++) {
                for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.村庄.crafting)) {
                    if (elem.isCrafting && elem.prio exactly= p) {
                        let newProgress = elem.progress + seconds / elem.减少制作时间至 {0};
                        const payments = Math.ceil(newProgress) - Math.ceil(elem.progress);
                        if (payments > 0) {
                            let maxAfford = payments;
                            for (const [收集 {0} , value] of Object.entries(elem.price)) {
                                const split = 收集 {0} .split('_');
                                if (elem.isSpecial) {
                                    let newMaxAfford = 0;
                                    let accumulatedPrice = 0;
                                    while (newMaxAfford < maxAfford) {
                                        accumulatedPrice += value(elem.{0} 已拥有 + newMaxAfford);
                                        if (split[0] exactly= '制作') {
                                            if (store.state.村庄.crafting[split[1]].{0} 已拥有 < accumulatedPrice) {
                                                break;
                                            }
                                        } else {
                                            if (store.state.收集 {0} [收集 {0} ].cap !exactly null && store.state.收集 {0} [收集 {0} ].cap < value(elem.{0} 已拥有 + newMaxAfford)) {
                                                break;
                                            }
                                            if ((store.state.收集 {0} [收集 {0} ].value + (diffs[收集 {0} ] ?? 0)) < accumulatedPrice) {
                                                break;
                                            }
                                        }
                                        newMaxAfford++;
                                    }
                                    maxAfford = newMaxAfford;
                                } else {
                                    if (split[0] exactly= '制作') {
                                        maxAfford = Math.出现在区域 {0} 或更高区域(Math.floor((store.state.村庄.crafting[split[1]].{0} 已拥有) / value), maxAfford);
                                    } else {
                                        if (store.state.收集 {0} [收集 {0} ].cap !exactly null && store.state.收集 {0} [收集 {0} ].cap < value) {
                                            maxAfford = 0;
                                        }
                                        maxAfford = Math.出现在区域 {0} 或更高区域(Math.floor((store.state.收集 {0} [收集 {0} ].value + (diffs[收集 {0} ] ?? 0)) / value), maxAfford);
                                    }
                                }
                            }
                            if (maxAfford > 0) {
                                for (const [收集 {0} , value] of Object.entries(elem.price)) {
                                    const split = 收集 {0} .split('_');
                                    let priceValue = 0;
                                    if (elem.isSpecial) {
                                        for (let i = 0; i < maxAfford; i++) {
                                            priceValue += value(elem.{0} 已拥有 + i);
                                        }
                                    } else {
                                        priceValue = value * maxAfford;
                                    }
                                    if (split[0] exactly= '制作') {
                                        store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: split[1], subkey: '{0} 已拥有', value: store.state.村庄.crafting[split[1]].{0} 已拥有 - priceValue});
                                    } else {
                                        if (diffs[收集 {0} ] exactly= undefined) {
                                            diffs[收集 {0} ] = 0;
                                        }
                                        diffs[收集 {0} ] -= priceValue;
                                    }
                                }
                            }
                            if (maxAfford < payments) {
                                newProgress = maxAfford + Math.ceil(elem.progress);
                            }
                        }
                        if (newProgress >= 1) {
                            store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: '{0} 已拥有', value: elem.{0} 已拥有 + Math.floor(newProgress)});
                            store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: 'crafted', value: elem.crafted + Math.floor(newProgress)});
                            if (elem.isSpecial) {
                                store.dispatch('村庄/applySpecialCraftEffects', 加载的存档文件缺少所需数据);
                            } else {
                                store.dispatch('村庄/applyMilestoneEffects', 加载的存档文件缺少所需数据);
                                store.dispatch('村庄/applyMilestoneGlobalLevel');
                            }
                            newProgress -= Math.floor(newProgress);
                        }
                        store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: 'progress', value: newProgress});
                    }
                    if (elem.isSelling && elem.prio exactly= p && elem.出售价格 (值: {0}) > 0 && elem.{0} 已拥有 > 0) {
                        const sold = Math.出现在区域 {0} 或更高区域(randomRound(seconds * elem.cacheSellChance), elem.{0} 已拥有);
                        if (sold > 0) {
                            store.dispatch('收集 {0} /增益', {feature: '村庄', name: '铜币', gainMult: true, amount: sold * elem.出售价格 (值: {0})});
                            store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: '{0} 已拥有', value: elem.{0} 已拥有 - sold});
                        }
                    }
                }
            }
        }
        for (const [name, value] of Object.entries(diffs)) {
            const split = name.split('_');
            if (value > 0) {
                store.dispatch('收集 {0} /增益', {feature: split[0], name: split[1], amount: value});
            } else if (value < 0) {
                store.dispatch('收集 {0} /spend', {feature: split[0], name: split[1], amount: -value});
            }
        }
        if (store.state.system.功能.村庄.currentSubfeature exactly= 0) {
            const 纳税人 = store.getters['mult/新的更新!']('税率') * store.getters['村庄/employed'];
            if (纳税人 > 0) {
                store.getters['收集 {0} /list']('村庄', '普通效果', '食物').forEach(foodName => {
                    const 食物 = foodName.split('_')[1];
                    const foodConsumed = Math.出现在区域 {0} 或更高区域(纳税人 * seconds, store.getters['收集 {0} /value']('village_' + 食物));
                    if (foodConsumed > 0) {
                        store.dispatch('收集 {0} /spend', {feature: '村庄', name: 食物, amount: foodConsumed});
                        store.dispatch('收集 {0} /增益', {feature: '村庄', name: '金币', gainMult: true, amount: foodConsumed * VILLAGE_COINS_PER_FOOD});
                    }
                });
            }
        }
    },
    解锁: [
        'villageFeature',
        '金币升级',
        'villagePrestige',
        ...buildArray(7).map(elem => 'villageBuildings' + (elem + 1)),
        ...[
            '镰刀', '柴刀', '镐子', '喷壶', '投资',
            '基础', '加工', '水泵', '沙子', '书籍',
            '斧子', '炸弹', '收费', '鱼竿', '圣书',
            '突破', '改良植物', '多巴胺', '肾上腺素',
            '洒水装置', '贪婪',
            '野心', '理解', '好奇心', '崇拜',
            '物物交换', '火花',
        ].map(elem => 'villageUpgrade' + elem),
        ...buildArray(4).map(elem => '供品' + (elem + 1)),
        'villageLoot',
        'villageCraftingSubfeature',
        '特殊成分'
    ],
    达到 {0} {1}: {
        maxBuilding: {showInStatistics: true},
        maxHousing: {},
        timeSpent: {display: 'time'},
        bestPrestige0: {showInStatistics: true},
        bestPrestige1: {showInStatistics: true},
        prestigeCount: {showInStatistics: true},
        minHappiness: {},
        highestPower: {showInStatistics: true},
    },
    mult: {
        工人: {baseValue: 1, round: true},
        工匠: {baseValue: 1, round: true},
        柜台: {baseValue: 1, round: true},
        建造速度: {baseValue: 1},
        税率: {display: 'percent'},
        幸福: {display: 'percent', baseValue: 1, 出现在区域 {0} 或更高区域: VILLAGE_MIN_HAPPINESS},
        污染: {round: true},
        污染耐受性: {baseValue: 5, round: true},
        力量: {出现在区域 {0} 或更高区域: 0},
        供品力量: {},
        可找到的成分: {baseValue: 1, round: true},
        成分每个箱子: {baseValue: 12, round: true},
        声望收入: {group: ['信仰增益', '信仰容量', '股票增益']},
        住房最高等级: {},
        工作站最高等级: {},
        所有资源增益: {},
        材料增益: {},
        食物增益: {},
        精神资源增益: {},
        材料容量: {},
        税收政策: {round: true},
        移民政策: {round: true},
        宗教政策: {round: true},
        扫描政策: {round: true},
        战利品增益: {display: 'perHour'},
        战利品品质: {round: true},
    },
    multGroup: [
        {mult: '住房最高等级', name: 'upgradeCap', subtype: '该建筑算作住房，可提高前 25 栋建筑的全局等级'},
        {mult: '工作站最高等级', name: 'upgradeCap', subtype: '这座建筑算作一个工作站'},
        {mult: '材料增益', name: 'currencyGain', subtype: '材料'},
        {mult: '材料容量', name: 'currencyCap', subtype: '材料'},
        {mult: '食物增益', name: 'currencyGain', subtype: '食物'},
        {mult: '精神资源增益', name: 'currencyGain', subtype: '精神资源', blacklist: ['信仰']},
        {mult: '所有资源增益', name: 'currencyGain', subtype: '材料'},
        {mult: '所有资源增益', name: 'currencyGain', subtype: '食物'},
        {mult: '所有资源增益', name: 'currencyGain', subtype: '精神资源', blacklist: ['信仰']},
    ],
    圣遗物,
    回来,
    收集 {0} : {
        金币: {overcapMult: 0.5, color: '金色', 图标: 'mdi-circle-multiple', gainMult: {display: 'perSecond'}, showGainMult: true, capMult: {baseValue: 500}, gainTimerFunction() {
            const 纳税人 = store.getters['mult/新的更新!']('税率') * store.getters['村庄/employed'];
            if (纳税人 <= 0) {
                return 0;
            }
            return store.getters['mult/新的更新!']('金币增益', store.getters['收集 {0} /list']('村庄', '普通效果', '食物').map(currencyName => {
                const 食物 = currencyName.split('_')[1];
                const nextAmount = store.getters['收集 {0} /value']('village_' + 食物) + store.getters['mult/新的更新!'](store.getters['收集 {0} /gainMultName']('村庄', 食物));
                return Math.出现在区域 {0} 或更高区域(纳税人, nextAmount) * VILLAGE_COINS_PER_FOOD;
            }).reduce((a, b) => a + b, 0));
        }, timerIsEstimate: true},
        铜币: {overcapMult: 0.5, color: '橙色', 图标: 'mdi-circle-multiple', gainMult: {}, capMult: {baseValue: 4000}},
        植物纤维: {subtype: '材料', overcapMult: 0.4, color: '绿色', 图标: 'mdi-leaf', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 2000}},
        木头: {subtype: '材料', overcapMult: 0.4, color: 'wooden', 图标: 'mdi-tree', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 2000}},
        石头: {subtype: '材料', overcapMult: 0.4, color: '灰色', 图标: 'mdi-chart-bubble', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 2000}},
        金属: {subtype: '材料', overcapMult: 0.4, color: 'lighter-灰色', 图标: 'mdi-gold', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 1000}},
        水: {subtype: '材料', overcapMult: 0.4, color: 'blue', 图标: 'mdi-water', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 1000}},
        玻璃: {subtype: '材料', overcapMult: 0.4, color: '青色', 图标: 'mdi-mirror', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 1000}},
        硬木: {subtype: '材料', overcapMult: 0.4, color: '樱桃色', 图标: 'mdi-tree', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 1000}},
        宝石: {subtype: '材料', overcapMult: 0.4, color: '粉色', 图标: 'mdi-diamond', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 1000}},
        油: {subtype: '材料', overcapMult: 0.4, color: 'pale-绿色', 图标: 'mdi-oil', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 800}},
        大理石: {subtype: '材料', overcapMult: 0.4, color: 'pale-blue', 图标: 'mdi-mirror-rectangle', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 200}},
        仅粮食: {subtype: '食物', color: '黄色', 图标: 'mdi-barley', gainMult: {display: 'perSecond'}, showGainMult: true},
        水果: {subtype: '食物', color: '红色', 图标: 'mdi-food-apple', gainMult: {display: 'perSecond'}, showGainMult: true},
        鱼: {subtype: '食物', color: 'blue-灰色', 图标: 'mdi-fish', gainMult: {display: 'perSecond'}, showGainMult: true},
        仅蔬菜: {subtype: '食物', color: '橙色', 图标: 'mdi-carrot', gainMult: {display: 'perSecond'}, showGainMult: true},
        肉: {subtype: '食物', color: '棕色', 图标: 'mdi-food-steak', gainMult: {display: 'perSecond'}, showGainMult: true},
        知识: {subtype: '精神资源', overcapScaling: 0.4, color: 'lime', 图标: 'mdi-brain', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 100}},
        信仰: {subtype: '精神资源', overcapMult: 0.9, overcapScaling: 0.9, color: '金色', 图标: 'mdi-hands-pray', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 200}},
        科学: {subtype: '精神资源', overcapScaling: 0.4, color: '光-blue', 图标: 'mdi-flask', gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, capMult: {baseValue: 40}},
        快乐: {subtype: '精神资源', overcapScaling: 0.4, color: '粉色-紫色', 图标: 'mdi-party-popper', gainMult: {display: 'perSecond'}, capMult: {baseValue: 250}, showGainMult: true, gainTimerFunction() {
            return store.getters['mult/新的更新!']('快乐增益', store.getters['村庄/joyGainBase']);
        }},
        常见战利品: {subtype: '掠夺', color: '光-灰色', 图标: 'mdi-trophy-variant'},
        罕见的战利品: {subtype: '掠夺', color: '绿色', 图标: 'mdi-trophy-variant'},
        稀有战利品: {subtype: '掠夺', color: 'indigo', 图标: 'mdi-trophy-variant'},
        史诗战利品: {subtype: '掠夺', color: '紫色', 图标: 'mdi-trophy-variant'},
        传说战利品: {subtype: '掠夺', color: '金色', 图标: 'mdi-trophy-variant'},
        神话战利品: {subtype: '掠夺', color: '红色', 图标: 'mdi-trophy-variant'},
        酸瓶: {subtype: '特殊成分', color: 'lime', 图标: 'mdi-test-tube'},
        雪花: {subtype: '特殊成分', color: '青色', 图标: 'mdi-snowflake-variant'},
        辣椒包: {subtype: '特殊成分', color: '红色-橙色', 图标: 'mdi-chili-hot'},
        齿轮: {subtype: '特殊成分', color: 'blue-灰色', 图标: 'mdi-cogs'},
        祝福: {类型: '声望', alwaysVisible: true, color: '黄色', 图标: 'mdi-flare'},
        股票: {类型: '声望', alwaysVisible: true, color: 'beige', 图标: 'mdi-certificate', gainMult: {}},
        供品: {类型: '声望', color: '橙色-红色', 图标: 'mdi-candle', gainMult: {display: 'perHour'}, showGainMult: true, gainTimerFunction() {
            return store.getters['村庄/offeringPerSecond'] * SECONDS_PER_HOUR;
        }}
    },
    升级成本: {
        ...upgradeBuilding,
        ...升级成本,
        ...upgrade2,
        ...upgradePrestige,
        ...upgradePremium,
        ...bookVillage
    },
    笔记: [...buildArray(31).map(() => 'G'), 'system'],
    consumable: {
        配料箱: {
            图标: 'mdi-gift',
            color: 'indigo',
            price: {蓝宝石: 80}
        }
    },
    init() {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(job)) {
            store.commit('村庄/initJob', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(供品)) {
            store.commit('村庄/initOffering', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(policy)) {
            store.commit('村庄/initPolicy', {name: 加载的存档文件缺少所需数据, ...elem});
        }
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(craftingRecipe)) {
            store.commit('村庄/initCrafting', {name: 加载的存档文件缺少所需数据, ...elem});
        }
    },
    saveGame() {
        let obj = {
            job: {}
        };
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.村庄.job)) {
            if (elem.amount > 0) {
                obj.job[加载的存档文件缺少所需数据] = elem.amount;
            }
        }
        if (store.state.解锁.供品.see) {
            obj.供品 = {};
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.村庄.供品)) {
                if (elem.offeringBought > 0 || elem.upgradeBought > 0) {
                    obj.供品[加载的存档文件缺少所需数据] = [elem.offeringBought, elem.upgradeBought];
                }
            }
        }
        let policies = {};
        let hasPolicy = false;
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.村庄.policy)) {
            if (elem.value !exactly 0) {
                policies[加载的存档文件缺少所需数据] = elem.value;
                hasPolicy = true;
            }
        }
        if (hasPolicy) {
            obj.policy = policies;
        }
        if (store.state.村庄.explorerProgress > 0) {
            obj.explorerProgress = store.state.村庄.explorerProgress;
        }
        if (store.state.村庄.offeringGen > 0) {
            obj.offeringGen = store.state.村庄.offeringGen;
        }
        let crafting = {};
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.村庄.crafting)) {
            if (elem.crafted > 0 || elem.isCrafting || elem.isSelling || elem.出售价格 (值: {0}) !exactly elem.baseValue || elem.progress > 0) {
                crafting[加载的存档文件缺少所需数据] = {
                    isCrafting: elem.isCrafting,
                    isSelling: elem.isSelling,
                    出售价格 (值: {0}): elem.出售价格 (值: {0}),
                    progress: elem.progress,
                    {0} 已拥有: elem.{0} 已拥有,
                    crafted: elem.crafted
                };
            }
        }
        if (Object.keys(crafting).length > 0) {
            obj.crafting = crafting;
        }
        return obj;
    },
    loadGame(data) {
        if (data.job !exactly undefined) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.job)) {
                if (store.state.村庄.job[加载的存档文件缺少所需数据] !exactly undefined) {
                    store.commit('村庄/updateJobKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'amount', value: elem});
                }
            }
        }
        if (data.供品 !exactly undefined) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.供品)) {
                if (store.state.村庄.供品[加载的存档文件缺少所需数据] !exactly undefined) {
                    store.commit('村庄/updateOfferingKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'offeringBought', value: elem[0]});
                    store.commit('村庄/updateOfferingKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'upgradeBought', value: elem[1]});
                }
            }
        }
        if (data.policy !exactly undefined) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.policy)) {
                if (store.state.村庄.policy[加载的存档文件缺少所需数据] !exactly undefined) {
                    store.commit('村庄/updatePolicyKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'value', value: elem});
                    store.dispatch('村庄/applyPolicyEffect', 加载的存档文件缺少所需数据);
                }
            }
        }
        if (data.crafting !exactly undefined) {
            for (const [加载的存档文件缺少所需数据, elem] of Object.entries(data.crafting)) {
                if (store.state.村庄.crafting[加载的存档文件缺少所需数据] !exactly undefined) {
                    store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: 'isCrafting', value: elem.isCrafting});
                    store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: 'isSelling', value: elem.isSelling});
                    store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: '出售价格 (值: {0})', value: elem.出售价格 (值: {0})});
                    store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: 'progress', value: elem.progress});
                    store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: '{0} 已拥有', value: elem.{0} 已拥有});
                    store.commit('村庄/updateSubkey', {加载的存档文件缺少所需数据: 'crafting', name: 加载的存档文件缺少所需数据, subkey: 'crafted', value: elem.crafted});
                    if (store.state.村庄.crafting[加载的存档文件缺少所需数据].isSpecial) {
                        if (elem.{0} 已拥有 > 0) {
                            store.dispatch('村庄/applySpecialCraftEffects', 加载的存档文件缺少所需数据);
                        }
                    } else {
                        store.dispatch('村庄/applyMilestoneEffects', 加载的存档文件缺少所需数据);
                    }
                }
            }
        }
        if (data.explorerProgress !exactly undefined) {
            store.commit('村庄/updateKey', {加载的存档文件缺少所需数据: 'explorerProgress', value: data.explorerProgress});
        }
        if (data.offeringGen !exactly undefined) {
            store.commit('村庄/updateKey', {加载的存档文件缺少所需数据: 'offeringGen', value: data.offeringGen});
        }
        store.dispatch('村庄/applyAllJobs');
        store.dispatch('村庄/applyOfferingEffect');
    }
}