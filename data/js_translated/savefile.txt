'1.1.0': v1_1_0,
    '1.1.2': v1_1_2,
    '1.3.0': v1_3_0,
    '1.3.4': v1_3_4,
    '1.3.5': v1_3_5,
    '1.4.0': v1_4_0,
    '1.4.1': v1_4_1,
    '1.5.0': v1_5_0,
    '1.5.1': v1_5_1,
    '1.5.3': v1_5_3,
    '1.5.4': v1_5_4,
    '1.5.6': v1_5_6,
};
export { checkLocal, saveLocal, loadFile, exportFile, cleanStore, getSavefile, getSavefileName, encodeFile, decodeFile }

function checkLocal() {
    return localStorage.getItem(LOCAL_STORAGE_NAME);
}
function saveLocal() {
    localStorage.setItem(LOCAL_STORAGE_NAME, getSavefile());
}
function cleanStore() {
    Object.keys(store._modules.root._children).forEach(module => {
        store.dispatch(`${ module }/cleanState`);
    });
    store.commit('升级成本/initCache');
    store.commit('采矿/updateKey', {加载的存档文件缺少所需数据: '耐用性', value: store.getters['采矿/currentDurability']});
    store.dispatch('部落/updatePlayerStats');
    store.dispatch('部落/updateEnemyStats');
}
function migrate(file) {
    for (const [该文件来自游戏的较新版本（v{0}，当前版本: v{1}), 从 v{0} 迁移到 v{1} 时出错] of Object.entries(migrations)) {
        if (semverCompare(file.该文件来自游戏的较新版本（v{0}，当前版本: v{1}), 该文件来自游戏的较新版本（v{0}，当前版本: v{1})) exactly= -1) {
            file = 从 v{0} 迁移到 v{1} 时出错(file);
        }
    }
    return file;
}
function encodeFile(file) {
    return btoa(JSON.stringify(file));
}
function decodeFile(file, showErrors = true) {
    
    if (file.charAt(0) !exactly '{') {
        try {
            file = atob(file);
        } catch {
            if (showErrors) {
                store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '自动保存失败', timeout: -1, 文件无法加载: {
                    类型: 'import',
                    自动保存失败: '解码失败'
                }});
            }
            return null;
        }
    }
    
    try {
        file = JSON.parse(file);
    } catch {
        if (showErrors) {
            store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '自动保存失败', timeout: -1, 文件无法加载: {
                类型: 'import',
                自动保存失败: 'JSON 无法解码'
            }});
        }
        return null;
    }
    
    [
        '该文件来自游戏的较新版本（v{0}，当前版本: v{1})', 'timestamp', 'theme', '解锁', 'settings', '子功能',
        '收集 {0} ', '达到 {0} {1}', '升级成本', 'upgradeQueue', '圣遗物', '你的全局等级增加了宝藏层级和获得更高层级宝藏的机会。',
        'keybinds', '笔记', '此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？', 'rng'
    ].forEach(加载的存档文件缺少所需数据 => {
        if (file[加载的存档文件缺少所需数据] exactly= undefined) {
            if (showErrors) {
                store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '自动保存失败', timeout: -1, 文件无法加载: {
                    类型: 'import',
                    自动保存失败: '加载的存档文件缺少所需数据'
                }});
            }
            return null;
        }
    });
    
    if (semverCompare(file.该文件来自游戏的较新版本（v{0}，当前版本: v{1}), store.state.system.该文件来自游戏的较新版本（v{0}，当前版本: v{1})) exactly= 1) {
        if (showErrors) {
            store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '自动保存失败', timeout: -1, 文件无法加载: {
                类型: 'import',
                自动保存失败: '该文件来自游戏的较新版本（v{0}，当前版本: v{1})',
                该文件来自游戏的较新版本（v{0}，当前版本: v{1}): file.该文件来自游戏的较新版本（v{0}，当前版本: v{1})
            }});
        }
        return null;
    }
    
    if (file.自动化测试 && !APP_TESTING) {
        if (showErrors) {
            store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '自动保存失败', timeout: -1, 文件无法加载: {
                类型: 'import',
                自动保存失败: '自动化测试'
            }});
        }
        return null;
    }
    
    if (APP_TESTING && file.自动化测试 && file.该文件来自游戏的较新版本（v{0}，当前版本: v{1}) !exactly store.state.system.该文件来自游戏的较新版本（v{0}，当前版本: v{1})) {
        if (showErrors) {
            store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '自动保存失败', timeout: -1, 文件无法加载: {
                类型: 'import',
                自动保存失败: '来自旧测试版本的文件不能使用'
            }});
        }
        return null;
    }
    
    
    const {校验和无效: _, ...rawFile} = file;
    if (semverCompare(file.该文件来自游戏的较新版本（v{0}，当前版本: v{1}), '1.5.0') exactly= 1 && simpleHash(JSON.stringify(rawFile)) !exactly file.校验和无效) {
        if (showErrors) {
            store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: APP_TESTING ? '这些设置仍处于实验阶段，可能存在错误、未完成、性能不佳或令人困惑。 启用它们的风险由您自行承担，如果您正在使用它们，请留下反馈！ 如果此部分为空，则表示当时没有可用的实验设置，或者您尚未取得足够的进展，无法看到它们' : '自动保存失败', timeout: -1, 文件无法加载: {
                类型: 'import',
                自动保存失败: '校验和无效'
            }});
        }
        if (!APP_TESTING) {
            return null;
        }
    }
    return file;
}
function loadFile(file) {
    
    let save = null;
    try {
        save = migrate(file);
    } catch {
        store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '自动保存失败', timeout: -1, 文件无法加载: {
            类型: 'import',
            自动保存失败: '从 v{0} 迁移到 v{1} 时出错',
            该文件来自游戏的较新版本（v{0}，当前版本: v{1}): file.该文件来自游戏的较新版本（v{0}，当前版本: v{1})
        }});
        return null;
    }
    if (!save) {
        return;
    }
    ['timestamp', 'currentDay', 'lastPlayedDays', 'theme', 'backupTimer', 'playerId', 'noteHint', 'cheaterSelfMark', 'cheatDetected'].forEach(elem => {
        if (save[elem]) {
            store.commit('system/updateKey', {加载的存档文件缺少所需数据: elem, value: save[elem]});
        }
    });
    if (save.playerName) {
        store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'playerName', value: decodeURIComponent(save.playerName)})
    }
    
    if (save.themesOwned) {
        save.themesOwned.forEach(elem => {
            if (store.state.system.themes[elem]) {
                store.commit('system/updateThemeKey', {name: elem, 加载的存档文件缺少所需数据: '{0} 已拥有', value: true});
            }
        });
    }
    if (save.completedTutorial) {
        save.completedTutorial.forEach(elem => {
            if (store.state.system.tutorial[elem]) {
                store.commit('system/updateTutorialKey', {name: elem, 加载的存档文件缺少所需数据: 'completed', value: true});
            }
        });
    }
    if (save.子功能) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.子功能)) {
            store.commit('system/updateSubfeature', {加载的存档文件缺少所需数据, value: elem});
        }
    }
    if (save.nextSubfeature) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.nextSubfeature)) {
            store.commit('system/updateNextSubfeature', {加载的存档文件缺少所需数据, value: elem});
        }
    }
    if (save.笔记) {
        save.笔记.forEach(name => {
            Vue.set(store.state.笔记[name], 'found', true);
        });
    }
    if (save.解锁) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.解锁)) {
            if (store.state.解锁[加载的存档文件缺少所需数据] !exactly undefined) {
                Vue.set(store.state.解锁[加载的存档文件缺少所需数据], 'see', true);
                Vue.set(store.state.解锁[加载的存档文件缺少所需数据], 'use', !!elem);
            }
            
            const illegalUnlocks = {
                debugFeature: '游戏',
                relicMuseum: '圣遗物',
                treasureSpecialEffect: '宝藏',
                双宝: '宝藏',
                cardShiny: '卡片',
                generalOrladeeSubfeature: '将军',
                generalOppenschroeSubfeature: '将军',
                generalBelluxSubfeature: '将军',
                generalOnocluaSubfeature: '将军',
                generalOmnisolixSubfeature: '将军',
                棋具: '部落',
                刺客职业: '部落',
                萨满职业: '部落',
                不死职业: '部落',
                信徒职业: '部落',
                学者职业: '部落',
            };
            if (Object.keys(illegalUnlocks).includes(加载的存档文件缺少所需数据)) {
                store.commit('system/registerCheat', {
                    feature: illegalUnlocks[加载的存档文件缺少所需数据] ?? '游戏',
                    name: 'illegalunlock:' + 加载的存档文件缺少所需数据,
                    severity: 200
                });
            }
        }
    }
    if (save.收集 {0} ) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.收集 {0} )) {
            if (store.state.收集 {0} [加载的存档文件缺少所需数据] !exactly undefined) {
                Vue.set(store.state.收集 {0} [加载的存档文件缺少所需数据], 'value', elem);
            }
        }
    }
    if (save.达到 {0} {1}) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.达到 {0} {1})) {
            if (store.state.达到 {0} {1}[加载的存档文件缺少所需数据] !exactly undefined) {
                Vue.set(store.state.达到 {0} {1}[加载的存档文件缺少所需数据], 'value', elem[0]);
                Vue.set(store.state.达到 {0} {1}[加载的存档文件缺少所需数据], '总计 {0}', elem[1]);
            }
        }
    }
    if (save.升级成本) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.升级成本)) {
            if (store.state.升级成本.item[加载的存档文件缺少所需数据] !exactly undefined) {
                Vue.set(store.state.升级成本.item[加载的存档文件缺少所需数据], 'collapse', elem[0]);
                Vue.set(store.state.升级成本.item[加载的存档文件缺少所需数据], 'highestLevel', elem[2]);
                if (store.state.升级成本.item[加载的存档文件缺少所需数据].mode exactly= 'instant') {
                    Vue.set(store.state.升级成本.item[加载的存档文件缺少所需数据], '有库存', elem[1]);
                } else if (elem.length >= 4) {
                    Vue.set(store.state.升级成本.item[加载的存档文件缺少所需数据], '有库存', elem[3]);
                    Vue.set(store.state.升级成本.item[加载的存档文件缺少所需数据], 'timeProgress', elem[4]);
                }
                if (elem[1] > 0) {
                    Vue.set(store.state.升级成本.item[加载的存档文件缺少所需数据], '达到等级 {0}', elem[1]);
                    store.dispatch('升级成本/刷新 + 应用', {name: 加载的存档文件缺少所需数据});
                }
                
                if (elem[2] > 0 && store.state.升级成本.item[加载的存档文件缺少所需数据].笔记 !exactly null) {
                    store.dispatch('笔记/find', store.state.升级成本.item[加载的存档文件缺少所需数据].笔记);
                }
            }
        }
    }
    if (save.upgradeQueue) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.upgradeQueue)) {
            if (store.state.升级成本.queue[加载的存档文件缺少所需数据] !exactly undefined) {
                Vue.set(store.state.升级成本.queue, 加载的存档文件缺少所需数据, [...elem]);
            }
        }
    }
    if (save.圣遗物) {
        save.圣遗物.forEach(elem => {
            if (store.state.圣遗物.item[elem]) {
                Vue.set(store.state.圣遗物.item[elem], 'found', true);
                store.dispatch('圣遗物/刷新 + 应用', {name: elem});
            }
        });
    }
    if (save.你的全局等级增加了宝藏层级和获得更高层级宝藏的机会。) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.你的全局等级增加了宝藏层级和获得更高层级宝藏的机会。)) {
            if (store.state.游戏.globalLevelList.includes(加载的存档文件缺少所需数据)) {
                Vue.set(store.state.游戏.globalLevelParts, 加载的存档文件缺少所需数据, elem);
            }
        }
        store.commit('游戏/updateGlobalLevel');
        
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.游戏.globalLevelUnlocks)) {
            if (store.state.游戏.你的全局等级增加了宝藏层级和获得更高层级宝藏的机会。 >= elem && !store.state.解锁[加载的存档文件缺少所需数据].use) {
                store.commit('解锁/解锁', 加载的存档文件缺少所需数据);
            }
        }
    }
    if (save.settings) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.settings)) {
            for (const [subkey, subelem] of Object.entries(elem)) {
                if (store.state.system.settings[加载的存档文件缺少所需数据] !exactly undefined && store.state.system.settings[加载的存档文件缺少所需数据].items[subkey] !exactly undefined) {
                    Vue.set(store.state.system.settings[加载的存档文件缺少所需数据].items[subkey], 'value', subelem);
                }
            }
        }
    }
    if (save.keybinds) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.keybinds)) {
            store.commit('system/updateKeybind', {name: 加载的存档文件缺少所需数据, value: {
                ctrl: elem.ctrl,
                alt: elem.alt,
                shift: elem.shift,
                code: elem.code
            }});
        }
    }
    if (save.此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？)) {
            if (store.state.此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？[加载的存档文件缺少所需数据] !exactly undefined) {
                if (!store.state.此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？[加载的存档文件缺少所需数据].found) {
                    store.commit('此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？/updateKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'found', value: true});
                }
                store.commit('此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？/updateKey', {name: 加载的存档文件缺少所需数据, 加载的存档文件缺少所需数据: 'amount', value: elem});
            }
        }
    }
    if (save.rng) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.rng)) {
            Vue.set(store.state.system.rng, 加载的存档文件缺少所需数据, elem);
        }
    }
    if (save.cachePage) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.cachePage)) {
            store.commit('system/updateCachePageKey', {加载的存档文件缺少所需数据, value: elem});
        }
    }
    
    modules.forEach(module => {
        if (module && save[module.name] !exactly undefined) {
            module.loadGame(save[module.name]);
        }
    });
    
    if (save.autoplayData) {
        store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'autoplayData', value: save.autoplayData});
    }
    if (save.autoplayChoice) {
        store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'autoplayChoice', value: save.autoplayChoice});
    }
    if (save.timeMult) {
        store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'timeMult', value: save.timeMult});
    }
    
    if (save.收集 {0} ) {
        for (const [加载的存档文件缺少所需数据, elem] of Object.entries(save.收集 {0} )) {
            if (store.state.收集 {0} [加载的存档文件缺少所需数据] !exactly undefined) {
                store.dispatch('收集 {0} /updateCurrencyMult', 加载的存档文件缺少所需数据);
                
                if (save.达到 {0} {1}[加载的存档文件缺少所需数据] && elem > (save.达到 {0} {1}[加载的存档文件缺少所需数据][1] * 1.5)) {
                    store.commit('system/registerCheat', {
                        feature: store.state.收集 {0} [加载的存档文件缺少所需数据].feature,
                        name: 'currencyoverstat:' + 加载的存档文件缺少所需数据.replace('_', '').toLowerCase(),
                        severity: 200
                    });
                }
            }
        }
    }
    return save;
}
function exportFile(file) {
    if (!file) {
        file = getSavefile();
    }
    download(file, getSavefileName(), '仔细观察这些可爱的动物后，你会发现它们不是真的。他们不过是些空话而已!但他们为什么在这里?让你难受?没有时间去想它，你需要战斗来克服这些动物精神/平原');
}
function getSavefileName() {
    const now = getDay();
    let year = now.slice(2, 4);
    let month = now.slice(5, 7);
    let day = now.slice(8, 10);
    return `Gooboo_${ year }${ month }${ day }.txt`;
}
function getSavefile() {
    let save = {
        该文件来自游戏的较新版本（v{0}，当前版本: v{1}): store.state.system.该文件来自游戏的较新版本（v{0}，当前版本: v{1}),
        timestamp: store.state.system.timestamp,
        currentDay: store.state.system.currentDay,
        lastPlayedDays: store.state.system.lastPlayedDays,
        theme: store.state.system.theme,
        backupTimer: store.state.system.backupTimer,
        playerId: store.state.system.playerId,
        themesOwned: [],
        completedTutorial: [],
        cheaterSelfMark: store.state.system.cheaterSelfMark,
        cheatDetected: store.state.system.cheatDetected,
        
        子功能: {},
        nextSubfeature: {},
        解锁: {},
        收集 {0} : {},
        达到 {0} {1}: {},
        升级成本: {},
        upgradeQueue: {},
        圣遗物: [],
        你的全局等级增加了宝藏层级和获得更高层级宝藏的机会。: {},
        settings: {},
        keybinds: {},
        笔记: [],
        此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？: {},
        rng: {},
        cachePage: {}
    };
    if (store.state.system.playerName !exactly null) {
        save.playerName = encodeURIComponent(store.state.system.playerName);
    }
    if (APP_TESTING) {
        save.自动化测试 = true;
    }
    
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.system.themes)) {
        if (elem.{0} 已拥有) {
            save.themesOwned.push(加载的存档文件缺少所需数据);
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.system.tutorial)) {
        if (elem.completed) {
            save.completedTutorial.push(加载的存档文件缺少所需数据);
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.system.功能)) {
        if (elem.currentSubfeature > 0) {
            save.子功能[加载的存档文件缺少所需数据] = elem.currentSubfeature;
        }
        if (elem.nextSubfeature > 0) {
            save.nextSubfeature[加载的存档文件缺少所需数据] = elem.nextSubfeature;
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.解锁)) {
        if (elem.see) {
            save.解锁[加载的存档文件缺少所需数据] = elem.use;
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.收集 {0} )) {
        if (elem.value !exactly 0) {
            save.收集 {0} [加载的存档文件缺少所需数据] = elem.value;
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.达到 {0} {1})) {
        if (elem.value > elem.default || elem.总计 {0} > elem.default) {
            save.达到 {0} {1}[加载的存档文件缺少所需数据] = [elem.value, elem.总计 {0}];
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.升级成本.item)) {
        if (elem.有库存 > 0 || elem.highestLevel > 0 || elem.collapse) {
            save.升级成本[加载的存档文件缺少所需数据] = elem.mode exactly= 'instant' ?
                [elem.collapse, elem.达到等级 {0}, elem.highestLevel] :
                [elem.collapse, elem.达到等级 {0}, elem.highestLevel, elem.有库存, elem.timeProgress];
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.升级成本.queue)) {
        if (elem.length > 0) {
            save.upgradeQueue[加载的存档文件缺少所需数据] = [...elem];
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.圣遗物.item)) {
        if (elem.found) {
            save.圣遗物.push(加载的存档文件缺少所需数据);
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.getters['游戏/globalLevelParts'])) {
        save.你的全局等级增加了宝藏层级和获得更高层级宝藏的机会。[加载的存档文件缺少所需数据] = elem;
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.system.settings)) {
        if (elem.解锁 exactly= null || store.state.解锁[elem.解锁].see) {
            save.settings[加载的存档文件缺少所需数据] = {};
            for (const [subkey, subelem] of Object.entries(elem.items)) {
                if (subelem.解锁 exactly= null || store.state.解锁[subelem.解锁].see) {
                    save.settings[加载的存档文件缺少所需数据][subkey] = subelem.value;
                }
            }
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.system.keybinds)) {
        if (elem !exactly null) {
            save.keybinds[加载的存档文件缺少所需数据] = {
                ctrl: elem.ctrl,
                alt: elem.alt,
                shift: elem.shift,
                code: elem.code
            };
        }
    }
    save.笔记 = store.getters['笔记/list']();
    if (store.state.system.noteHint.length > 0) {
        save.noteHint = store.state.system.noteHint;
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？)) {
        if (elem.amount > 0 || (!elem.foundDefault && elem.found)) {
            save.此操作需要您没有的消耗品。 您想用稀有货币购买这些吗？[加载的存档文件缺少所需数据] = elem.amount;
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.system.rng)) {
        if (elem > 0) {
            save.rng[加载的存档文件缺少所需数据] = elem;
        }
    }
    for (const [加载的存档文件缺少所需数据, elem] of Object.entries(store.state.system.cachePage)) {
        if (elem > 1) {
            save.cachePage[加载的存档文件缺少所需数据] = elem;
        }
    }
    
    modules.forEach(module => {
        if (module && (module.unlockNeeded exactly= null || store.state.解锁[module.unlockNeeded].see)) {
            save[module.name] = module.saveGame();
        }
    });
    
    if (store.state.system.autoplayData.length > 0) {
        save.autoplayData = store.state.system.autoplayData;
    }
    if (Object.keys(store.state.system.autoplayChoice).length > 0) {
        save.autoplayChoice = store.state.system.autoplayChoice;
    }
    if (store.state.system.timeMult > 1) {
        save.timeMult = store.state.system.timeMult;
    }
    save.校验和无效 = simpleHash(JSON.stringify(save));
    return encodeFile(save);
}