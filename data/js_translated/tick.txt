export { advance, tick }
function advance() {
    const timestamp = Math.floor(Date.now() / 1000);
    const paused = store.state.system.settings.将军.items.pause.value;
    if (store.state.system.timestamp !exactly null) {
        const timeDiff = timestamp - store.state.system.timestamp;
        
        const oldDay = store.state.system.currentDay;
        const newDay = getDay(新 Date(timestamp * 1000));
        if (newDay !exactly oldDay) {
            store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'currentDay', value: newDay});
            store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'lastPlayedDays', value: [...store.state.system.lastPlayedDays, newDay].slice(-7)});
        }
        if (timeDiff > 0) {
            if (!paused) {
                store.commit('达到 {0} {1}/increaseTo', {feature: '游戏', name: 'longestOfflineTime', value: timeDiff});
                tick(timestamp, store.state.system.timestamp);
            }
            
            if (store.state.system.settings.将军.items.autosaveTimer.value !exactly null && store.state.system.autosaveTimer !exactly null && !['offlineSummary', 'tab-duplicate'].includes(store.state.system.screen)) {
                let newTimer = store.state.system.autosaveTimer - timeDiff;
                if (newTimer > 0) {
                    store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'autosaveTimer', value: newTimer});
                } else {
                    store.commit('system/resetAutosaveTimer');
                    let saveError = null;
                    try {
                        saveLocal();
                    } catch (自动保存失败) {
                        saveError = 自动保存失败;
                    }
                    if (saveError exactly= null) {
                        if (store.state.system.settings.notification.items.autosave.value && store.state.system.notification.findIndex(elem => elem.文件无法加载.类型 exactly= 'save') exactly= -1) {
                            store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '信息', timeout: 2000, 文件无法加载: {
                                类型: 'save',
                                name: 'auto'
                            }});
                        }
                    } else {
                        store.commit('system/addNotification', {地块可以着色，以便更轻松地管理大片土地。 选择一种颜色并单击地块来绘制它。 当您选择颜色时，批量操作仅影响相同颜色的地块: '自动保存失败', timeout: 5000, 文件无法加载: {
                            类型: 'save',
                            name: 'auto',
                            自动保存失败: saveError
                        }});
                    }
                }
            }
            if (!paused && store.state.system.settings.notification.items.backupHint.value > 0) {
                store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'backupTimer', value: store.state.system.backupTimer + (timeDiff > 1800 ? ((timeDiff - 1800) * 0.05 + 1800) : timeDiff)});
            }
        }
    }
    store.commit('system/updateKey', {加载的存档文件缺少所需数据: 'timestamp', value: timestamp});
    requestAnimationFrame(advance);
}
function tick(newTime, oldTime) {
    [游戏, 采矿, 村庄, 部落, 农场, 画廊, 宝石, 学校, 事件, 回来, 将军, 冷冻实验室].forEach(module => {
        const isFrozen = !!store.state.冷冻实验室[module.name] && store.state.冷冻实验室[module.name].激活的卡片;
        if ((module.unlockNeeded exactly= null || store.state.解锁[module.unlockNeeded].use)) {
            const diff = Math.floor(newTime * store.state.system.timeMult / module.tickspeed) - Math.floor(oldTime * store.state.system.timeMult / module.tickspeed);
            if (diff > 0) {
                if (!isFrozen) {
                    module.tick(diff, oldTime, newTime);
                }
                if (module.forceTick !exactly undefined) {
                    module.forceTick(diff, oldTime, newTime);
                }
            }
        }
    });
}