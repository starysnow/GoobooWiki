{
  "js/autoplay.js": {},
  "js/constants.js": {},
  "js/init.js": {},
  "js/savefile.js": {},
  "js/tick.js": {},
  "js/utils/file.js": {},
  "js/utils/random.js": {},
  "js/utils/array.js": {},
  "js/utils/color.js": {},
  "js/utils/math.js": {},
  "js/utils/format.js": {},
  "js/utils/date.js": {},
  "js/utils/words.js": {},
  "js/theme/cyan.js": {
    "price": 1000,
    "light": {
      "primary": "#19D2D2",
      "secondary": "#424242",
      "accent": "#82FFFF"
    },
    "dark": {
      "primary": "#19D2D2",
      "secondary": "#424242",
      "accent": "#82FFFF"
    }
  },
  "js/theme/polar.js": {
    "price": 8000,
    "hasCustomBackground": true,
    "light": {
      "primary": "#267373",
      "secondary": "#424242",
      "accent": "#66CC66"
    },
    "dark": {
      "primary": "#66CCCC",
      "secondary": "#424242",
      "accent": "#267326"
    }
  },
  "js/theme/cherry.js": {
    "price": 6000,
    "hasCustomBackground": true,
    "light": {
      "primary": "#E963D2",
      "secondary": "#424242",
      "accent": "#4D331A"
    },
    "dark": {
      "primary": "#EF8FDF",
      "secondary": "#424242",
      "accent": "#604020"
    }
  },
  "js/theme/prismatic.js": {
    "price": {
      "_type": "expression",
      "code": "buildNum(50, 'K')"
    },
    "hasCustomNavbar": true,
    "hasCustomBackground": true,
    "hasAnimations": true
  },
  "js/theme/default.js": {
    "owned": true,
    "light": {
      "primary": "#1976D2",
      "secondary": "#424242",
      "accent": "#82B1FF",
      "error": "#FF5252",
      "info": "#2196F3",
      "success": "#4CAF50",
      "warning": "#FFC107",
      "contrast": "#000000",
      "_spread_0": {
        "_type": "spread",
        "from": "shades"
      },
      "_spread_1": {
        "_type": "spread",
        "from": "colors"
      }
    },
    "dark": {
      "primary": "#1976D2",
      "secondary": "#424242",
      "accent": "#82B1FF",
      "error": "#FF5252",
      "info": "#2196F3",
      "success": "#4CAF50",
      "warning": "#FFC107",
      "contrast": "#FFFFFF",
      "_spread_2": {
        "_type": "spread",
        "from": "shades"
      },
      "_spread_3": {
        "_type": "spread",
        "from": "colors"
      }
    }
  },
  "js/theme/purple.js": {
    "price": 1000,
    "light": {
      "primary": "#7619D2",
      "secondary": "#424242",
      "accent": "#C182FF"
    },
    "dark": {
      "primary": "#7619D2",
      "secondary": "#424242",
      "accent": "#C182FF"
    }
  },
  "js/theme/factory.js": {
    "price": 4000,
    "hasCustomBackground": true,
    "light": {
      "primary": "#5F6264",
      "secondary": "#A85817",
      "accent": "#82B1FF"
    },
    "dark": {
      "primary": "#8D9296",
      "secondary": "#A85817",
      "accent": "#82B1FF"
    }
  },
  "js/theme/sky.js": {
    "price": {
      "_type": "expression",
      "code": "buildNum(10, 'K')"
    },
    "hasCustomNavbar": true,
    "hasCustomBackground": true,
    "light": {
      "primary": "#E89820",
      "secondary": "#A0A0A0",
      "accent": "#D18147"
    },
    "dark": {
      "primary": "#E89820",
      "secondary": "#A0A0A0",
      "accent": "#D18147"
    }
  },
  "js/theme/forest.js": {
    "price": 5000,
    "hasCustomBackground": true,
    "light": {
      "primary": "#29C229",
      "secondary": "#B76715",
      "accent": "#92EF92"
    },
    "dark": {
      "primary": "#1C831C",
      "secondary": "#72400D",
      "accent": "#92EF92"
    }
  },
  "js/theme/frozen.js": {
    "hasCustomColors": true,
    "hasParticles": true,
    "particles": {
      "icons": [
        "mdi-snowflake",
        "mdi-snowflake-variant"
      ],
      "colors": [
        "white"
      ],
      "opacity": [
        10,
        40
      ],
      "size": [
        10,
        50
      ],
      "time": [
        5,
        30
      ],
      "amount": 3,
      "rotate": true
    },
    "light": {
      "primary": {
        "_type": "expression",
        "code": "filterColor(frozenBase, color => color.desaturate(0.6))"
      },
      "secondary": "#424242",
      "accent": {
        "_type": "expression",
        "code": "filterColor(frozenBase, color => color.desaturate(0.7).lighten(0.3))"
      },
      "error": {
        "_type": "expression",
        "code": "filterColor(_default.light.error, frozenFilter)"
      },
      "info": {
        "_type": "expression",
        "code": "filterColor(_default.light.info, frozenFilter)"
      },
      "success": {
        "_type": "expression",
        "code": "filterColor(_default.light.success, frozenFilter)"
      },
      "warning": {
        "_type": "expression",
        "code": "filterColor(_default.light.warning, frozenFilter)"
      },
      "_spread_0": {
        "_type": "spread",
        "from": "filterColorObject(colors, frozenFilter)"
      }
    },
    "dark": {
      "primary": {
        "_type": "expression",
        "code": "filterColor(frozenBase, color => color.desaturate(0.6))"
      },
      "secondary": "#424242",
      "accent": {
        "_type": "expression",
        "code": "filterColor(frozenBase, color => color.desaturate(0.7).lighten(0.3))"
      },
      "error": {
        "_type": "expression",
        "code": "filterColor(_default.dark.error, frozenFilter)"
      },
      "info": {
        "_type": "expression",
        "code": "filterColor(_default.dark.info, frozenFilter)"
      },
      "success": {
        "_type": "expression",
        "code": "filterColor(_default.dark.success, frozenFilter)"
      },
      "warning": {
        "_type": "expression",
        "code": "filterColor(_default.dark.warning, frozenFilter)"
      },
      "_spread_1": {
        "_type": "spread",
        "from": "filterColorObject(colors, frozenFilter)"
      }
    }
  },
  "js/theme/rain.js": {
    "hasCustomNavbar": true,
    "hasAnimations": true,
    "hasParticles": true,
    "particles": {
      "icons": [
        "mdi-water"
      ],
      "colors": [
        "light-blue",
        "blue",
        "dark-blue",
        "indigo"
      ],
      "opacity": [
        10,
        30
      ],
      "size": [
        15,
        25
      ],
      "time": [
        2,
        4
      ],
      "amount": 6,
      "rotate": false
    },
    "light": {
      "primary": "#2A53B3",
      "secondary": "#424242",
      "accent": "#275A39"
    },
    "dark": {
      "primary": "#2A53B3",
      "secondary": "#424242",
      "accent": "#275A39"
    }
  },
  "js/theme/shades.js": {
    "black": "#000000",
    "darkest-grey": "#202020",
    "darker-grey": "#404040",
    "dark-grey": "#606060",
    "grey": {
      "base": "#9e9e9e",
      "lighten5": "#fafafa",
      "lighten4": "#f5f5f5",
      "lighten3": "#eeeeee",
      "lighten2": "#e0e0e0",
      "lighten1": "#bdbdbd",
      "darken1": "#757575",
      "darken2": "#616161",
      "darken3": "#424242",
      "darken4": "#212121"
    },
    "lightest-grey": "#E0E0E0",
    "lighter-grey": "#C0C0C0",
    "light-grey": "#A0A0A0",
    "white": "#FFFFFF"
  },
  "js/theme/colors.js": {
    "red": {
      "base": "#F44336",
      "lighten5": "#FFEBEE",
      "lighten4": "#FFCDD2",
      "lighten3": "#EF9A9A",
      "lighten2": "#E57373",
      "lighten1": "#EF5350",
      "darken1": "#E53935",
      "darken2": "#D32F2F",
      "darken3": "#C62828",
      "darken4": "#B71C1C"
    },
    "pink": {
      "base": "#e91e63",
      "lighten5": "#fce4ec",
      "lighten4": "#f8bbd0",
      "lighten3": "#f48fb1",
      "lighten2": "#f06292",
      "lighten1": "#ec407a",
      "darken1": "#d81b60",
      "darken2": "#c2185b",
      "darken3": "#ad1457",
      "darken4": "#880e4f"
    },
    "purple": {
      "base": "#9c27b0",
      "lighten5": "#f3e5f5",
      "lighten4": "#e1bee7",
      "lighten3": "#ce93d8",
      "lighten2": "#ba68c8",
      "lighten1": "#ab47bc",
      "darken1": "#8e24aa",
      "darken2": "#7b1fa2",
      "darken3": "#6a1b9a",
      "darken4": "#4a148c"
    },
    "deep-purple": {
      "base": "#673ab7",
      "lighten5": "#ede7f6",
      "lighten4": "#d1c4e9",
      "lighten3": "#b39ddb",
      "lighten2": "#9575cd",
      "lighten1": "#7e57c2",
      "darken1": "#5e35b1",
      "darken2": "#512da8",
      "darken3": "#4527a0",
      "darken4": "#311b92"
    },
    "indigo": {
      "base": "#3f51b5",
      "lighten5": "#e8eaf6",
      "lighten4": "#c5cae9",
      "lighten3": "#9fa8da",
      "lighten2": "#7986cb",
      "lighten1": "#5c6bc0",
      "darken1": "#3949ab",
      "darken2": "#303f9f",
      "darken3": "#283593",
      "darken4": "#1a237e"
    },
    "blue": {
      "base": "#2196F3",
      "lighten5": "#E3F2FD",
      "lighten4": "#BBDEFB",
      "lighten3": "#90CAF9",
      "lighten2": "#64B5F6",
      "lighten1": "#42A5F5",
      "darken1": "#1E88E5",
      "darken2": "#1976D2",
      "darken3": "#1565C0",
      "darken4": "#0D47A1"
    },
    "light-blue": {
      "base": "#03a9f4",
      "lighten5": "#e1f5fe",
      "lighten4": "#b3e5fc",
      "lighten3": "#81d4fa",
      "lighten2": "#4fc3f7",
      "lighten1": "#29b6f6",
      "darken1": "#039be5",
      "darken2": "#0288d1",
      "darken3": "#0277bd",
      "darken4": "#01579b"
    },
    "cyan": {
      "base": "#00bcd4",
      "lighten5": "#e0f7fa",
      "lighten4": "#b2ebf2",
      "lighten3": "#80deea",
      "lighten2": "#4dd0e1",
      "lighten1": "#26c6da",
      "darken1": "#00acc1",
      "darken2": "#0097a7",
      "darken3": "#00838f",
      "darken4": "#006064"
    },
    "teal": {
      "base": "#009688",
      "lighten5": "#e0f2f1",
      "lighten4": "#b2dfdb",
      "lighten3": "#80cbc4",
      "lighten2": "#4db6ac",
      "lighten1": "#26a69a",
      "darken1": "#00897b",
      "darken2": "#00796b",
      "darken3": "#00695c",
      "darken4": "#004d40"
    },
    "green": {
      "base": "#4CAF50",
      "lighten5": "#E8F5E9",
      "lighten4": "#C8E6C9",
      "lighten3": "#A5D6A7",
      "lighten2": "#81C784",
      "lighten1": "#66BB6A",
      "darken1": "#43A047",
      "darken2": "#388E3C",
      "darken3": "#2E7D32",
      "darken4": "#1B5E20"
    },
    "light-green": {
      "base": "#8bc34a",
      "lighten5": "#f1f8e9",
      "lighten4": "#dcedc8",
      "lighten3": "#c5e1a5",
      "lighten2": "#aed581",
      "lighten1": "#9ccc65",
      "darken1": "#7cb342",
      "darken2": "#689f38",
      "darken3": "#558b2f",
      "darken4": "#33691e"
    },
    "lime": {
      "base": "#cddc39",
      "lighten5": "#f9fbe7",
      "lighten4": "#f0f4c3",
      "lighten3": "#e6ee9c",
      "lighten2": "#dce775",
      "lighten1": "#d4e157",
      "darken1": "#c0ca33",
      "darken2": "#afb42b",
      "darken3": "#9e9d24",
      "darken4": "#827717"
    },
    "yellow": {
      "base": "#ffeb3b",
      "lighten5": "#fffde7",
      "lighten4": "#fff9c4",
      "lighten3": "#fff59d",
      "lighten2": "#fff176",
      "lighten1": "#ffee58",
      "darken1": "#fdd835",
      "darken2": "#fbc02d",
      "darken3": "#f9a825",
      "darken4": "#f57f17"
    },
    "amber": {
      "base": "#ffc107",
      "lighten5": "#fff8e1",
      "lighten4": "#ffecb3",
      "lighten3": "#ffe082",
      "lighten2": "#ffd54f",
      "lighten1": "#ffca28",
      "darken1": "#ffb300",
      "darken2": "#ffa000",
      "darken3": "#ff8f00",
      "darken4": "#ff6f00"
    },
    "orange": {
      "base": "#ff9800",
      "lighten5": "#fff3e0",
      "lighten4": "#ffe0b2",
      "lighten3": "#ffcc80",
      "lighten2": "#ffb74d",
      "lighten1": "#ffa726",
      "darken1": "#fb8c00",
      "darken2": "#f57c00",
      "darken3": "#ef6c00",
      "darken4": "#e65100"
    },
    "deep-orange": {
      "base": "#ff5722",
      "lighten5": "#fbe9e7",
      "lighten4": "#ffccbc",
      "lighten3": "#ffab91",
      "lighten2": "#ff8a65",
      "lighten1": "#ff7043",
      "darken1": "#f4511e",
      "darken2": "#e64a19",
      "darken3": "#d84315",
      "darken4": "#bf360c"
    },
    "brown": {
      "base": "#795548",
      "lighten5": "#efebe9",
      "lighten4": "#d7ccc8",
      "lighten3": "#bcaaa4",
      "lighten2": "#a1887f",
      "lighten1": "#8d6e63",
      "darken1": "#6d4c41",
      "darken2": "#5d4037",
      "darken3": "#4e342e",
      "darken4": "#3e2723"
    },
    "blue-grey": {
      "base": "#607d8b",
      "lighten5": "#eceff1",
      "lighten4": "#cfd8dc",
      "lighten3": "#b0bec5",
      "lighten2": "#90a4ae",
      "lighten1": "#78909c",
      "darken1": "#546e7a",
      "darken2": "#455a64",
      "darken3": "#37474f",
      "darken4": "#263238"
    },
    "babypink": {
      "base": "#E325B5",
      "lighten5": "#FDE8F8",
      "lighten4": "#F8C4EB",
      "lighten3": "#F49FDF",
      "lighten2": "#EF71D0",
      "lighten1": "#EB4CC5",
      "darken1": "#D219A5",
      "darken2": "#B3148D",
      "darken3": "#8E106F",
      "darken4": "#650B4F"
    },
    "pale-red": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "pale-pink": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "pale-purple": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "pale-blue": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "pale-light-blue": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "pale-cyan": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "pale-green": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "pale-light-green": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "pale-yellow": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "pale-orange": {
      "_type": "expression",
      "code": "filterColorObject(obj[c], color => color.desaturate(0.5))"
    },
    "orange-red": {
      "_type": "expression",
      "code": "mergeColorObject(obj.orange, obj.red)"
    },
    "red-pink": {
      "_type": "expression",
      "code": "mergeColorObject(obj.red, obj.pink)"
    },
    "pink-purple": {
      "_type": "expression",
      "code": "mergeColorObject(obj.pink, obj.purple)"
    },
    "dark-blue": {
      "_type": "expression",
      "code": "mergeColorObject(obj.blue, obj.indigo)"
    },
    "aqua": {
      "_type": "expression",
      "code": "mergeColorObject(obj.green, obj.teal, 0.75)"
    },
    "wooden": {
      "_type": "expression",
      "code": "filterColorObject(mergeColorObject(obj.brown, obj['orange-red']), color => color.blacken(0.8))"
    },
    "cherry": {
      "_type": "expression",
      "code": "filterColorObject(mergeColorObject(obj.wooden, obj.red), color => color.saturate(0.25).blacken(0.25))"
    },
    "skyblue": {
      "_type": "expression",
      "code": "filterColorObject(obj['blue-grey'], color => color.saturate(0.8))"
    },
    "beige": {
      "_type": "expression",
      "code": "filterColorObject(obj['pale-orange'], color => color.desaturate(0.2))"
    }
  },
  "js/theme/red.js": {
    "price": 1000,
    "light": {
      "primary": "#D21919",
      "secondary": "#424242",
      "accent": "#FF8282"
    },
    "dark": {
      "primary": "#D21919",
      "secondary": "#424242",
      "accent": "#FF8282"
    }
  },
  "js/theme/candlelight.js": {
    "hasCustomBackground": true
  },
  "js/theme/brown.js": {
    "price": 1000,
    "light": {
      "primary": "#72400D",
      "secondary": "#424242",
      "accent": "#D2802D"
    },
    "dark": {
      "primary": "#72400D",
      "secondary": "#424242",
      "accent": "#D2802D"
    }
  },
  "js/theme/pink.js": {
    "price": 1000,
    "light": {
      "primary": "#D219D2",
      "secondary": "#424242",
      "accent": "#FF82FF"
    },
    "dark": {
      "primary": "#D219D2",
      "secondary": "#424242",
      "accent": "#FF82FF"
    }
  },
  "js/theme/autumnForest.js": {
    "hasParticles": true,
    "particles": {
      "icons": [
        "mdi-leaf",
        "mdi-leaf-maple"
      ],
      "colors": [
        "light-green",
        "yellow",
        "amber",
        "orange",
        "orange-red",
        "brown",
        "cherry"
      ],
      "opacity": [
        20,
        70
      ],
      "size": [
        20,
        80
      ],
      "time": [
        4,
        12
      ],
      "amount": 4,
      "rotate": true
    },
    "light": {
      "primary": "#74401B",
      "secondary": "#424242",
      "accent": "#503D30"
    },
    "dark": {
      "primary": "#74401B",
      "secondary": "#424242",
      "accent": "#503D30"
    }
  },
  "js/theme/colorful.js": {
    "hasCustomColors": true,
    "light": {
      "primary": "#D94712",
      "secondary": "#424242",
      "accent": "#FFA182",
      "error": {
        "_type": "expression",
        "code": "filterColor(_default.light.error, colorFilter)"
      },
      "info": {
        "_type": "expression",
        "code": "filterColor(_default.light.info, colorFilter)"
      },
      "success": {
        "_type": "expression",
        "code": "filterColor(_default.light.success, colorFilter)"
      },
      "warning": {
        "_type": "expression",
        "code": "filterColor(_default.light.warning, colorFilter)"
      },
      "_spread_0": {
        "_type": "spread",
        "from": "filterColorObject(colors, colorFilter)"
      }
    },
    "dark": {
      "primary": "#D94712",
      "secondary": "#424242",
      "accent": "#FFA182",
      "error": {
        "_type": "expression",
        "code": "filterColor(_default.dark.error, colorFilter)"
      },
      "info": {
        "_type": "expression",
        "code": "filterColor(_default.dark.info, colorFilter)"
      },
      "success": {
        "_type": "expression",
        "code": "filterColor(_default.dark.success, colorFilter)"
      },
      "warning": {
        "_type": "expression",
        "code": "filterColor(_default.dark.warning, colorFilter)"
      },
      "_spread_1": {
        "_type": "spread",
        "from": "filterColorObject(colors, colorFilter)"
      }
    }
  },
  "js/theme/themes.js": {
    "default": {
      "_type": "expression",
      "code": "defaultTheme"
    },
    "cyan": {
      "_type": "expression",
      "code": "cyan"
    },
    "green": {
      "_type": "expression",
      "code": "green"
    },
    "yellow": {
      "_type": "expression",
      "code": "yellow"
    },
    "orange": {
      "_type": "expression",
      "code": "orange"
    },
    "brown": {
      "_type": "expression",
      "code": "brown"
    },
    "red": {
      "_type": "expression",
      "code": "red"
    },
    "pink": {
      "_type": "expression",
      "code": "pink"
    },
    "purple": {
      "_type": "expression",
      "code": "purple"
    },
    "grey": {
      "_type": "expression",
      "code": "grey"
    },
    "sepia": {
      "_type": "expression",
      "code": "sepia"
    },
    "factory": {
      "_type": "expression",
      "code": "factory"
    },
    "forest": {
      "_type": "expression",
      "code": "forest"
    },
    "cherry": {
      "_type": "expression",
      "code": "cherry"
    },
    "polar": {
      "_type": "expression",
      "code": "polar"
    },
    "sky": {
      "_type": "expression",
      "code": "sky"
    },
    "prismatic": {
      "_type": "expression",
      "code": "prismatic"
    },
    "candlelight": {
      "_type": "expression",
      "code": "candlelight"
    },
    "colorful": {
      "_type": "expression",
      "code": "colorful"
    },
    "rain": {
      "_type": "expression",
      "code": "rain"
    },
    "waves": {
      "_type": "expression",
      "code": "waves"
    },
    "autumnForest": {
      "_type": "expression",
      "code": "autumnForest"
    },
    "frozen": {
      "_type": "expression",
      "code": "frozen"
    }
  },
  "js/theme/sepia.js": {
    "price": 3000,
    "hasCustomColors": true,
    "light": {
      "primary": {
        "_type": "expression",
        "code": "filterColor(sepiaBase, color => color.desaturate(0.4))"
      },
      "secondary": "#424242",
      "accent": {
        "_type": "expression",
        "code": "filterColor(sepiaBase, color => color.desaturate(0.7).lighten(0.5))"
      },
      "error": {
        "_type": "expression",
        "code": "filterColor(_default.light.error, sepiaFilter)"
      },
      "info": {
        "_type": "expression",
        "code": "filterColor(_default.light.info, sepiaFilter)"
      },
      "success": {
        "_type": "expression",
        "code": "filterColor(_default.light.success, sepiaFilter)"
      },
      "warning": {
        "_type": "expression",
        "code": "filterColor(_default.light.warning, sepiaFilter)"
      },
      "_spread_0": {
        "_type": "spread",
        "from": "filterColorObject(colors, sepiaFilter)"
      }
    },
    "dark": {
      "primary": {
        "_type": "expression",
        "code": "filterColor(sepiaBase, color => color.desaturate(0.4))"
      },
      "secondary": "#424242",
      "accent": {
        "_type": "expression",
        "code": "filterColor(sepiaBase, color => color.desaturate(0.7).lighten(0.5))"
      },
      "error": {
        "_type": "expression",
        "code": "filterColor(_default.dark.error, sepiaFilter)"
      },
      "info": {
        "_type": "expression",
        "code": "filterColor(_default.dark.info, sepiaFilter)"
      },
      "success": {
        "_type": "expression",
        "code": "filterColor(_default.dark.success, sepiaFilter)"
      },
      "warning": {
        "_type": "expression",
        "code": "filterColor(_default.dark.warning, sepiaFilter)"
      },
      "_spread_1": {
        "_type": "spread",
        "from": "filterColorObject(colors, sepiaFilter)"
      }
    }
  },
  "js/theme/yellow.js": {
    "price": 1000,
    "light": {
      "primary": "#D2D219",
      "secondary": "#424242",
      "accent": "#FFFF82"
    },
    "dark": {
      "primary": "#D2D219",
      "secondary": "#424242",
      "accent": "#FFFF82"
    }
  },
  "js/theme/grey.js": {
    "price": 1000,
    "light": {
      "primary": "#787878",
      "secondary": "#424242",
      "accent": "#C0C0C0"
    },
    "dark": {
      "primary": "#787878",
      "secondary": "#424242",
      "accent": "#C0C0C0"
    }
  },
  "js/theme/green.js": {
    "price": 1000,
    "light": {
      "primary": "#29C229",
      "secondary": "#424242",
      "accent": "#92EF92"
    },
    "dark": {
      "primary": "#29C229",
      "secondary": "#424242",
      "accent": "#92EF92"
    }
  },
  "js/theme/orange.js": {
    "price": 1000,
    "light": {
      "primary": "#DF760C",
      "secondary": "#424242",
      "accent": "#FFC182"
    },
    "dark": {
      "primary": "#DF760C",
      "secondary": "#424242",
      "accent": "#FFC182"
    }
  },
  "js/theme/waves.js": {
    "hasCustomBackground": true
  },
  "js/modules/meta.js": {
    "name": "meta",
    "tickspeed": 5,
    "unlockNeeded": null,
    "tick": {
      "_type": "formula",
      "code": "tick() {\n        for (const [key, elem] of Object.entries(store.state.system.tutorial)) {\n            if (!elem.active && !elem.completed && (elem.screen === null || elem.screen === store.state.system.screen) && elem.enableCondition()) {\n                if (elem.currentDelay >= elem.delay) {\n                    store.commit('system/updateTutorialKey', {name: key, key: 'active', value: true});\n                } else {\n                    store.commit('system/updateTutorialKey', {name: key, key: 'currentDelay', value: elem.currentDelay + 1});\n                }\n            }\n        }\n    }"
    },
    "unlock": [
      "debugFeature"
    ],
    "stat": {
      "longestOfflineTime": {
        "display": "time"
      }
    },
    "achievement": {
      "totalLevel": {
        "value": {
          "_type": "formula",
          "code": "() => store.getters['achievement/totalLevel'] - store.state.achievement.meta_totalLevel.level"
        },
        "milestones": {
          "_type": "formula",
          "code": "lvl => getSequence(5, lvl + 1) * 10"
        },
        "relic": {
          "0": "excavator",
          "1": "redCard",
          "2": "briefcase",
          "3": "strangePlant",
          "4": "beneficialVirus"
        }
      },
      "highestGrade": {
        "value": {
          "_type": "formula",
          "code": "() => store.state.stat.school_highestGrade.total"
        },
        "secret": true,
        "display": "grade",
        "cap": 5,
        "milestones": {
          "_type": "formula",
          "code": "lvl => (lvl + 1) * 3 - 2"
        }
      },
      "longestOfflineTime": {
        "value": {
          "_type": "formula",
          "code": "() => store.state.stat.meta_longestOfflineTime.total"
        },
        "secret": true,
        "display": "time",
        "cap": 3,
        "milestones": {
          "_type": "formula",
          "code": "lvl => [SECONDS_PER_DAY * 7, SECONDS_PER_DAY * 30, SECONDS_PER_DAY * 365][lvl]"
        }
      }
    },
    "note": {
      "_type": "expression",
      "code": "[...buildArray(6).map(() => 'g'), ...buildArray(2).map(() => 'system')]"
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [key, elem] of Object.entries(themes)) {\n            store.commit('system/initTheme', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries({\n            '1.5.8': v1_5_8,\n            '1.5.7': v1_5_7,\n            '1.5.6': v1_5_6,\n            '1.5.5': v1_5_5,\n            '1.5.4': v1_5_4,\n            '1.5.3': v1_5_3,\n            '1.5.2': v1_5_2,\n            '1.5.1': v1_5_1,\n            '1.5.0': v1_5_0,\n            '1.4.2': v1_4_2,\n            '1.4.1': v1_4_1,\n            '1.4.0': v1_4_0,\n            '1.3.6': v1_3_6,\n            '1.3.5': v1_3_5,\n            '1.3.4': v1_3_4,\n            '1.3.3': v1_3_3,\n            '1.3.2': v1_3_2,\n            '1.3.1': v1_3_1,\n            '1.3.0': v1_3_0,\n            '1.2.0': v1_2_0,\n            '1.1.2': v1_1_2,\n            '1.1.1': v1_1_1,\n            '1.1.0': v1_1_0,\n            '1.0.1': v1_0_1,\n            '1.0.0': v1_0_0,\n        })) {\n            store.commit('system/initPatchnote', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries({\n            miningDepth: {\n                screen: 'mining',\n                delay: 3,\n                cssDesktop: 'top: 135px; left: calc(12.5% - 2px);',\n                cssTablet: 'top: 135px; left: calc(50% - 2px);',\n                cssMobile: 'top: 127px; left: calc(50% - 2px);'\n            },\n            miningUpgrade: {\n                screen: 'mining',\n                enableCondition: () => store.state.stat.mining_maxDepth0.total >= 5,\n                delay: 0,\n                cssDesktop: 'top: 296px; right: 12px;',\n                cssTablet: 'top: 92px; left: calc(75% - 36px);',\n                cssMobile: 'top: 84px; left: calc(83.3333% - 36px);'\n            },\n            viewFeature: {\n                enableCondition: () => store.state.unlock.gemFeature.see,\n                delay: 5,\n                cssDesktop: 'top: 30px; left: 100px; rotate: -30deg;',\n                cssTablet: 'top: 30px; left: 100px; rotate: -30deg;',\n                cssMobile: 'top: 26px; left: 12px; rotate: -30deg;'\n            },\n            villageJob: {\n                screen: 'village',\n                delay: 3,\n                cssDesktop: 'top: 208px; left: calc(50% - 107px);',\n                cssTablet: 'top: 208px; right: 107px;',\n                cssMobile: 'top: 84px; left: calc(37.5% - 36px);'\n            }\n        })) {\n            store.commit('system/initTutorial', {name: key, ...elem});\n        }\n    }"
    }
  },
  "js/modules/card.js": {
    "name": "card",
    "unlockNeeded": "cardFeature",
    "unlock": [
      "cardFeature",
      "cardShiny"
    ],
    "mult": {
      "cardShinyChance": {
        "display": "percent",
        "baseValue": 0.1
      }
    },
    "currency": {
      "shinyDust": {
        "color": "pale-light-blue",
        "icon": "mdi-shimmer"
      }
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(2).map(() => 'g')"
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [name, feature] of Object.entries({\n            mining: miningCard,\n            village: villageCard,\n            horde: hordeCard,\n            farm: farmCard,\n            gallery: galleryCard,\n            gem: gemCard,\n            event: eventCard,\n        })) {\n            if (feature.feature) {\n                store.dispatch('card/initFeature', {name, ...feature.feature});\n            }\n\n            for (const [key, elem] of Object.entries(feature.collection)) {\n                store.commit('card/initCollection', {name: key, ...elem});\n            }\n\n            for (const [key, elem] of Object.entries(feature.pack)) {\n                store.commit('card/initPack', {name: key, feature: name, ...elem});\n            }\n\n            if (feature.card) {\n                feature.card.forEach(elem => {\n                    store.commit('card/initCard', {feature: name, ...elem});\n                });\n            }\n        }\n    }"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        let obj = {\n            card: {},\n            feature: {}\n        };\n\n        for (const [key, elem] of Object.entries(store.state.card.card)) {\n            if (elem.amount > 0) {\n                obj.card[key] = elem.amount;\n            }\n            if (elem.foundShiny) {\n                if (obj.shiny === undefined) {\n                    obj.shiny = [];\n                }\n                obj.shiny.push(key);\n            }\n        }\n        for (const [key, elem] of Object.entries(store.state.card.feature)) {\n            if (elem.cardSelected.length > 0 || elem.cardEquipped.length > 0) {\n                obj.feature[key] = {cardSelected: elem.cardSelected, cardEquipped: elem.cardEquipped};\n            }\n        }\n\n        return obj;\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        if (data.card) {\n            for (const [key, elem] of Object.entries(data.card)) {\n                if (store.state.card.card[key]) {\n                    store.commit('card/updateKey', {type: 'card', name: key, key: 'amount', value: elem});\n                }\n            }\n        }\n        if (data.feature) {\n            for (const [key, elem] of Object.entries(data.feature)) {\n                if (store.state.card.feature[key]) {\n                    store.commit('card/updateKey', {type: 'feature', name: key, key: 'cardSelected', value: elem.cardSelected});\n                    store.commit('card/updateKey', {type: 'feature', name: key, key: 'cardEquipped', value: elem.cardEquipped});\n                }\n            }\n        }\n        if (data.shiny) {\n            data.shiny.forEach(elem => {\n                store.commit('card/updateKey', {type: 'card', name: elem, key: 'foundShiny', value: true});\n            });\n        }\n        store.dispatch('card/calculateCaches');\n    }"
    }
  },
  "js/modules/treasure.js": {
    "name": "treasure",
    "unlockNeeded": "treasureFeature",
    "unlock": [
      "treasureFeature",
      "treasureSpecialEffect",
      "treasureDual"
    ],
    "mult": {
      "treasureSlots": {
        "round": true,
        "baseValue": 10
      }
    },
    "currency": {
      "fragment": {
        "color": "amber",
        "icon": "mdi-shimmer",
        "gainMult": {}
      }
    },
    "upgrade": {
      "_type": "expression",
      "code": "upgradePremium"
    },
    "rng": {
      "_type": "expression",
      "code": "treasureRng"
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(3).map(() => 'g')"
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [key, elem] of Object.entries(effect)) {\n            store.commit('treasure/initEffect', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(treasureTypes)) {\n            store.commit('treasure/initType', {name: key, ...elem});\n        }\n    }"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        return {\n            items: store.state.treasure.items.map(elem => elem ? filterItem(elem) : null),\n            newItem: store.state.treasure.newItem ? filterItem(store.state.treasure.newItem) : null\n        };\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        if (data.items) {\n            store.commit('treasure/updateKey', {key: 'items', value: data.items.map(elem => elem ? {\n                ...filterItem(elem),\n                valueCache: elem.effect.map(el => store.state.treasure.effectToFeature[el] ? el : fallbackEffect).map((el, i) => store.getters['treasure/effectValue'](\n                    store.state.treasure.effect[store.state.treasure.effectToFeature[el]][el].value * store.state.treasure.type[elem.type].slots[i].power,\n                    elem.tier,\n                    elem.level,\n                    elem.type\n                ))\n            } : null)});\n        }\n        if (data.newItem) {\n            store.commit('treasure/updateKey', {key: 'newItem', value: {\n                ...filterItem(data.newItem),\n                valueCache: data.newItem.effect.map(el => store.state.treasure.effectToFeature[el] ? el : fallbackEffect).map((el, i) => store.getters['treasure/effectValue'](\n                    store.state.treasure.effect[store.state.treasure.effectToFeature[el]][el].value * store.state.treasure.type[data.newItem.type].slots[i].power,\n                    data.newItem.tier,\n                    data.newItem.level,\n                    data.newItem.type\n                ))\n            }});\n        }\n        store.dispatch('treasure/updateEffectCache');\n    }"
    }
  },
  "js/modules/general.js": {
    "name": "general",
    "tickspeed": 1,
    "unlockNeeded": "generalFeature",
    "tick": {
      "_type": "formula",
      "code": "tick() {\n        for (const [gkey, general] of Object.entries(store.state.general)) {\n            if (general.unlock === null || store.state.unlock[general.unlock].see) {\n                for (const [qkey, quest] of Object.entries(general.quests)) {\n                    if (quest.unlock === null || store.state.unlock[quest.unlock].see) {\n                        let complete = true;\n                        while (quest.stage < quest.stages.length && complete) {\n                            const tasks = quest.stages[quest.stage].tasks;\n                            tasks.forEach(task => {\n                                let current = 0;\n                                switch (task.type) {\n                                    case 'stat': {\n                                        current = store.state.stat[task.name][task.subtype === 'current' ? 'value' : 'total'];\n                                        break;\n                                    }\n                                    case 'unlock': {\n                                        current = store.state.unlock[task.name].see;\n                                        break;\n                                    }\n                                    case 'upgrade': {\n                                        current = store.state.upgrade.item[task.name][task.subtype === 'current' ? 'level' : 'highestLevel'];\n                                        break;\n                                    }\n                                    case 'cropLevel': {\n                                        current = store.state.farm.crop[task.name][task.subtype === 'current' ? 'level' : 'levelMax'];\n                                        break;\n                                    }\n                                    case 'equipmentMastery': {\n                                        current = store.state.horde.items[task.name].masteryLevel;\n                                        break;\n                                    }\n                                }\n\n                                if (\n                                    task.operator === undefined && !current ||\n                                    task.operator === '>=' && current < task.value ||\n                                    task.operator === '>' && current <= task.value ||\n                                    task.operator === '<=' && current > task.value ||\n                                    task.operator === '<' && current >= task.value ||\n                                    task.operator === '==' && current !== task.value\n                                ) {\n                                    complete = false;\n                                }\n                            });\n                            if (complete) {\n                                store.dispatch('general/completeQuest', {general: gkey, quest: qkey});\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }"
    },
    "unlock": [
      "generalFeature",
      "generalOrladeeSubfeature",
      "generalOppenschroeSubfeature",
      "generalBelluxSubfeature",
      "generalOnocluaSubfeature",
      "generalOmnisolixSubfeature"
    ],
    "note": [
      "g",
      {
        "_type": "spread",
        "from": "buildArray(31).map(() => 'grobodal')"
      },
      {
        "_type": "spread",
        "from": "buildArray(9).map(() => 'orladee')"
      }
    ],
    "relic": {
      "torch": {
        "icon": "mdi-torch",
        "feature": [
          "general",
          "mining",
          "village"
        ],
        "color": "orange",
        "effect": [
          {
            "name": "miningCardCap",
            "type": "base",
            "value": 1
          },
          {
            "name": "villageCardCap",
            "type": "base",
            "value": 1
          }
        ]
      },
      "purpleHeart": {
        "icon": "mdi-heart",
        "feature": [
          "general",
          "horde"
        ],
        "color": "purple",
        "effect": [
          {
            "name": "hordeHealth",
            "type": "mult",
            "value": 1.5
          },
          {
            "name": "currencyHordeSoulCorruptedGain",
            "type": "mult",
            "value": 1.2
          }
        ]
      },
      "rottenLeaf": {
        "icon": "mdi-leaf",
        "feature": [
          "general",
          "farm"
        ],
        "color": "brown",
        "effect": [
          {
            "name": "farmCropGain",
            "type": "mult",
            "value": 1.75
          },
          {
            "name": "farmExperience",
            "type": "mult",
            "value": 1.2
          },
          {
            "name": "farmOvergrow",
            "type": "base",
            "value": 0.1
          }
        ]
      },
      "stonepiercer": {
        "icon": "mdi-screwdriver",
        "feature": [
          "general",
          "mining"
        ],
        "color": "cherry",
        "effect": [
          {
            "name": "miningDamage",
            "type": "mult",
            "value": 2.25
          }
        ]
      },
      "consolationPrize": {
        "icon": "mdi-seal-variant",
        "feature": [
          "general",
          "village",
          "horde",
          "farm"
        ],
        "color": "lighter-grey",
        "effect": [
          {
            "name": "villageResourceGain",
            "type": "mult",
            "value": 1.4
          },
          {
            "name": "hordeItemMasteryGain",
            "type": "mult",
            "value": 1.4
          },
          {
            "name": "farmExperience",
            "type": "mult",
            "value": 1.4
          }
        ]
      },
      "prettyLamp": {
        "icon": "mdi-vanity-light",
        "feature": [
          "general",
          "gallery"
        ],
        "color": "light-blue",
        "effect": [
          {
            "name": "galleryInspirationStart",
            "type": "base",
            "value": 3
          },
          {
            "name": "thinkHarder",
            "type": "galleryIdea",
            "value": true
          }
        ]
      },
      "chessboard": {
        "icon": "mdi-checkerboard",
        "feature": [
          "general",
          "horde"
        ],
        "color": "grey",
        "effect": [
          {
            "name": "hordeChessItems",
            "type": "unlock",
            "value": true
          }
        ]
      },
      "iridiscentFlower": {
        "icon": "mdi-flower-pollen",
        "feature": [
          "general",
          "cryolab"
        ],
        "color": "pink",
        "effect": [
          {
            "name": "cryolabMaxFeatures",
            "type": "base",
            "value": 1
          }
        ]
      }
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [key, elem] of Object.entries({\n            grobodal,\n            orladee,\n            oppenschroe: {unlock: 'generalOppenschroeSubfeature', quests: {}},\n            bellux: {unlock: 'generalBelluxSubfeature', quests: {}},\n            onoclua: {unlock: 'generalOnocluaSubfeature', quests: {}},\n            omnisolix: {unlock: 'generalOmnisolixSubfeature', quests: {}}\n        })) {\n            store.commit('general/init', {name: key, ...elem});\n        }\n    }"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        let obj = {};\n        for (const [gkey, general] of Object.entries(store.state.general)) {\n            if (general.unlock === null || store.state.unlock[general.unlock].see) {\n                obj[gkey] = {};\n                for (const [qkey, quest] of Object.entries(general.quests)) {\n                    if (quest.stage > 0) {\n                        obj[gkey][qkey] = quest.stage;\n                    }\n                }\n            }\n        }\n        return obj;\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        if (data !== undefined) {\n            for (const [gkey, general] of Object.entries(data)) {\n                for (const [qkey, questStage] of Object.entries(general)) {\n                    store.commit('general/updateQuestKey', {general: gkey, quest: qkey, key: 'stage', value: questStage});\n                    store.dispatch('general/giveReward', {general: gkey, quest: qkey});\n                }\n            }\n        }\n    }"
    }
  },
  "js/modules/mining.js": {
    "name": "mining",
    "tickspeed": 1,
    "unlockNeeded": null,
    "tick": {
      "_type": "formula",
      "code": "function(seconds) {\n        const subfeature = store.state.system.features.mining.currentSubfeature;\n\n        store.commit('stat/add', {feature: 'mining', name: 'timeSpent', value: seconds});\n\n        if (store.state.mining.beaconCooldown > 0) {\n            store.commit('mining/updateKey', {key: 'beaconCooldown', value: Math.max(store.state.mining.beaconCooldown - seconds, 0)});\n        }\n\n        // Smeltery\n        for (const [key, elem] of Object.entries(store.state.mining.smeltery)) {\n            if (elem.stored > 0) {\n                let newProgress = elem.progress + seconds / store.getters['mining/smelteryTimeNeeded'](key);\n                const bars = Math.min(elem.stored, Math.floor(newProgress));\n                if (bars > 0) {\n                    store.commit('mining/updateSmelteryKey', {name: key, key: 'stored', value: elem.stored - bars});\n                    const barSplit = elem.output.split('_');\n                    store.dispatch('currency/gain', {feature: barSplit[0], name: barSplit[1], amount: bars});\n                    if ((elem.stored - bars) <= 0) {\n                        newProgress = 0;\n                    } else {\n                        newProgress -= bars;\n                    }\n                }\n                store.commit('mining/updateSmelteryKey', {name: key, key: 'progress', value: newProgress});\n            }\n        }\n\n        // Resin\n        if (store.state.unlock.miningResin.use && subfeature === 0) {\n            store.dispatch('currency/gain', {feature: 'mining', name: 'resin', amount: seconds * store.getters['mult/get']('currencyMiningResinGain')});\n        }\n\n        // Mining\n        if (store.getters['mining/currentDamage'] > 0) {\n            let secondsLeft = seconds;\n            while (secondsLeft > 0) {\n                const maxDepth = store.state.stat[`mining_maxDepth${subfeature}`].value;\n\n                let breaks = 0;\n                let loots = 0;\n                let preHits = Math.min(secondsLeft, store.getters['mining/currentHitsNeeded']);\n\n                if (store.state.mining.depth < maxDepth) {\n                    loots += preHits;\n                }\n                secondsLeft -= preHits;\n\n                store.commit('stat/increaseTo', {feature: 'mining', name: 'maxDamage', value: store.getters['mining/currentDamage']});\n                store.commit('stat/add', {feature: 'mining', name: 'totalDamage', value: preHits * store.getters['mining/currentDamage']});\n\n                let newDurability = store.state.mining.durability - preHits * store.getters['mining/currentDamage'];\n\n                if (newDurability <= 0) {\n                    breaks++;\n                    let isLatest = maxDepth === store.state.mining.depth;\n                    if (isLatest) {\n                        // Get gasses for the first time\n                        for (const [key, elem] of Object.entries(store.getters['mining/currentGas'])) {\n                            store.dispatch('currency/gain', {feature: 'mining', name: key, amount: elem});\n                        }\n\n                        // also count the first break as loot\n                        loots++;\n                        store.commit('stat/increaseTo', {feature: 'mining', name: 'maxDepth' + subfeature, value: store.state.mining.depth + 1});\n                        store.dispatch('meta/globalLevelPart', {key: 'mining_' + subfeature, amount: store.state.stat[`mining_maxDepth${subfeature}`].total - 1});\n\n                        // Find notes based on depth\n                        if (subfeature === 0) {\n                            const note = notes[store.state.stat.mining_maxDepth0.total - 1];\n                            if (note !== undefined) {\n                                store.dispatch('note/find', note);\n                            }\n                        }\n\n                        // Speedrun stat\n                        if (store.state.stat.mining_timeSpent.value <= 900 && subfeature === 0) {\n                            store.commit('stat/increaseTo', {feature: 'mining', name: 'maxDepthSpeedrun', value: store.state.mining.depth + 1});\n                        }\n\n                        // Update dweller stat\n                        store.dispatch('mining/updateDwellerStat');\n                    }\n                    if (\n                        isLatest &&\n                        store.getters['mining/depthHitsNeeded'](store.state.mining.depth + 1) <= (store.state.system.settings.automation.items.progressMining.value ?? 0)\n                    ) {\n                        awardLoot(breaks, loots, preHits);\n                        store.commit('mining/updateKey', {key: 'depth', value: store.state.mining.depth + 1});\n                        newDurability = store.getters['mining/currentDurability'];\n                        store.dispatch('mining/applyBeaconEffects');\n                    } else {\n                        store.commit('stat/add', {feature: 'mining', name: 'totalDamage', value: secondsLeft * store.getters['mining/currentDamage']});\n                        breaks += Math.floor(secondsLeft / store.getters['mining/hitsNeeded']);\n                        loots += secondsLeft;\n                        newDurability = store.getters['mining/currentDurability'] - store.getters['mining/currentDamage'] * (secondsLeft % store.getters['mining/hitsNeeded']);\n                        awardLoot(breaks, loots, preHits + secondsLeft);\n                        secondsLeft = 0;\n                    }\n                } else {\n                    awardLoot(breaks, loots, preHits);\n                }\n\n                store.commit('mining/updateKey', {key: 'durability', value: newDurability});\n            }\n        } else {\n            // Sulfur gain\n            if (store.state.mining.depth >= MINING_SULFUR_DEPTH && store.getters['mining/currentBreaks'] === 0) {\n                store.dispatch('currency/gain', {feature: 'mining', name: 'sulfur', amount: store.getters['mining/rareDropFinal']('sulfur') * seconds});\n            }\n        }\n\n        // Depth dweller\n        if (store.state.unlock.miningDepthDweller.use) {\n            const dwellerLimit = store.getters['mining/dwellerLimit'];\n            const dwellerSpeed = store.getters['mult/get']('miningDepthDwellerSpeed') / dwellerLimit;\n            let timeLeft = seconds;\n            if (store.state.stat[`mining_depthDweller${subfeature}`].value < dwellerLimit) {\n                // Regular dweller calculation\n                const newDweller = Math.min(\n                    MINING_DWELLER_OVERFLOW + dwellerLimit -\n                    (MINING_DWELLER_OVERFLOW + dwellerLimit - store.state.stat[`mining_depthDweller${subfeature}`].value) *\n                    Math.pow(1 - dwellerSpeed, seconds), dwellerLimit\n                );\n                if (newDweller >= dwellerLimit) {\n                    store.commit('stat/increaseTo', {feature: 'mining', name: 'dwellerCapHit', value: 1});\n                    timeLeft -= Math.ceil(store.getters['mining/timeUntilNext'](dwellerLimit));\n                } else {\n                    timeLeft = 0;\n                }\n                store.commit('stat/increaseTo', {feature: 'mining', name: 'depthDweller' + subfeature, value: newDweller});\n                store.commit('stat/increaseTo', {feature: 'mining', name: 'depthDwellerCap' + subfeature, value: newDweller});\n            }\n            if (timeLeft > 0 && dwellerLimit > 0) {\n                // Dweller overcap\n                let newDweller = store.state.stat[`mining_depthDweller${subfeature}`].value;\n                let dwellerProgress = dwellerSpeed * MINING_DWELLER_OVERFLOW * timeLeft;\n                while (dwellerProgress > 0) {\n                    const breakpointCount = Math.floor(10 * (newDweller + 0.000000000001) / dwellerLimit) - 10;\n                    const targetAmount = ((breakpointCount + 1) / 10) * dwellerLimit;\n                    const progressMade = Math.min(dwellerProgress * Math.pow(MINING_DWELLER_OVERCAP_MULT, breakpointCount + 1), targetAmount);\n                    newDweller += progressMade;\n                    dwellerProgress -= progressMade * Math.pow(1 / MINING_DWELLER_OVERCAP_MULT, breakpointCount + 1);\n                }\n                store.commit('stat/increaseTo', {feature: 'mining', name: 'depthDweller' + subfeature, value: newDweller});\n            }\n        }\n    }"
    },
    "unlock": [
      "miningPickaxeCrafting",
      "miningDepthDweller",
      "miningSmeltery",
      "miningEnhancement",
      "miningResin",
      "miningGasSubfeature",
      "miningSmoke"
    ],
    "stat": {
      "maxDepth0": {
        "value": 1,
        "showInStatistics": true
      },
      "maxDepth1": {
        "value": 1,
        "showInStatistics": true
      },
      "depthDweller0": {},
      "depthDwellerCap0": {
        "showInStatistics": true
      },
      "depthDweller1": {},
      "depthDwellerCap1": {
        "showInStatistics": true
      },
      "totalDamage": {
        "showInStatistics": true
      },
      "maxDamage": {
        "showInStatistics": true
      },
      "craftingCount": {
        "showInStatistics": true
      },
      "craftingLuck": {
        "value": 1
      },
      "craftingWasted": {},
      "dwellerCapHit": {},
      "timeSpent": {
        "display": "time"
      },
      "bestPrestige0": {
        "showInStatistics": true
      },
      "bestPrestige1": {
        "showInStatistics": true
      },
      "prestigeCount": {
        "showInStatistics": true
      },
      "maxDepthSpeedrun": {
        "value": 1
      }
    },
    "mult": {
      "miningDamage": {},
      "miningToughness": {},
      "miningOreGain": {},
      "miningOreCap": {},
      "miningRareEarthGain": {},
      "miningPickaxeCraftingSlots": {
        "round": true,
        "baseValue": 1
      },
      "miningPickaxePremiumCraftingSlots": {
        "round": true
      },
      "miningPickaxeCraftingPower": {},
      "miningPickaxeCraftingQuality": {},
      "miningOreQuality": {
        "baseValue": 1
      },
      "miningDepthDwellerSpeed": {
        "baseValue": 0.000065
      },
      "miningDepthDwellerMax": {
        "display": "percent",
        "baseValue": 0.1
      },
      "miningResinMax": {
        "round": true,
        "baseValue": 1
      },
      "currencyMiningHeliumIncrement": {
        "display": "percent"
      },
      "currencyMiningNeonIncrement": {
        "display": "percent"
      },
      "currencyMiningArgonIncrement": {
        "display": "percent"
      },
      "currencyMiningKryptonIncrement": {
        "display": "percent"
      },
      "currencyMiningXenonIncrement": {
        "display": "percent"
      },
      "currencyMiningRadonIncrement": {
        "display": "percent"
      },
      "miningSmelterySpeed": {
        "baseValue": 1
      },
      "miningSmelteryTemperature": {
        "display": "temperature",
        "baseValue": 100
      },
      "miningEnhancementBarsIncrement": {
        "display": "percent",
        "baseValue": 0.75,
        "min": 0
      },
      "miningEnhancementFinalIncrement": {
        "display": "percent",
        "baseValue": 3,
        "min": 0
      },
      "miningPrestigeIncome": {
        "group": [
          "currencyMiningCrystalGreenGain",
          "currencyMiningCrystalYellowGain"
        ]
      }
    },
    "multGroup": [
      {
        "mult": "miningOreGain",
        "name": "currencyGain",
        "subtype": "ore"
      },
      {
        "mult": "miningOreCap",
        "name": "currencyCap",
        "subtype": "ore"
      },
      {
        "mult": "miningRareEarthGain",
        "name": "currencyGain",
        "subtype": "rareEarth"
      }
    ],
    "currency": {
      "scrap": {
        "color": "brown",
        "icon": "mdi-dots-triangle",
        "gainMult": {},
        "capMult": {
          "baseValue": {
            "_type": "expression",
            "code": "buildNum(10, 'K')"
          }
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            return hitsNeeded === Infinity ? null : (((hitsNeeded + MINING_SCRAP_BREAK) * store.getters['mining/currentScrap']) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "oreAluminium": {
        "subtype": "ore",
        "color": "blue-grey",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "capMult": {
          "baseValue": 12,
          "round": true
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const oreGain = store.getters['mining/currentOre'];\n            return (hitsNeeded === Infinity || !oreGain.oreAluminium) ? null : (((hitsNeeded + MINING_ORE_BREAK) * oreGain.oreAluminium.amount) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "oreCopper": {
        "subtype": "ore",
        "color": "orange",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "capMult": {
          "baseValue": 4,
          "round": true
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const oreGain = store.getters['mining/currentOre'];\n            return (hitsNeeded === Infinity || !oreGain.oreCopper) ? null : (((hitsNeeded + MINING_ORE_BREAK) * oreGain.oreCopper.amount) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "oreTin": {
        "subtype": "ore",
        "color": "grey",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "capMult": {
          "baseValue": 2,
          "round": true
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const oreGain = store.getters['mining/currentOre'];\n            return (hitsNeeded === Infinity || !oreGain.oreTin) ? null : (((hitsNeeded + MINING_ORE_BREAK) * oreGain.oreTin.amount) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "oreIron": {
        "subtype": "ore",
        "color": "deep-orange",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "capMult": {
          "baseValue": 1,
          "round": true
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const oreGain = store.getters['mining/currentOre'];\n            return (hitsNeeded === Infinity || !oreGain.oreIron) ? null : (((hitsNeeded + MINING_ORE_BREAK) * oreGain.oreIron.amount) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "oreTitanium": {
        "subtype": "ore",
        "color": "pale-light-green",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "capMult": {
          "baseValue": 1,
          "round": true
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const oreGain = store.getters['mining/currentOre'];\n            return (hitsNeeded === Infinity || !oreGain.oreTitanium) ? null : (((hitsNeeded + MINING_ORE_BREAK) * oreGain.oreTitanium.amount) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "orePlatinum": {
        "subtype": "ore",
        "color": "skyblue",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "capMult": {
          "baseValue": 1,
          "round": true
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const oreGain = store.getters['mining/currentOre'];\n            return (hitsNeeded === Infinity || !oreGain.orePlatinum) ? null : (((hitsNeeded + MINING_ORE_BREAK) * oreGain.orePlatinum.amount) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "oreIridium": {
        "subtype": "ore",
        "color": "pale-purple",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "capMult": {
          "baseValue": 1,
          "round": true
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const oreGain = store.getters['mining/currentOre'];\n            return (hitsNeeded === Infinity || !oreGain.oreIridium) ? null : (((hitsNeeded + MINING_ORE_BREAK) * oreGain.oreIridium.amount) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "oreOsmium": {
        "subtype": "ore",
        "color": "pale-green",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "capMult": {
          "baseValue": 1,
          "round": true
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const oreGain = store.getters['mining/currentOre'];\n            return (hitsNeeded === Infinity || !oreGain.oreOsmium) ? null : (((hitsNeeded + MINING_ORE_BREAK) * oreGain.oreOsmium.amount) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "oreLead": {
        "subtype": "ore",
        "color": "pale-blue",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "capMult": {
          "baseValue": 1,
          "round": true
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const oreGain = store.getters['mining/currentOre'];\n            return (hitsNeeded === Infinity || !oreGain.oreLead) ? null : (((hitsNeeded + MINING_ORE_BREAK) * oreGain.oreLead.amount) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "barAluminium": {
        "subtype": "bar",
        "color": "blue-grey",
        "icon": "mdi-gold"
      },
      "barBronze": {
        "subtype": "bar",
        "color": "pale-orange",
        "icon": "mdi-gold"
      },
      "barSteel": {
        "subtype": "bar",
        "color": "grey",
        "icon": "mdi-gold"
      },
      "barTitanium": {
        "subtype": "bar",
        "color": "pale-green",
        "icon": "mdi-gold"
      },
      "barShiny": {
        "subtype": "bar",
        "color": "pale-blue",
        "icon": "mdi-gold"
      },
      "barIridium": {
        "subtype": "bar",
        "color": "pale-pink",
        "icon": "mdi-gold"
      },
      "barDarkIron": {
        "subtype": "bar",
        "color": "darker-grey",
        "icon": "mdi-gold"
      },
      "granite": {
        "subtype": "rareEarth",
        "color": "skyblue",
        "icon": "mdi-cube",
        "gainMult": {},
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const rareDropGain = store.getters['mining/rareDrops'];\n            return (hitsNeeded === Infinity || !rareDropGain.granite) ? null : (((hitsNeeded + MINING_RARE_DROP_BREAK) * rareDropGain.granite) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "salt": {
        "subtype": "rareEarth",
        "color": "lighter-grey",
        "icon": "mdi-shaker",
        "gainMult": {},
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const rareDropGain = store.getters['mining/rareDrops'];\n            return (hitsNeeded === Infinity || !rareDropGain.salt) ? null : (((hitsNeeded + MINING_RARE_DROP_BREAK) * rareDropGain.salt) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "coal": {
        "color": "dark-grey",
        "icon": "mdi-chart-bubble",
        "gainMult": {
          "round": true
        }
      },
      "sulfur": {
        "subtype": "rareEarth",
        "color": "pale-yellow",
        "icon": "mdi-fire-circle",
        "gainMult": {},
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            return store.getters['mining/rareDrops'].sulfur ?? null;\n        }"
        },
        "timerIsEstimate": true
      },
      "niter": {
        "color": "pale-light-green",
        "icon": "mdi-water-circle",
        "gainMult": {}
      },
      "obsidian": {
        "subtype": "rareEarth",
        "color": "deep-purple",
        "icon": "mdi-cone",
        "gainMult": {},
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const rareDropGain = store.getters['mining/rareDrops'];\n            return (hitsNeeded === Infinity || !rareDropGain.obsidian) ? null : (((hitsNeeded + MINING_RARE_DROP_BREAK) * rareDropGain.obsidian) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "deeprock": {
        "subtype": "rareEarth",
        "color": "darker-grey",
        "icon": "mdi-gamepad-circle",
        "gainMult": {},
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const rareDropGain = store.getters['mining/rareDrops'];\n            return (hitsNeeded === Infinity || !rareDropGain.deeprock) ? null : (((hitsNeeded + MINING_RARE_DROP_BREAK) * rareDropGain.deeprock) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "glowshard": {
        "color": "cyan",
        "icon": "mdi-lightbulb-fluorescent-tube",
        "gainMult": {},
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            const rareDropGain = store.getters['mining/rareDrops'];\n            return (hitsNeeded === Infinity || !rareDropGain.glowshard) ? null : (((hitsNeeded + MINING_RARE_DROP_BREAK) * rareDropGain.glowshard) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "smoke": {
        "color": "grey",
        "icon": "mdi-smoke",
        "gainMult": {},
        "capMult": {
          "baseValue": 10
        },
        "overcapScaling": 0.25,
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            const hitsNeeded = store.getters['mining/hitsNeeded'];\n            return hitsNeeded === Infinity ? null : (((hitsNeeded + MINING_SMOKE_BREAK) * store.getters['mining/currentSmoke']) / hitsNeeded);\n        }"
        },
        "timerIsEstimate": true
      },
      "ember": {
        "type": "prestige",
        "color": "orange-red",
        "icon": "mdi-fire",
        "overcapMult": 0,
        "gainMult": {
          "display": "percent"
        },
        "capMult": {
          "baseValue": 100
        },
        "currencyMult": {
          "miningSmelterySpeed": {
            "type": "mult",
            "value": {
              "_type": "formula",
              "code": "val => val * 0.02 + 1"
            }
          }
        }
      },
      "resin": {
        "type": "prestige",
        "color": "orange",
        "icon": "mdi-water",
        "gainMult": {
          "baseValue": 0.0001,
          "display": "perSecond"
        },
        "showGainMult": true,
        "showGainTimer": true,
        "capMult": {
          "baseValue": 5
        }
      },
      "crystalGreen": {
        "type": "prestige",
        "alwaysVisible": true,
        "color": "light-green",
        "icon": "mdi-star-three-points",
        "gainMult": {}
      },
      "helium": {
        "type": "prestige",
        "color": "pale-blue",
        "icon": "mdi-gas-cylinder",
        "gainMult": {
          "display": "percent",
          "baseValue": 0.01
        },
        "currencyMult": {
          "currencyMiningScrapCap": {
            "type": "mult",
            "value": {
              "_type": "formula",
              "code": "val => val * 0.01 + 1"
            }
          }
        }
      },
      "neon": {
        "type": "prestige",
        "color": "orange-red",
        "icon": "mdi-gas-cylinder",
        "gainMult": {
          "display": "percent",
          "baseValue": 0.01
        },
        "currencyMult": {
          "miningPickaxeCraftingPower": {
            "type": "mult",
            "value": {
              "_type": "formula",
              "code": "val => val * 0.01 + 1"
            }
          }
        }
      },
      "argon": {
        "type": "prestige",
        "color": "pink-purple",
        "icon": "mdi-gas-cylinder",
        "gainMult": {
          "display": "percent",
          "baseValue": 0.01
        },
        "currencyMult": {
          "currencyMiningScrapGain": {
            "type": "mult",
            "value": {
              "_type": "formula",
              "code": "val => val * 0.01 + 1"
            }
          }
        }
      },
      "krypton": {
        "type": "prestige",
        "color": "light-blue",
        "icon": "mdi-gas-cylinder",
        "gainMult": {
          "display": "percent",
          "baseValue": 0.01
        }
      },
      "xenon": {
        "type": "prestige",
        "color": "blue",
        "icon": "mdi-gas-cylinder",
        "gainMult": {
          "display": "percent",
          "baseValue": 0.01
        }
      },
      "radon": {
        "type": "prestige",
        "color": "light-green",
        "icon": "mdi-gas-cylinder",
        "gainMult": {
          "display": "percent",
          "baseValue": 0.01
        }
      },
      "crystalYellow": {
        "type": "prestige",
        "alwaysVisible": true,
        "color": "yellow",
        "icon": "mdi-star-four-points",
        "gainMult": {}
      }
    },
    "upgrade": {
      "_spread_0": {
        "_type": "spread",
        "from": "upgrade"
      },
      "_spread_1": {
        "_type": "spread",
        "from": "upgrade2"
      },
      "_spread_2": {
        "_type": "spread",
        "from": "upgradePrestige"
      },
      "_spread_3": {
        "_type": "spread",
        "from": "upgradePremium"
      },
      "_spread_4": {
        "_type": "spread",
        "from": "bookMining"
      }
    },
    "relic": {
      "_type": "expression",
      "code": "relic"
    },
    "achievement": {
      "_type": "expression",
      "code": "achievement"
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(34).map(() => 'g')"
    },
    "consumable": {
      "goldenHammer": {
        "icon": "mdi-hammer",
        "color": "amber",
        "price": {
          "gem_sapphire": 20
        }
      }
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [key, elem] of Object.entries(ore)) {\n            store.commit('unlock/init', 'miningCompress' + key.slice(3));\n            store.commit('mining/initOre', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(smeltery)) {\n            store.commit('mining/initSmeltery', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(enhancement)) {\n            store.commit('mining/initEnhancement', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(beacon)) {\n            store.commit('mining/initBeacon', {name: key, ...elem});\n            store.commit('mult/init', {feature: 'mining', name: elem.ownedMult, round: true});\n        }\n\n        store.commit('mining/updateKey', {key: 'durability', value: store.getters['mining/currentDurability']});\n    }"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        let obj = {\n            depth: store.state.mining.depth,\n            durability: store.state.mining.durability,\n            pickaxePower: store.state.mining.pickaxePower,\n        };\n\n        if (store.state.mining.breaks.length > 0) {\n            obj.breaks = store.state.mining.breaks;\n        }\n        if (store.state.unlock.miningPickaxeCrafting.see) {\n            obj.ingredientList = store.state.mining.ingredientList;\n        }\n        if (store.state.mining.enhancementBars > 0) {\n            obj.enhancementBars = store.state.mining.enhancementBars;\n        }\n        if (store.state.mining.enhancementIngredient !== null) {\n            obj.enhancementIngredient = store.state.mining.enhancementIngredient;\n        }\n        if (store.state.mining.resin > 0) {\n            obj.resin = store.state.mining.resin;\n        }\n\n        let smelteryData = {};\n        for (const [key, elem] of Object.entries(store.state.mining.smeltery)) {\n            if (elem.total > 0) {\n                smelteryData[key] = [elem.progress, elem.stored, elem.total];\n            }\n        }\n        if (Object.keys(smelteryData).length > 0) {\n            obj.smeltery = smelteryData;\n        }\n\n        let enhancementData = {};\n        for (const [key, elem] of Object.entries(store.state.mining.enhancement)) {\n            if (elem.level > 0) {\n                enhancementData[key] = elem.level;\n            }\n        }\n        if (Object.keys(enhancementData).length > 0) {\n            obj.enhancement = enhancementData;\n        }\n\n        if (Object.keys(store.state.mining.beaconPlaced).length > 0) {\n            obj.beaconPlaced = store.state.mining.beaconPlaced;\n        }\n        if (store.state.mining.beaconCooldown > 0) {\n            obj.beaconCooldown = store.state.mining.beaconCooldown;\n        }\n\n        return obj;\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        ['depth', 'durability', 'pickaxePower', 'breaks', 'ingredientList', 'enhancementBars', 'enhancementIngredient', 'resin', 'beaconPlaced', 'beaconCooldown'].forEach(elem => {\n            if (data[elem] !== undefined) {\n                store.commit('mining/updateKey', {key: elem, value: data[elem]});\n            }\n        });\n        if (data.smeltery !== undefined) {\n            for (const [key, elem] of Object.entries(data.smeltery)) {\n                if (store.state.mining.smeltery[key] !== undefined) {\n                    store.commit('mining/updateSmelteryKey', {name: key, key: 'progress', value: elem[0]});\n                    store.commit('mining/updateSmelteryKey', {name: key, key: 'stored', value: elem[1]});\n                    store.commit('mining/updateSmelteryKey', {name: key, key: 'total', value: elem[2]});\n                }\n            }\n        }\n        if (data.enhancement !== undefined) {\n            for (const [key, elem] of Object.entries(data.enhancement)) {\n                if (store.state.mining.enhancement[key] !== undefined) {\n                    store.commit('mining/updateEnhancementKey', {name: key, key: 'level', value: elem});\n                    store.dispatch('mining/applyEnhancement', {trigger: false, name: key});\n                }\n            }\n        }\n        store.dispatch('mining/applyBeaconEffects');\n    }"
    }
  },
  "js/modules/cryolab.js": {
    "name": "cryolab",
    "tickspeed": 1,
    "unlockNeeded": "cryolabFeature",
    "tick": {
      "_type": "formula",
      "code": "tick(seconds) {\n        for (const [key, elem] of Object.entries(store.state.cryolab)) {\n            if (elem.active) {\n                const expGain = store.getters['cryolab/expGain'](key);\n                if (expGain > 0) {\n                    store.dispatch('cryolab/gainExp', {feature: key, amount: expGain * seconds / SECONDS_PER_DAY});\n                }\n            }\n            const prestigeGain = store.getters['cryolab/prestigeGain'](key);\n            for (const [currency, amount] of Object.entries(prestigeGain)) {\n                if (currency === 'farm_exp') {\n                    // Special handler for farm experience\n                    for (const [key, elem] of Object.entries(store.state.farm.crop)) {\n                        if (elem.found) {\n                            let amountLeft = amount * elem.baseExpMult * seconds / SECONDS_PER_DAY;\n                            while (amountLeft > 0) {\n                                const levelDiff = elem.levelMax - elem.level;\n                                if (levelDiff <= 0) {\n                                    amountLeft = 0;\n                                    break;\n                                }\n                                const expToNext = store.getters['farm/expNeeded'](key) - elem.exp;\n                                const amountGiven = Math.min(expToNext, amountLeft * levelDiff);\n                                store.dispatch('farm/getCropExp', {crop: key, value: amountGiven});\n                                amountLeft -= amountGiven / levelDiff;\n                            }\n                        }\n                    }\n                } else {\n                    const split = currency.split('_');\n                    store.dispatch('currency/gain', {feature: split[0], name: split[1], amount: amount * seconds / SECONDS_PER_DAY});\n                }\n            }\n        }\n    }"
    },
    "unlock": [
      "cryolabFeature"
    ],
    "mult": {
      "cryolabMaxFeatures": {
        "round": true,
        "baseValue": 1
      }
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(2).map(() => 'g')"
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [key, elem] of Object.entries(store.state.system.features)) {\n            let obj = {name: key, unlock: elem.unlock};\n            if (data[key] !== undefined) {\n                obj.data = data[key];\n            }\n            if (effect[key] !== undefined) {\n                obj.effect = effect[key];\n            }\n            if (elem.main) {\n                store.dispatch('cryolab/init', obj);\n            }\n        }\n    }"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        let obj = {};\n        for (const [key, elem] of Object.entries(store.state.cryolab)) {\n            if (elem.active || elem.exp.find(elem => elem > 0) || elem.level.find(elem => elem > 0)) {\n                obj[key] = {active: elem.active, exp: elem.exp, level: elem.level};\n            }\n        }\n        return obj;\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        for (const [key, elem] of Object.entries(data)) {\n            if (store.state.cryolab[key] !== undefined) {\n                store.commit('cryolab/updateKey', {name: key, key: 'active', value: elem.active});\n                elem.exp.forEach((value, index) => {\n                    store.commit('cryolab/updateSubfeatureKey', {name: key, subfeature: index, key: 'exp', value});\n                });\n                elem.level.forEach((value, index) => {\n                    store.commit('cryolab/updateSubfeatureKey', {name: key, subfeature: index, key: 'level', value});\n                    store.dispatch('cryolab/applyLevelEffects', {feature: key, subfeature: index});\n                });\n            }\n        }\n    }"
    }
  },
  "js/modules/relic.js": {
    "name": "relic",
    "unlockNeeded": "relicFeature",
    "unlock": [
      "relicFeature",
      "relicMuseum"
    ],
    "note": {
      "_type": "expression",
      "code": "buildArray(1).map(() => 'g')"
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [key, elem] of Object.entries(glyph)) {\n            store.commit('relic/initGlyph', {name: key, ...elem});\n        }\n    }"
    }
  },
  "js/modules/gallery.js": {
    "name": "gallery",
    "tickspeed": 1,
    "unlockNeeded": "galleryFeature",
    "tick": {
      "_type": "formula",
      "code": "tick(seconds) {\n        store.commit('stat/add', {feature: 'gallery', name: 'timeSpent', value: seconds});\n\n        const segments = Math.ceil(Math.pow(seconds, 0.5) / 8);\n        let secondsSpent = 0;\n        for (let i = 0; i < segments; i++) {\n            const secondsSegment = Math.round(seconds * (i + 1) / segments) - secondsSpent;\n            secondsSpent += secondsSegment;\n\n            const colors = ['beauty', ...store.state.gallery.color].reverse();\n            const baseGain = colors.map(color => store.getters['mult/get'](`currencyGallery${ capitalize(color) }Gain`));\n\n            colors.forEach((color, index) => {\n                const gain = (baseGain[index] + store.getters['mult/get'](`currencyGallery${ capitalize(color) }Gain`)) / 2;\n                if (gain > 0) {\n                    store.dispatch('currency/gain', {feature: 'gallery', name: color, amount: secondsSegment * gain});\n                }\n            });\n        }\n\n        const globalLevelGallery = Math.floor(logBase(store.state.stat.gallery_beauty.total, 4));\n        if (globalLevelGallery > 0) {\n            store.dispatch('meta/globalLevelPart', {key: 'gallery_0', amount: globalLevelGallery});\n        }\n\n        store.dispatch('gallery/packageAndConverterTick', seconds);\n        if (store.state.unlock.galleryShape.use) {\n            store.dispatch('currency/gain', {feature: 'gallery', name: 'motivation', amount: seconds * store.getters['mult/get']('currencyGalleryMotivationGain')});\n        }\n\n        if (store.state.unlock.galleryInspiration.use) {\n            let newTime = store.state.gallery.inspirationTime + seconds;\n            let newAmount = store.state.gallery.inspirationAmount;\n\n            while (newTime >= store.getters['gallery/inspirationTimeNeeded'](newAmount)) {\n                newTime -= store.getters['gallery/inspirationTimeNeeded'](newAmount);\n                newAmount++;\n            }\n\n            store.commit('gallery/updateKey', {key: 'inspirationTime', value: newTime});\n            if (newAmount > store.state.gallery.inspirationAmount) {\n                store.dispatch('currency/gain', {feature: 'gallery', name: 'inspiration', amount: newAmount - store.state.gallery.inspirationAmount});\n                store.commit('gallery/updateKey', {key: 'inspirationAmount', value: newAmount});\n            }\n        }\n        if (store.state.unlock.galleryCanvas.use) {\n            let totalLevel = 0;\n            for (const [key, elem] of Object.entries(store.state.gallery.colorData)) {\n                if (elem.cacheSpace > 0) {\n                    const speed = store.getters['mult/get']('galleryCanvasSpeed', getSequence(10, elem.cacheSpace) * 0.1, 1 + store.getters['currency/value'](`gallery_${ key }Drum`) * 0.1);\n                    const oldProgress = elem.progress;\n                    let progress = elem.progress;\n                    let secondsLeft = seconds;\n                    while (secondsLeft > 0) {\n                        const difficulty = store.getters['gallery/canvasDifficulty'](key, Math.floor(progress));\n                        const timeUsed = Math.min((Math.floor(progress + 1) - progress) * difficulty / speed, secondsLeft);\n                        progress += timeUsed * speed / difficulty;\n                        secondsLeft -= timeUsed;\n                    }\n                    store.commit('gallery/updateColorDataKey', {name: key, key: 'progress', value: progress});\n                    if (Math.floor(progress) > Math.floor(oldProgress)) {\n                        store.dispatch('gallery/applyCanvasLevel', {name: key, onLevel: true});\n                    }\n                }\n                totalLevel += elem.progress;\n            }\n            store.commit('stat/increaseTo', {feature: 'gallery', name: 'canvasLevelTotal', value: totalLevel});\n        }\n    }"
    },
    "unlock": [
      "galleryFeature",
      "galleryConversion",
      "galleryInspiration",
      "galleryAuction",
      "galleryDrums",
      "galleryShape",
      "galleryCanvas"
    ],
    "stat": {
      "timeSpent": {
        "display": "time"
      },
      "bestPrestige": {
        "showInStatistics": true
      },
      "highestTierIdea": {},
      "shapeComboHighest": {},
      "shapeComboTotal": {
        "showInStatistics": true
      },
      "canvasLevelTotal": {
        "showInStatistics": true
      },
      "hourglassHighest": {},
      "prestigeCount": {
        "showInStatistics": true
      }
    },
    "mult": {
      "galleryInspirationBase": {
        "unlock": "galleryInspiration",
        "baseValue": 300,
        "display": "timeMs"
      },
      "galleryInspirationIncrement": {
        "unlock": "galleryInspiration",
        "baseValue": 1,
        "min": 0,
        "display": "percent"
      },
      "galleryInspirationStart": {
        "unlock": "galleryInspiration"
      },
      "galleryShapeGain": {
        "unlock": "galleryShape"
      },
      "gallerySpecialShapeChance": {
        "unlock": "galleryShape",
        "baseValue": 0.005,
        "display": "percent"
      },
      "gallerySpecialShapeMult": {
        "unlock": "galleryShape",
        "baseValue": 15,
        "display": "mult"
      },
      "galleryCanvasSize": {
        "unlock": "galleryCanvas",
        "baseValue": 1,
        "round": true
      },
      "galleryCanvasSpeed": {
        "unlock": "galleryCanvas",
        "display": "perSecond"
      }
    },
    "currency": {
      "beauty": {
        "color": "deep-purple",
        "icon": "mdi-image-filter-vintage",
        "gainMult": {
          "baseValue": 1,
          "display": "perSecond"
        },
        "showGainMult": true,
        "showGainTimer": true,
        "timerIsEstimate": true
      },
      "converter": {
        "multUnlock": "galleryConversion",
        "color": "pale-green",
        "icon": "mdi-recycle",
        "overcapMult": 0.75,
        "overcapScaling": 0.95,
        "gainMult": {
          "baseValue": 0.2,
          "display": "perSecond"
        },
        "showGainMult": true,
        "capMult": {
          "baseValue": 1000
        }
      },
      "inspiration": {
        "multUnlock": "galleryInspiration",
        "color": "yellow",
        "icon": "mdi-lightbulb-on"
      },
      "package": {
        "multUnlock": "galleryDrums",
        "color": "beige",
        "icon": "mdi-package-variant",
        "overcapMult": 0.8,
        "overcapScaling": 0.8,
        "gainMult": {
          "baseValue": 0.0125,
          "display": "perSecond"
        },
        "showGainMult": true,
        "showGainTimer": true,
        "capMult": {
          "baseValue": 10
        }
      },
      "motivation": {
        "multUnlock": "galleryShape",
        "type": "shape",
        "color": "pink-purple",
        "icon": "mdi-emoticon-excited",
        "overcapMult": 0.5,
        "gainMult": {
          "baseValue": 0.2,
          "display": "perSecond"
        },
        "showGainMult": true,
        "showGainTimer": true,
        "capMult": {
          "baseValue": 100
        }
      },
      "mysteryShape": {
        "multUnlock": "galleryShape",
        "type": "shape",
        "color": "pale-purple",
        "icon": "mdi-octahedron",
        "overcapMult": 0,
        "gainMult": {
          "baseValue": 1
        },
        "capMult": {
          "baseValue": 1337
        }
      },
      "cash": {
        "multUnlock": "galleryAuction",
        "type": "prestige",
        "alwaysVisible": true,
        "color": "green",
        "icon": "mdi-cash",
        "gainMult": {}
      }
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(10).map(() => 'g')"
    },
    "upgrade": {
      "_spread_0": {
        "_type": "spread",
        "from": "upgrade"
      },
      "_spread_1": {
        "_type": "spread",
        "from": "upgradeShape"
      },
      "_spread_2": {
        "_type": "spread",
        "from": "upgradePrestige"
      },
      "_spread_3": {
        "_type": "spread",
        "from": "upgradePremium"
      },
      "_spread_4": {
        "_type": "spread",
        "from": "bookGallery"
      }
    },
    "multGroup": [
      {
        "mult": "galleryShapeGain",
        "name": "currencyGain",
        "type": "shape",
        "blacklist": [
          "gallery_motivation",
          "gallery_mysteryShape"
        ]
      }
    ],
    "relic": {
      "_type": "expression",
      "code": "relic"
    },
    "achievement": {
      "_type": "expression",
      "code": "achievement"
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        // Add each color as a mult and currency\n        store.state.gallery.color.forEach((elem, index) => {\n            const colorMult = ['beauty', ...store.state.gallery.color][index];\n\n            store.dispatch('currency/init', {feature: 'gallery', multUnlock: 'galleryFeature', name: elem, color: elem, icon: 'mdi-liquid-spot', currencyMult: {\n                [`currencyGallery${ capitalize(colorMult) }Gain`]: {type: 'base', value: val => val > 100 ? Math.pow(val * 100, 0.5) : val}\n            }, gainMult: {display: 'perSecond'}, showGainMult: true, showGainTimer: true, timerIsEstimate: true});\n            store.dispatch('currency/init', {feature: 'gallery', multUnlock: 'galleryDrums', name: elem + 'Drum', color: elem, icon: 'mdi-barrel', currencyMult: elem === 'red' ? {\n                currencyGalleryBeautyGain: {type: 'mult', value: val => Math.pow(val * 0.1 + 1, 2)}\n            } : {\n                currencyGalleryBeautyGain: {type: 'mult', value: val => val * 0.1 + 1},\n                [`currencyGallery${ capitalize(colorMult) }Gain`]: {type: 'mult', value: val => val * 0.1 + 1},\n                [`currencyGallery${ capitalize(colorMult) }DrumCap`]: {type: 'bonus', value: val => val}\n            }, overcapMult: 0, capMult: {baseValue: 10, round: true}});\n\n            store.commit('gallery/initColorData', {name: elem});\n            store.commit('mult/init', {feature: 'gallery', name: `gallery${ capitalize(elem) }Conversion`, unlock: 'galleryFeature', baseValue: 1}, {root: true});\n            store.commit('mult/init', {feature: 'gallery', name: `gallery${ capitalize(elem) }DrumChance`, unlock: 'galleryDrums', display: 'percent', min: 0, max: 1}, {root: true});\n        });\n\n        store.commit('mult/init', {feature: 'gallery', name: 'galleryColorGain', unlock: 'galleryFeature', group: store.state.gallery.color.map(elem => `currencyGallery${ capitalize(elem) }Gain`)}, {root: true});\n        store.commit('mult/init', {feature: 'gallery', name: 'galleryColorDrumChance', unlock: 'galleryDrums', group: store.state.gallery.color.map(elem => `gallery${ capitalize(elem) }DrumChance`)}, {root: true});\n        store.commit('mult/init', {feature: 'gallery', name: 'galleryColorDrumCap', unlock: 'galleryDrums', group: store.state.gallery.color.map(elem => `currencyGallery${ capitalize(elem) }DrumCap`)}, {root: true});\n\n        for (const [key, elem] of Object.entries(idea)) {\n            store.commit('gallery/initIdea', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(shape)) {\n            store.commit('gallery/initShape', {name: key, ...elem});\n            if (!elem.isSpecial) {\n                store.dispatch('currency/init', {feature: 'gallery', type: 'shape', multUnlock: 'galleryFeature', name: key, color: elem.color, icon: elem.icon, gainMult: {}, showGainMult: true});\n            }\n        }\n\n        store.commit('gallery/initShapeGrid');\n    }"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        let obj = {\n            shapeGrid: store.state.gallery.shapeGrid\n        };\n\n        if (store.state.gallery.inspirationTime > 0) {\n            obj.inspirationTime = store.state.gallery.inspirationTime;\n        }\n        if (store.state.gallery.inspirationAmount > 0) {\n            obj.inspirationAmount = store.state.gallery.inspirationAmount;\n        }\n        if (store.state.gallery.hourglassCombo > 0) {\n            obj.hourglassCombo = store.state.gallery.hourglassCombo;\n        }\n        if (store.state.gallery.canvasSpace.length > 0) {\n            obj.canvasSpace = store.state.gallery.canvasSpace;\n        }\n        if (store.state.unlock.galleryInspiration.see) {\n            let ideas = {};\n            for (const [key, elem] of Object.entries(store.state.gallery.idea)) {\n                if (elem.owned) {\n                    ideas[key] = elem.level;\n                }\n            }\n            obj.idea = ideas;\n        }\n        if (store.state.unlock.galleryCanvas.see) {\n            let colorData = {};\n            for (const [key, elem] of Object.entries(store.state.gallery.colorData)) {\n                if (elem.progress > 0) {\n                    colorData[key] = elem.progress;\n                }\n            }\n            obj.colorData = colorData;\n        }\n\n        return obj;\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        if (data.shapeGrid) {\n            store.commit('gallery/updateKey', {key: 'shapeGrid', value: data.shapeGrid});\n        }\n        if (data.inspirationTime) {\n            store.commit('gallery/updateKey', {key: 'inspirationTime', value: data.inspirationTime});\n        }\n        if (data.inspirationAmount) {\n            store.commit('gallery/updateKey', {key: 'inspirationAmount', value: data.inspirationAmount});\n        }\n        if (data.hourglassCombo) {\n            store.commit('gallery/updateKey', {key: 'hourglassCombo', value: data.hourglassCombo});\n        }\n        if (data.canvasSpace) {\n            store.commit('gallery/updateKey', {key: 'canvasSpace', value: data.canvasSpace});\n            let colors = {};\n            data.canvasSpace.forEach(elem => {\n                if (colors[elem] === undefined) {\n                    colors[elem] = 0;\n                }\n                colors[elem]++;\n            });\n            for (const [key, elem] of Object.entries(colors)) {\n                if (store.state.gallery.colorData[key] !== undefined) {\n                    store.commit('gallery/updateColorDataKey', {name: key, key: 'cacheSpace', value: elem});\n                }\n            }\n        }\n        if (data.idea !== undefined) {\n            for (const [key, elem] of Object.entries(data.idea)) {\n                if (store.state.gallery.idea[key] !== undefined) {\n                    store.commit('gallery/updateIdeaKey', {name: key, key: 'owned', value: true});\n                    if (elem > 0) {\n                        store.commit('gallery/updateIdeaKey', {name: key, key: 'level', value: elem});\n                        store.dispatch('gallery/applyIdea', {name: key});\n                    }\n                }\n            }\n        }\n        if (data.colorData !== undefined) {\n            for (const [key, elem] of Object.entries(data.colorData)) {\n                if (store.state.gallery.colorData[key] !== undefined) {\n                    if (elem > 0) {\n                        store.commit('gallery/updateColorDataKey', {name: key, key: 'progress', value: elem});\n                        if (elem >= 1) {\n                            store.dispatch('gallery/applyCanvasLevel', {name: key});\n                        }\n                    }\n                }\n            }\n        }\n    }"
    }
  },
  "js/modules/farm.js": {
    "name": "farm",
    "tickspeed": 5,
    "unlockNeeded": "farmFeature",
    "forceTick": {
      "_type": "formula",
      "code": "forceTick(ticks, oldTime, newTime) {\n        const dayDiff = Math.floor(newTime / SECONDS_PER_DAY) - Math.floor(oldTime / SECONDS_PER_DAY);\n        if (dayDiff > 0) {\n            for (const [key, elem] of Object.entries(store.state.farm.crop)) {\n                if (elem.genes.includes('patient') && elem.patientStacks < 60) {\n                    store.commit('farm/updateCropKey', {name: key, key: 'patientStacks', value: Math.min(elem.patientStacks + dayDiff, 60)});\n                }\n            }\n        }\n    }"
    },
    "tick": {
      "_type": "formula",
      "code": "tick(ticks) {\n        const decoration = store.state.farm.building.gardenGnome.cacheAmount + store.state.farm.building.gardenGnome.cachePremium;\n        let highestGrow = 0;\n        store.state.farm.field.forEach((row, y) => {\n            row.forEach((cell, x) => {\n                if (cell !== null && cell.type === 'crop') {\n                    if (cell.cache.overgrow === null) {\n                        store.commit('farm/updateFieldKey', {x, y, key: 'grow', value: Math.min(cell.grow + cell.cache.grow * ticks / 12, 1)});\n                    } else {\n                        let grow = cell.grow;\n                        let stage = Math.floor(cell.grow);\n                        let amt = cell.cache.grow * ticks / 12;\n                        while (amt > 0) {\n                            const left = (stage + 1) - grow;\n                            const stageMult = stage > 0 ? Math.pow(cell.cache.overgrow, stage) : 1;\n                            const given = Math.min(left, amt / stageMult);\n\n                            grow += given;\n                            amt -= given * stageMult;\n                            stage++;\n                        }\n                        if (grow > highestGrow) {\n                            highestGrow = grow;\n                        }\n                        store.commit('farm/updateFieldKey', {x, y, key: 'grow', value: grow});\n                    }\n                    store.commit('farm/updateFieldKey', {x, y, key: 'time', value: cell.time + ticks});\n                    if (decoration > 0) {\n                        store.commit('farm/addFieldBuildingEffect', {x, y, key: 'gardenGnome', value: decoration * ticks});\n                    }\n                    if (cell.cache.lectern > 0) {\n                        store.commit('farm/addFieldBuildingEffect', {x, y, key: 'lectern', value: cell.cache.lectern * ticks});\n                    }\n                    if (cell.cache.pinwheel > 0) {\n                        store.commit('farm/addFieldBuildingEffect', {x, y, key: 'pinwheel', value: cell.cache.pinwheel * ticks});\n                    }\n                    if (cell.cache.flag > 0) {\n                        store.commit('farm/addFieldBuildingEffect', {x, y, key: 'flag', value: cell.cache.flag * ticks});\n                    }\n                    if (cell.cache.gnome > 0) {\n                        store.commit('farm/addFieldBuildingEffect', {x, y, key: 'gnomeBoost', value: cell.cache.gnome * ticks});\n                    }\n                }\n            });\n        });\n        if (highestGrow > 1) {\n            store.commit('stat/increaseTo', {feature: 'farm', name: 'maxOvergrow', value: highestGrow});\n        }\n        store.dispatch('farm/updateGrownHint');\n    }"
    },
    "unlock": [
      "farmFeature",
      "farmDisableEarlyGame",
      "farmCropExp",
      "farmFertilizer",
      "farmAdvancedCardPack",
      "farmLuxuryCardPack"
    ],
    "stat": {
      "harvests": {
        "showInStatistics": true
      },
      "maxOvergrow": {
        "showInStatistics": true
      },
      "bestPrestige": {
        "showInStatistics": true
      },
      "totalMystery": {
        "showInStatistics": true
      }
    },
    "mult": {
      "farmExperience": {
        "baseValue": 1
      },
      "farmGoldChance": {
        "display": "percent"
      },
      "farmGrow": {
        "display": "time"
      },
      "farmOvergrow": {
        "display": "percent"
      },
      "farmHuntChance": {
        "display": "percent"
      },
      "farmRareDropChance": {
        "display": "percent",
        "group": [
          "farmHuntChance"
        ]
      },
      "farmMystery": {},
      "farmCropGain": {
        "group": [
          "currencyFarmVegetableGain",
          "currencyFarmBerryGain",
          "currencyFarmGrainGain",
          "currencyFarmFlowerGain"
        ]
      },
      "farmAllGain": {
        "group": [
          "farmCropGain",
          "farmExperience",
          "farmGoldChance",
          "farmRareDropChance"
        ]
      },
      "farmCropCost": {},
      "farmFertilizerCost": {},
      "farmLuckyHarvestMult": {
        "display": "mult",
        "baseValue": 8
      }
    },
    "currency": {
      "vegetable": {
        "color": "orange",
        "icon": "mdi-carrot",
        "gainMult": {}
      },
      "berry": {
        "color": "purple",
        "icon": "mdi-fruit-grapes",
        "gainMult": {}
      },
      "grain": {
        "color": "yellow",
        "icon": "mdi-barley",
        "gainMult": {}
      },
      "flower": {
        "color": "pink",
        "icon": "mdi-flower",
        "gainMult": {}
      },
      "gold": {
        "color": "amber",
        "icon": "mdi-gold"
      },
      "seedHull": {
        "color": "beige",
        "icon": "mdi-seed",
        "overcapMult": 0,
        "capMult": {
          "baseValue": 50
        }
      },
      "grass": {
        "color": "green",
        "icon": "mdi-grass",
        "overcapMult": 0,
        "capMult": {
          "baseValue": 200
        }
      },
      "petal": {
        "color": "light-blue",
        "icon": "mdi-leaf",
        "overcapMult": 0,
        "currencyMult": {
          "currencyFarmFlowerGain": {
            "type": "mult",
            "value": {
              "_type": "formula",
              "code": "val => val * 0.03 + 1"
            }
          }
        },
        "capMult": {
          "baseValue": 50
        }
      },
      "bug": {
        "color": "brown",
        "icon": "mdi-bug",
        "overcapMult": 0,
        "capMult": {
          "baseValue": 50
        }
      },
      "butterfly": {
        "color": "babypink",
        "icon": "mdi-butterfly",
        "overcapMult": 0,
        "capMult": {
          "baseValue": 30
        }
      },
      "ladybug": {
        "color": "pale-red",
        "icon": "mdi-ladybug",
        "overcapMult": 0,
        "currencyMult": {
          "farmRareDropChance": {
            "type": "base",
            "value": {
              "_type": "formula",
              "code": "val => val * 0.0001"
            }
          }
        },
        "capMult": {
          "baseValue": 150
        }
      },
      "spider": {
        "color": "dark-grey",
        "icon": "mdi-spider",
        "overcapMult": 0,
        "currencyMult": {
          "currencyFarmBugCap": {
            "type": "base",
            "value": {
              "_type": "formula",
              "code": "val => val * 20"
            }
          },
          "currencyFarmButterflyCap": {
            "type": "base",
            "value": {
              "_type": "formula",
              "code": "val => val"
            }
          },
          "currencyFarmLadybugCap": {
            "type": "base",
            "value": {
              "_type": "formula",
              "code": "val => val * 5"
            }
          }
        },
        "capMult": {
          "baseValue": 20
        }
      },
      "bee": {
        "color": "yellow",
        "icon": "mdi-bee",
        "overcapMult": 0,
        "currencyMult": {
          "currencyFarmBerryGain": {
            "type": "mult",
            "value": {
              "_type": "formula",
              "code": "val => val * 0.001 + 1"
            }
          }
        },
        "capMult": {
          "baseValue": 1000
        }
      },
      "mysteryStone": {
        "color": "pale-purple",
        "icon": "mdi-eye-circle-outline",
        "overcapMult": 0,
        "capMult": {
          "baseValue": 1337
        }
      },
      "goldenPetal": {
        "color": "amber",
        "icon": "mdi-leaf",
        "overcapMult": 0,
        "currencyMult": {
          "currencyFarmPetalCap": {
            "type": "base",
            "value": {
              "_type": "formula",
              "code": "val => val * 25"
            }
          }
        },
        "capMult": {
          "baseValue": 10
        }
      },
      "smallSeed": {
        "color": "brown",
        "icon": "mdi-grain",
        "overcapMult": 0,
        "capMult": {
          "baseValue": 800
        }
      }
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(22).map(() => 'g')"
    },
    "upgrade": {
      "_spread_0": {
        "_type": "spread",
        "from": "upgrade"
      },
      "_spread_1": {
        "_type": "spread",
        "from": "upgradePremium"
      },
      "_spread_2": {
        "_type": "spread",
        "from": "bookFarm"
      }
    },
    "relic": {
      "_type": "expression",
      "code": "relic"
    },
    "achievement": {
      "_type": "expression",
      "code": "achievement"
    },
    "consumable": {
      "_type": "expression",
      "code": "fertilizer"
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [key, elem] of Object.entries(crop)) {\n            store.commit('farm/initCrop', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(building)) {\n            store.commit('farm/initBuilding', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(gene)) {\n            store.commit('farm/initGene', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(fertilizer)) {\n            store.commit('farm/initFertilizer', {name: key, ...elem});\n        }\n\n        store.commit('farm/initField');\n\n        store.dispatch('mult/setMult', {name: 'farmHuntChance', key: 'farmGene_hunter', value: 0.01});\n    }"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        let obj = {\n            field: {},\n            crop: {}\n        };\n\n        if (store.state.farm.showColors) {\n            obj.showColors = true;\n        }\n        if (store.state.farm.selectedColor) {\n            obj.selectedColor = store.state.farm.selectedColor;\n        }\n\n        store.state.farm.field.forEach((row, y) => {\n            row.forEach((cell, x) => {\n                if (cell !== null && (cell.type !== null || cell.color !== null)) {\n                    // eslint-disable-next-line no-unused-vars\n                    const {cache: _, ...newObj} = cell;\n                    obj.field[y * 7 + x] = newObj;\n                }\n            });\n        });\n        for (const [key, elem] of Object.entries(store.state.farm.crop)) {\n            if (elem.found) {\n                let rareDrops = {};\n                elem.rareDrop.forEach((drop, index) => {\n                    if (drop.found) {\n                        rareDrops[index] = drop.hunter;\n                    }\n                });\n                obj.crop[key] = {\n                    exp: elem.exp,\n                    level: elem.level,\n                    levelMax: elem.levelMax,\n                    dna: elem.dna,\n                    genes: elem.genes,\n                    genesBlocked: elem.genesBlocked,\n                    cardSelected: elem.cardSelected,\n                    cardEquipped: elem.cardEquipped,\n                    upgrades: elem.upgrades\n                };\n                if (Object.keys(rareDrops).length > 0) {\n                    obj.crop[key].rareDrop = rareDrops;\n                }\n                if (elem.patientStacks > 0) {\n                    obj.patientStacks = elem.patientStacks;\n                }\n            }\n        }\n\n        return obj;\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        if (data.field) {\n            for (const [key, elem] of Object.entries(data.field)) {\n                const fieldId = parseInt(key);\n                let cell = elem;\n                if (cell.type === 'crop') {\n                    cell.cache = {};\n                }\n                store.commit('farm/updateField', {x: fieldId % 7, y: Math.floor(fieldId / 7), value: elem});\n            }\n        }\n        if (data.crop) {\n            for (const [key, elem] of Object.entries(data.crop)) {\n                store.commit('farm/updateCropKey', {name: key, key: 'exp', value: elem.exp});\n                store.commit('farm/updateCropKey', {name: key, key: 'level', value: elem.level});\n                store.commit('farm/updateCropKey', {name: key, key: 'levelMax', value: elem.levelMax});\n                if (elem.rareDrop) {\n                    for (const [index, value] of Object.entries(elem.rareDrop)) {\n                        if (store.state.farm.crop[key].rareDrop[index] !== undefined) {\n                            store.commit('farm/findCropRareDrop', {name: key, index});\n                            store.commit('farm/huntCropRareDrop', {name: key, index, value});\n                        }\n                    }\n                }\n                store.commit('farm/updateCropKey', {name: key, key: 'dna', value: elem.dna});\n                store.commit('farm/updateCropKey', {name: key, key: 'genes', value: elem.genes});\n                store.commit('farm/updateCropKey', {name: key, key: 'genesBlocked', value: elem.genesBlocked});\n                store.commit('farm/updateCropKey', {name: key, key: 'cardSelected', value: elem.cardSelected});\n                store.commit('farm/updateCropKey', {name: key, key: 'cardEquipped', value: elem.cardEquipped});\n                store.commit('farm/updateCropKey', {name: key, key: 'upgrades', value: elem.upgrades});\n\n                if (elem.patientStacks !== undefined) {\n                    store.commit('farm/updateCropKey', {name: key, key: 'patientStacks', value: elem.patientStacks});\n                }\n\n                // Apply level ups\n                store.dispatch('farm/getCropExp', {crop: key, value: 0});\n            }\n        }\n        if (data.showColors) {\n            store.commit('farm/updateKey', {key: 'showColors', value: true});\n        }\n        if (data.selectedColor) {\n            store.commit('farm/updateKey', {key: 'selectedColor', value: data.selectedColor});\n        }\n        store.commit('farm/calculateCropBuildingCaches');\n        store.dispatch('farm/applyGeneEffects');\n        store.dispatch('farm/applyCropPrestige');\n        store.dispatch('farm/updateGrownHint');\n    }"
    }
  },
  "js/modules/event.js": {
    "name": "event",
    "tickspeed": 1,
    "unlockNeeded": "eventFeature",
    "tick": {
      "_type": "formula",
      "code": "tick(seconds, oldTime, newTime) {\n        const currentEvent = store.getters['event/currentEvent'];\n        if (oldTime === 0 || store.state.event.force_event !== null) {\n            if (currentEvent && store.getters['event/eventIsBig'](currentEvent)) {\n                eventTicks[currentEvent](seconds, oldTime, newTime);\n            }\n        } else {\n            const oldDate = new Date(oldTime * 1000);\n            const newDate = new Date(newTime * 1000);\n            const oldDay = getDay(oldDate);\n            const newDay = getDay(newDate);\n            const stats = store.getters['event/dayStats'](oldDay, newDay);\n\n            // Tick old event\n            if (!stats.isSameEvent && !stats.startedBigEvent && stats.startEvent !== null && store.getters['event/eventIsBig'](stats.startEvent)) {\n                const newTicks = Math.floor(Math.min(\n                    new Date(`${oldDate.getFullYear()}-${store.state.event.big[stats.startEvent].end}T23:59:59`).getTime(),\n                    newDate.getTime()\n                ) / 1000);\n                eventTicks[stats.startEvent](newTicks - oldTime, oldTime, newTicks);\n            }\n\n            if (oldDay !== newDay) {\n                store.dispatch('event/dayChange', {start: oldDay, end: newDay});\n            }\n\n            // Tick new event\n            if (stats.isBigEvent) {\n                const oldTicks = Math.floor(Math.max(\n                    new Date(`${newDate.getFullYear()}-${store.state.event.big[currentEvent].start}T00:00:00`).getTime(),\n                    oldDate.getTime()\n                ) / 1000);\n                eventTicks[currentEvent](newTime - oldTicks, oldTicks, newTime);\n            }\n        }\n    }"
    },
    "unlock": [
      "eventFeature",
      "bloomPoppyFlower",
      "bloomIrisFlower",
      "bloomLilyFlower",
      "bloomOrchidFlower",
      "bloomCornflowerFlower",
      "summerFestivalTerraform",
      "cindersEvent",
      "bloomEvent",
      "weatherChaosEvent",
      "summerFestivalEvent",
      "nightHuntEvent",
      "snowdownEvent",
      "merchantEvent",
      "bingoCasinoEvent",
      "wheelOfFortuneCasinoEvent",
      "bankEvent"
    ],
    "stat": {
      "bloomMaxDaisy": {
        "type": "bloom"
      },
      "bloomMaxPoppy": {
        "type": "bloom"
      },
      "bloomMaxIris": {
        "type": "bloom"
      },
      "bloomMaxLily": {
        "type": "bloom"
      },
      "summerFestivalMaxStage": {
        "type": "summerFestival"
      },
      "cindersHighscore": {
        "type": "cinders"
      },
      "bloomHighscore": {
        "type": "bloom"
      },
      "weatherChaosHighscore": {
        "type": "weatherChaos"
      },
      "summerFestivalHighscore": {
        "type": "summerFestival"
      },
      "nightHuntHighscore": {
        "type": "nightHunt"
      },
      "snowdownHighscore": {
        "type": "snowdown"
      }
    },
    "mult": {
      "merchantOffers": {
        "baseValue": 6,
        "round": true
      },
      "bankInvestmentSize": {
        "baseValue": 500,
        "round": true
      },
      "bankLoanSize": {
        "baseValue": 500,
        "round": true
      },
      "bankCardPackChance": {
        "display": "percent"
      },
      "cindersProductionFirefly": {
        "baseValue": 1
      },
      "cindersProductionGlowshroom": {
        "baseValue": 75
      },
      "cindersProductionGlowfish": {
        "baseValue": 4000
      },
      "cindersProductionLantern": {
        "baseValue": {
          "_type": "expression",
          "code": "buildNum(200, 'K')"
        }
      },
      "cindersProductionCampfire": {
        "baseValue": {
          "_type": "expression",
          "code": "buildNum(12, 'M')"
        }
      },
      "cindersProductionCoral": {
        "baseValue": {
          "_type": "expression",
          "code": "buildNum(800, 'M')"
        }
      },
      "cindersProductionJellyfish": {
        "baseValue": {
          "_type": "expression",
          "code": "buildNum(35, 'B')"
        }
      },
      "cindersProductionNightbloom": {
        "baseValue": {
          "_type": "expression",
          "code": "buildNum(1.5, 'T')"
        }
      },
      "cindersProductionNeonlight": {
        "baseValue": {
          "_type": "expression",
          "code": "buildNum(40, 'T')"
        }
      },
      "cindersProductionSun": {
        "baseValue": {
          "_type": "expression",
          "code": "buildNum(1, 'Qa')"
        }
      },
      "cindersFirstProducerCost": {},
      "cindersNonFirstProducerCost": {},
      "cindersUpgradeLightCost": {},
      "cindersUpgradeProducerRequirement": {},
      "cindersCandlePower": {},
      "bloomInventorySize": {
        "baseValue": 5,
        "round": true
      },
      "bloomBreederSize": {
        "baseValue": 1,
        "round": true
      },
      "bloomDaisyChance": {
        "baseValue": 0.3,
        "display": "percent"
      },
      "bloomPoppyChance": {
        "baseValue": 0.25,
        "display": "percent"
      },
      "bloomIrisChance": {
        "baseValue": 0.2,
        "display": "percent"
      },
      "bloomLilyChance": {
        "baseValue": 0.15,
        "display": "percent"
      },
      "bloomOrchidChance": {
        "baseValue": 0.1,
        "display": "percent"
      },
      "bloomCornflowerChance": {
        "baseValue": 0.05,
        "display": "percent"
      },
      "bloomDaisyBreedTime": {
        "baseValue": 300,
        "display": "time",
        "min": 1,
        "round": true
      },
      "bloomPoppyBreedTime": {
        "baseValue": 900,
        "display": "time",
        "min": 1,
        "round": true
      },
      "bloomIrisBreedTime": {
        "baseValue": 2400,
        "display": "time",
        "min": 1,
        "round": true
      },
      "bloomLilyBreedTime": {
        "baseValue": 6000,
        "display": "time",
        "min": 1,
        "round": true
      },
      "bloomOrchidBreedTime": {
        "baseValue": 14400,
        "display": "time",
        "min": 1,
        "round": true
      },
      "bloomCornflowerBreedTime": {
        "baseValue": 28800,
        "display": "time",
        "min": 1,
        "round": true
      },
      "weatherChaosFishingPower": {},
      "weatherChaosFishSizeMax": {
        "min": 1
      },
      "weatherChaosFishSizeAverage": {
        "baseValue": 1
      },
      "weatherChaosFishingTime": {
        "baseValue": 300,
        "display": "time",
        "min": 1,
        "round": true
      },
      "weatherChaosFishDoubleChance": {
        "display": "percent",
        "min": 0,
        "max": 1
      },
      "weatherChaosIgnoreWeather": {
        "display": "percent",
        "min": 0,
        "max": 1
      },
      "weatherChaosFishChance": {
        "baseValue": 0.25,
        "display": "percent",
        "min": 0,
        "max": 1
      },
      "weatherChaosTreasureChance": {
        "baseValue": 0.05,
        "display": "percent",
        "min": 0,
        "max": 1
      },
      "weatherChaosAlgaeWeight": {
        "baseValue": 1
      },
      "weatherChaosDriftwoodWeight": {
        "baseValue": 1
      },
      "weatherChaosPlasticWeight": {
        "baseValue": 1
      },
      "weatherChaosTrashGain": {
        "group": [
          "currencyEventAlgaeGain",
          "currencyEventDriftwoodGain",
          "currencyEventPlasticGain"
        ]
      },
      "summerFestivalBuildQueueSlots": {
        "baseValue": 3,
        "round": true
      },
      "summerFestivalBuildQueueSpeed": {
        "baseValue": 1
      },
      "summerFestivalMaterialGain": {
        "baseValue": 100
      },
      "summerFestivalMaterialStackCap": {
        "baseValue": 10
      },
      "nightHuntFindableIngredients": {
        "baseValue": 4,
        "round": true
      },
      "nightHuntIngredientSize": {
        "baseValue": 8,
        "round": true
      },
      "nightHuntFavouriteIngredientSize": {
        "round": true
      },
      "nightHuntMaxIngredients": {
        "baseValue": 1,
        "round": true
      },
      "nightHuntBonusIngredientCount": {
        "round": true
      },
      "nightHuntBonusIngredientAmount": {
        "baseValue": 1,
        "round": true
      },
      "nightHuntRitualStability": {
        "display": "percent",
        "min": -1,
        "max": 2
      },
      "nightHuntRitualSuccessChance": {
        "display": "percent",
        "min": 0,
        "max": 1
      },
      "nightHuntRitualHintChance": {
        "display": "percent",
        "min": 0,
        "max": 1
      },
      "nightHuntRitualFamiliarity": {
        "display": "percent",
        "min": 0
      },
      "snowdownAttack": {
        "baseValue": 4
      },
      "snowdownHealth": {
        "baseValue": 40,
        "round": true
      },
      "snowdownDefense": {
        "round": true
      },
      "snowdownCritRating": {},
      "snowdownBlockRating": {},
      "snowdownPetAttack": {},
      "snowdownPetHealth": {
        "round": true
      },
      "snowdownPetDefense": {
        "round": true
      },
      "snowdownPetCritRating": {},
      "snowdownPetBlockRating": {},
      "snowdownAllAttack": {
        "group": [
          "snowdownAttack",
          "snowdownPetAttack"
        ]
      },
      "snowdownAllHealth": {
        "group": [
          "snowdownHealth",
          "snowdownPetHealth"
        ]
      },
      "snowdownAllDefense": {
        "group": [
          "snowdownDefense",
          "snowdownPetDefense"
        ]
      },
      "snowdownRevengeStats": {
        "display": "percent"
      },
      "snowdownRevengeCrit": {},
      "snowdownRevengeBlock": {},
      "snowdownResourceGain": {}
    },
    "multGroup": [
      {
        "mult": "snowdownResourceGain",
        "name": "currencyGain",
        "subtype": "snowdownResource"
      }
    ],
    "currency": {
      "light": {
        "type": "cinders",
        "color": "yellow",
        "icon": "mdi-lightbulb-on",
        "gainMult": {}
      },
      "soot": {
        "type": "cinders",
        "color": "darker-grey",
        "icon": "mdi-liquid-spot",
        "gainMult": {}
      },
      "blossom": {
        "type": "bloom",
        "color": "pale-pink",
        "icon": "mdi-flower-poppy",
        "gainMult": {}
      },
      "algae": {
        "type": "weatherChaos",
        "color": "green",
        "icon": "mdi-grass",
        "gainMult": {}
      },
      "driftwood": {
        "type": "weatherChaos",
        "color": "wooden",
        "icon": "mdi-tree",
        "gainMult": {}
      },
      "plastic": {
        "type": "weatherChaos",
        "color": "pale-pink",
        "icon": "mdi-delete-variant",
        "gainMult": {}
      },
      "slime": {
        "type": "weatherChaos",
        "color": "lime",
        "icon": "mdi-liquid-spot",
        "gainMult": {}
      },
      "log": {
        "type": "summerFestival",
        "color": "wooden",
        "icon": "mdi-tray-full"
      },
      "stoneBlock": {
        "type": "summerFestival",
        "color": "grey",
        "icon": "mdi-cube"
      },
      "coconut": {
        "type": "summerFestival",
        "color": "brown",
        "icon": "mdi-bowling"
      },
      "shell": {
        "type": "summerFestival",
        "color": "pale-pink",
        "icon": "mdi-set-all"
      },
      "music": {
        "type": "summerFestival",
        "color": "pink",
        "icon": "mdi-music",
        "gainMult": {},
        "showGainMult": true
      },
      "sand": {
        "type": "summerFestival",
        "color": "beige",
        "icon": "mdi-dots-triangle",
        "gainMult": {},
        "showGainMult": true
      },
      "freshWater": {
        "type": "summerFestival",
        "color": "light-blue",
        "icon": "mdi-water",
        "gainMult": {},
        "showGainMult": true
      },
      "coal": {
        "type": "summerFestival",
        "color": "darker-grey",
        "icon": "mdi-chart-bubble",
        "gainMult": {},
        "showGainMult": true
      },
      "metalPart": {
        "type": "summerFestival",
        "color": "blue-grey",
        "icon": "mdi-scatter-plot",
        "gainMult": {},
        "showGainMult": true
      },
      "pearl": {
        "type": "summerFestival",
        "color": "skyblue",
        "icon": "mdi-circle-opacity",
        "gainMult": {},
        "showGainMult": true
      },
      "salt": {
        "type": "summerFestival",
        "color": "lighter-grey",
        "icon": "mdi-shaker",
        "gainMult": {},
        "showGainMult": true
      },
      "pepper": {
        "type": "summerFestival",
        "color": "dark-grey",
        "icon": "mdi-shaker",
        "gainMult": {},
        "showGainMult": true
      },
      "honey": {
        "type": "summerFestival",
        "color": "amber",
        "icon": "mdi-beehive-outline",
        "gainMult": {},
        "showGainMult": true
      },
      "vegetable": {
        "type": "summerFestival",
        "color": "green",
        "icon": "mdi-leek",
        "gainMult": {},
        "showGainMult": true
      },
      "citrusFruit": {
        "type": "summerFestival",
        "color": "yellow",
        "icon": "mdi-fruit-citrus",
        "gainMult": {},
        "showGainMult": true
      },
      "rawFish": {
        "type": "summerFestival",
        "color": "teal",
        "icon": "mdi-fish",
        "gainMult": {},
        "showGainMult": true
      },
      "cookedFish": {
        "type": "summerFestival",
        "color": "pale-orange",
        "icon": "mdi-fish"
      },
      "rawMeat": {
        "type": "summerFestival",
        "color": "red",
        "icon": "mdi-food-steak",
        "gainMult": {},
        "showGainMult": true
      },
      "cookedMeat": {
        "type": "summerFestival",
        "color": "brown",
        "icon": "mdi-food-steak"
      },
      "solidPlate": {
        "type": "summerFestival",
        "color": "light-grey",
        "icon": "mdi-layers"
      },
      "sandstone": {
        "type": "summerFestival",
        "color": "pale-yellow",
        "icon": "mdi-wall"
      },
      "hardSteel": {
        "type": "summerFestival",
        "color": "dark-grey",
        "icon": "mdi-gold"
      },
      "compositePlate": {
        "type": "summerFestival",
        "color": "pale-orange",
        "icon": "mdi-pillar"
      },
      "coconutSalad": {
        "type": "summerFestival",
        "color": "pale-green",
        "icon": "mdi-bowl-mix"
      },
      "saltyShell": {
        "type": "summerFestival",
        "color": "pale-red",
        "icon": "mdi-set-all"
      },
      "lemonCandy": {
        "type": "summerFestival",
        "color": "yellow",
        "icon": "mdi-candy"
      },
      "steak": {
        "type": "summerFestival",
        "color": "wooden",
        "icon": "mdi-food-steak"
      },
      "fishSticks": {
        "type": "summerFestival",
        "color": "pale-orange",
        "icon": "mdi-tally-mark-4"
      },
      "essence": {
        "type": "nightHunt",
        "color": "pink",
        "icon": "mdi-flask-round-bottom",
        "gainMult": {
          "display": "perSecond"
        },
        "showGainMult": true
      },
      "lavender": {
        "type": "nightHunt",
        "color": "pale-purple",
        "icon": "mdi-grass"
      },
      "mapleLeaf": {
        "type": "nightHunt",
        "color": "orange",
        "icon": "mdi-leaf-maple"
      },
      "fourLeafClover": {
        "type": "nightHunt",
        "color": "pale-green",
        "icon": "mdi-clover"
      },
      "charredSkull": {
        "type": "nightHunt",
        "color": "dark-grey",
        "icon": "mdi-skull"
      },
      "mysticalWater": {
        "type": "nightHunt",
        "color": "cyan",
        "icon": "mdi-flask-round-bottom-outline"
      },
      "cheese": {
        "type": "nightHunt",
        "color": "yellow",
        "icon": "mdi-cheese"
      },
      "spiderWeb": {
        "type": "nightHunt",
        "color": "light-grey",
        "icon": "mdi-spider-web"
      },
      "strangeEgg": {
        "type": "nightHunt",
        "color": "orange-red",
        "icon": "mdi-egg-easter"
      },
      "puzzlePiece": {
        "type": "nightHunt",
        "color": "red-pink",
        "icon": "mdi-puzzle"
      },
      "wizardHat": {
        "type": "nightHunt",
        "color": "indigo",
        "icon": "mdi-wizard-hat"
      },
      "cactus": {
        "type": "nightHunt",
        "color": "green",
        "icon": "mdi-cactus"
      },
      "feather": {
        "type": "nightHunt",
        "color": "skyblue",
        "icon": "mdi-feather"
      },
      "sapling": {
        "type": "snowdown",
        "subtype": "snowdownResource",
        "color": "green",
        "icon": "mdi-sprout",
        "gainMult": {
          "display": "perSecond"
        },
        "showGainMult": true,
        "showGainTimer": true
      },
      "yarn": {
        "type": "snowdown",
        "subtype": "snowdownResource",
        "color": "red",
        "icon": "mdi-link",
        "gainMult": {
          "display": "perSecond"
        },
        "showGainMult": true,
        "showGainTimer": true
      },
      "dough": {
        "type": "snowdown",
        "subtype": "snowdownResource",
        "color": "beige",
        "icon": "mdi-liquid-spot",
        "gainMult": {
          "display": "perSecond"
        },
        "showGainMult": true,
        "showGainTimer": true
      },
      "snow": {
        "type": "snowdown",
        "subtype": "snowdownResource",
        "color": "light-blue",
        "icon": "mdi-snowflake",
        "gainMult": {
          "display": "perSecond"
        },
        "showGainMult": true,
        "showGainTimer": true
      },
      "wax": {
        "type": "cinders",
        "color": "pale-yellow",
        "icon": "mdi-beehive-outline"
      },
      "humus": {
        "type": "bloom",
        "color": "brown",
        "icon": "mdi-gradient-vertical"
      },
      "cloud": {
        "type": "weatherChaos",
        "color": "skyblue",
        "icon": "mdi-cloud"
      },
      "cocktail": {
        "type": "summerFestival",
        "color": "amber",
        "icon": "mdi-glass-cocktail"
      },
      "magic": {
        "type": "nightHunt",
        "color": "pink-purple",
        "icon": "mdi-auto-fix"
      },
      "snowball": {
        "type": "snowdown",
        "color": "skyblue",
        "icon": "mdi-circle"
      },
      "cindersToken": {
        "type": "token",
        "color": "amber",
        "icon": "mdi-poker-chip",
        "gainMult": {}
      },
      "bloomToken": {
        "type": "token",
        "color": "light-green",
        "icon": "mdi-poker-chip"
      },
      "weatherChaosToken": {
        "type": "token",
        "color": "grey",
        "icon": "mdi-poker-chip"
      },
      "summerFestivalToken": {
        "type": "token",
        "color": "red",
        "icon": "mdi-poker-chip"
      },
      "nightHuntToken": {
        "type": "token",
        "color": "purple",
        "icon": "mdi-poker-chip"
      },
      "snowdownToken": {
        "type": "token",
        "color": "blue",
        "icon": "mdi-poker-chip"
      }
    },
    "upgrade": {
      "_spread_0": {
        "_type": "spread",
        "from": "cindersUpgrade"
      },
      "_spread_1": {
        "_type": "spread",
        "from": "cindersProducer"
      },
      "_spread_2": {
        "_type": "spread",
        "from": "bloomUpgrade"
      },
      "_spread_3": {
        "_type": "spread",
        "from": "weatherChaosUpgrade"
      },
      "_spread_4": {
        "_type": "spread",
        "from": "summerFestivalUpgrade"
      },
      "_spread_5": {
        "_type": "spread",
        "from": "nightHuntUpgrade"
      },
      "_spread_6": {
        "_type": "spread",
        "from": "snowdownUpgrade"
      }
    },
    "relic": {
      "_type": "expression",
      "code": "relic"
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(34).map(() => 'g')"
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [key, elem] of Object.entries(weather)) {\n            store.commit('weatherChaos/initWeather', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(fishingRod)) {\n            store.commit('weatherChaos/initFishingRod', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(location)) {\n            store.commit('weatherChaos/initLocation', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(fish)) {\n            store.commit('weatherChaos/initFish', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(bait)) {\n            store.commit('weatherChaos/initBait', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(building)) {\n            store.commit('summerFestival/initBuilding', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(ingredientStat)) {\n            store.commit('nightHunt/initIngredientStat', {name: key, effect: elem});\n        }\n        for (const [key, elem] of Object.entries(potion)) {\n            store.commit('nightHunt/initPotion', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(item)) {\n            store.commit('snowdown/initItem', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(prize)) {\n            store.commit('event/initPrize', {name: key, ...elem});\n        }\n        for (const [key, elem] of Object.entries(project)) {\n            store.commit('event/initBankProject', {name: key, ...elem});\n        }\n    }"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        let obj = {};\n\n        if (store.state.event.force_event !== null) {\n            obj.force_event = store.state.event.force_event;\n        }\n        if (store.state.event.shop_merchant.length > 0) {\n            obj.shop_merchant = store.state.event.shop_merchant;\n        }\n        if (store.state.event.shop_big.length > 0) {\n            obj.shop_big = store.state.event.shop_big;\n        }\n        if (store.state.event.casino_type !== null) {\n            obj.casino_type = store.state.event.casino_type;\n        }\n        if (store.state.event.casino_bingo_bought) {\n            obj.casino_bingo_bought = true;\n        }\n        if (store.state.event.casino_bingo_card !== null) {\n            obj.casino_bingo_card = store.state.event.casino_bingo_card;\n        }\n        if (store.state.event.casino_bingo_draws.length > 0) {\n            obj.casino_bingo_draws = store.state.event.casino_bingo_draws;\n        }\n        if (store.state.event.casino_bingo_boosts.length > 0) {\n            obj.casino_bingo_boosts = store.state.event.casino_bingo_boosts;\n        }\n        if (store.state.event.casino_bingo_prize_1 !== null) {\n            obj.casino_bingo_prize_1 = store.state.event.casino_bingo_prize_1;\n        }\n        if (store.state.event.casino_bingo_prize_2 !== null) {\n            obj.casino_bingo_prize_2 = store.state.event.casino_bingo_prize_2;\n        }\n        if (store.state.event.casino_bingo_prize_3 !== null) {\n            obj.casino_bingo_prize_3 = store.state.event.casino_bingo_prize_3;\n        }\n        if (store.state.event.casino_wheel_segments.length > 0) {\n            obj.casino_wheel_segments = store.state.event.casino_wheel_segments;\n        }\n        if (store.state.event.casino_wheel_rotation > 0) {\n            obj.casino_wheel_rotation = store.state.event.casino_wheel_rotation;\n        }\n\n        let bankProjects = {};\n        let hasBankProject = false;\n        for (const [key, elem] of Object.entries(store.state.event.bank_project)) {\n            if (elem.level > 0 || elem.spent > 0) {\n                bankProjects[key] = {level: elem.level, spent: elem.spent};\n                hasBankProject = true;\n            }\n        }\n\n        if (hasBankProject) {\n            obj.bank_project = bankProjects;\n        }\n\n        if (store.state.event.bank_project_current !== null) {\n            obj.bank_project_current = store.state.event.bank_project_current;\n        }\n        if (store.state.event.bank_investment > 0) {\n            obj.bank_investment = store.state.event.bank_investment;\n        }\n        if (store.state.event.bank_loan > 0) {\n            obj.bank_loan = store.state.event.bank_loan;\n        }\n        if (store.state.event.bank_action) {\n            obj.bank_action = true;\n        }\n\n        // cinders stuff\n        if (store.state.cinders.activeCandle !== null) {\n            obj.cinders_candle = store.state.cinders.activeCandle;\n        }\n\n        // bloom stuff\n        if (store.state.bloom.inventory.length > 0) {\n            obj.bloom_inventory = store.state.bloom.inventory;\n        }\n        if (store.state.bloom.breeder.length > 0) {\n            obj.bloom_breeder = store.state.bloom.breeder;\n        }\n\n        // weather chaos stuff\n        if (store.state.weatherChaos.currentLocation !== 'pond') {\n            obj.weatherChaos_currentLocation = store.state.weatherChaos.currentLocation;\n        }\n        if (store.state.weatherChaos.currentFishingRod !== 'basic') {\n            obj.weatherChaos_currentFishingRod = store.state.weatherChaos.currentFishingRod;\n        }\n        if (store.state.weatherChaos.currentBait !== null) {\n            obj.weatherChaos_currentBait = store.state.weatherChaos.currentBait;\n        }\n        if (store.state.weatherChaos.nextWeather.length > 0) {\n            obj.weatherChaos_nextWeather = store.state.weatherChaos.nextWeather;\n        }\n        if (store.state.weatherChaos.fishingProgress > 0) {\n            obj.weatherChaos_fishingProgress = store.state.weatherChaos.fishingProgress;\n        }\n        if (store.state.weatherChaos.treasureRods > 0) {\n            obj.weatherChaos_treasureRods = store.state.weatherChaos.treasureRods;\n        }\n        if (store.state.weatherChaos.boughtRods > 0) {\n            obj.weatherChaos_boughtRods = store.state.weatherChaos.boughtRods;\n        }\n\n        let weatherChaosFishingRod = [];\n        for (const [key, elem] of Object.entries(store.state.weatherChaos.fishingRod)) {\n            if (elem.owned && !elem.ownedDefault) {\n                weatherChaosFishingRod.push(key);\n            }\n        }\n        if (weatherChaosFishingRod.length > 0) {\n            obj.weatherChaos_fishingRod = weatherChaosFishingRod;\n        }\n\n        let weatherChaosLocation = [];\n        for (const [key, elem] of Object.entries(store.state.weatherChaos.location)) {\n            if (elem.owned && !elem.ownedDefault) {\n                weatherChaosLocation.push(key);\n            }\n        }\n        if (weatherChaosLocation.length > 0) {\n            obj.weatherChaos_location = weatherChaosLocation;\n        }\n\n        let weatherChaosBait = {};\n        for (const [key, elem] of Object.entries(store.state.weatherChaos.bait)) {\n            if (elem.owned > 0) {\n                weatherChaosBait[key] = elem.owned;\n            }\n        }\n        if (Object.keys(weatherChaosBait).length > 0) {\n            obj.weatherChaos_bait = weatherChaosBait;\n        }\n\n        let weatherChaosFish = {};\n        for (const [key, elem] of Object.entries(store.state.weatherChaos.fish)) {\n            if (elem.catchRecord !== null) {\n                weatherChaosFish[key] = elem.catchRecord;\n            }\n        }\n        if (Object.keys(weatherChaosFish).length > 0) {\n            obj.weatherChaos_fish = weatherChaosFish;\n        }\n\n        // summer festival stuff\n        if (Object.keys(store.state.summerFestival.placedBuilding).length > 0) {\n            obj.summerFestival_placedBuilding = store.state.summerFestival.placedBuilding;\n        }\n        if (store.state.summerFestival.buildQueue.length > 0) {\n            obj.summerFestival_buildQueue = store.state.summerFestival.buildQueue;\n        }\n        if (store.state.summerFestival.nextBuildingId > 1) {\n            obj.summerFestival_nextBuildingId = store.state.summerFestival.nextBuildingId;\n        }\n        if (store.state.summerFestival.island !== null) {\n            obj.summerFestival_island = store.state.summerFestival.island.map(row => row.map(cell => {\n                return {\n                    tile: cell.tile,\n                    drop: cell.drop,\n                    building: cell.building,\n                    unlocked: cell.unlocked,\n                };\n            }));\n        }\n        if (store.state.summerFestival.freeExpansion > 0) {\n            obj.summerFestival_freeExpansion = store.state.summerFestival.freeExpansion;\n        }\n        if (store.state.summerFestival.topazExpansion > 0) {\n            obj.summerFestival_topazExpansion = store.state.summerFestival.topazExpansion;\n        }\n        if (store.state.summerFestival.questsCompleted > 0) {\n            obj.summerFestival_questsCompleted = store.state.summerFestival.questsCompleted;\n        }\n\n        // night hunt stuff\n        if (Object.keys(store.state.nightHunt.changedCurrency).length > 0) {\n            obj.nightHunt_changedCurrency = store.state.nightHunt.changedCurrency;\n        }\n        if (store.state.nightHunt.ritualIngredients.length > 0) {\n            obj.nightHunt_ritualIngredients = store.state.nightHunt.ritualIngredients;\n        }\n        if (store.state.nightHunt.bonusIngredients.length > 0) {\n            obj.nightHunt_bonusIngredients = store.state.nightHunt.bonusIngredients;\n        }\n        if (store.state.nightHunt.performedRituals.length > 0) {\n            obj.nightHunt_performedRituals = store.state.nightHunt.performedRituals;\n        }\n        if (Object.keys(store.state.nightHunt.ritualFamiliarity).length > 0) {\n            obj.nightHunt_ritualFamiliarity = store.state.nightHunt.ritualFamiliarity;\n        }\n        if (Object.keys(store.state.nightHunt.ritualHint).length > 0) {\n            obj.nightHunt_ritualHint = store.state.nightHunt.ritualHint;\n        }\n        if (store.state.nightHunt.favouriteIngredient !== 'copy') {\n            obj.nightHunt_favouriteIngredient = store.state.nightHunt.favouriteIngredient;\n        }\n\n        let potions = {};\n        let hasPotions = false;\n        for (const [key, elem] of Object.entries(store.state.nightHunt.potion)) {\n            if (elem.recipe !== null || elem.level > 0) {\n                potions[key] = {recipe: elem.recipe, level: elem.level};\n                hasPotions = true;\n            }\n        }\n\n        if (hasPotions) {\n            obj.nightHunt_potion = potions;\n        }\n\n        // snowdown stuff\n        if (store.state.snowdown.fight > 0) {\n            obj.snowdown_fight = store.state.snowdown.fight;\n        }\n        if (store.state.snowdown.rewardProducer) {\n            obj.snowdown_rewardProducer = true;\n        }\n        if (store.state.snowdown.rewardItem !== null) {\n            obj.snowdown_rewardItem = store.state.snowdown.rewardItem;\n        }\n        if (store.state.snowdown.itemsBought > 0) {\n            obj.snowdown_itemsBought = store.state.snowdown.itemsBought;\n        }\n        if (store.state.snowdown.itemsBoughtTopaz > 0) {\n            obj.snowdown_itemsBoughtTopaz = store.state.snowdown.itemsBoughtTopaz;\n        }\n        if (store.state.snowdown.revenge > 0) {\n            obj.snowdown_revenge = store.state.snowdown.revenge;\n        }\n\n        let items = {};\n        let hasItems = false;\n        for (const [key, elem] of Object.entries(store.state.snowdown.item)) {\n            if (elem.amount > 0) {\n                items[key] = elem.amount;\n                hasItems = true;\n            }\n        }\n\n        if (hasItems) {\n            obj.snowdown_item = items;\n        }\n\n        return obj;\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        if (data.force_event !== undefined) {\n            store.commit('event/updateKey', {key: 'force_event', value: data.force_event});\n        }\n        if (data.shop_merchant !== undefined) {\n            store.commit('event/updateKey', {key: 'shop_merchant', value: data.shop_merchant});\n        }\n        if (data.shop_big !== undefined) {\n            store.commit('event/updateKey', {key: 'shop_big', value: data.shop_big});\n        }\n        if (data.casino_type !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_type', value: data.casino_type});\n        }\n        if (data.casino_bingo_bought !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_bingo_bought', value: data.casino_bingo_bought});\n        }\n        if (data.casino_bingo_card !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_bingo_card', value: data.casino_bingo_card});\n        }\n        if (data.casino_bingo_draws !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_bingo_draws', value: data.casino_bingo_draws});\n        }\n        if (data.casino_bingo_boosts !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_bingo_boosts', value: data.casino_bingo_boosts});\n        }\n        if (data.casino_bingo_prize_1 !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_bingo_prize_1', value: data.casino_bingo_prize_1});\n        }\n        if (data.casino_bingo_prize_2 !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_bingo_prize_2', value: data.casino_bingo_prize_2});\n        }\n        if (data.casino_bingo_prize_3 !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_bingo_prize_3', value: data.casino_bingo_prize_3});\n        }\n        if (data.casino_wheel_segments !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_wheel_segments', value: data.casino_wheel_segments});\n        }\n        if (data.casino_wheel_rotation !== undefined) {\n            store.commit('event/updateKey', {key: 'casino_wheel_rotation', value: data.casino_wheel_rotation});\n        }\n        if (data.bank_project_current !== undefined) {\n            store.commit('event/updateKey', {key: 'bank_project_current', value: data.bank_project_current});\n        }\n        if (data.bank_project !== undefined) {\n            for (const [key, elem] of Object.entries(data.bank_project)) {\n                store.commit('event/updateBankProjectKey', {name: key, key: 'spent', value: elem.spent});\n                if (elem.level > 0) {\n                    store.commit('event/updateBankProjectKey', {name: key, key: 'level', value: elem.level});\n                    store.dispatch('event/bankProjectApply', {name: key, onBuy: false});\n                }\n            }\n        }\n        if (data.bank_investment !== undefined) {\n            store.commit('event/updateKey', {key: 'bank_investment', value: data.bank_investment});\n        }\n        if (data.bank_loan !== undefined) {\n            store.commit('event/updateKey', {key: 'bank_loan', value: data.bank_loan});\n        }\n        if (data.bank_action !== undefined) {\n            store.commit('event/updateKey', {key: 'bank_action', value: data.bank_action});\n        }\n        if (data.cinders_candle !== undefined) {\n            store.commit('cinders/updateKey', {key: 'activeCandle', value: data.cinders_candle});\n        }\n        if (data.bloom_inventory !== undefined) {\n            store.commit('bloom/updateKey', {key: 'inventory', value: data.bloom_inventory});\n        }\n        if (data.bloom_breeder !== undefined) {\n            store.commit('bloom/updateKey', {key: 'breeder', value: data.bloom_breeder});\n        }\n        if (data.weatherChaos_currentLocation !== undefined) {\n            store.commit('weatherChaos/updateKey', {key: 'currentLocation', value: data.weatherChaos_currentLocation});\n            store.dispatch('weatherChaos/applyLocationEffects', data.weatherChaos_currentLocation);\n        }\n        if (data.weatherChaos_currentFishingRod !== undefined) {\n            store.commit('weatherChaos/updateKey', {key: 'currentFishingRod', value: data.weatherChaos_currentFishingRod});\n            store.dispatch('weatherChaos/applyFishingRodEffects', data.weatherChaos_currentFishingRod);\n        }\n        if (data.weatherChaos_currentBait !== undefined) {\n            store.commit('weatherChaos/updateKey', {key: 'currentBait', value: data.weatherChaos_currentBait});\n            store.dispatch('weatherChaos/applyBaitEffects', data.weatherChaos_currentBait);\n        }\n        if (data.weatherChaos_nextWeather !== undefined) {\n            store.commit('weatherChaos/updateKey', {key: 'nextWeather', value: data.weatherChaos_nextWeather});\n        }\n        if (data.weatherChaos_fishingProgress !== undefined) {\n            store.commit('weatherChaos/updateKey', {key: 'fishingProgress', value: data.weatherChaos_fishingProgress});\n        }\n        if (data.weatherChaos_treasureRods !== undefined) {\n            store.commit('weatherChaos/updateKey', {key: 'treasureRods', value: data.weatherChaos_treasureRods});\n        }\n        if (data.weatherChaos_boughtRods !== undefined) {\n            store.commit('weatherChaos/updateKey', {key: 'boughtRods', value: data.weatherChaos_boughtRods});\n        }\n        if (data.weatherChaos_fishingRod !== undefined) {\n            data.weatherChaos_fishingRod.forEach(key => {\n                store.commit('weatherChaos/updateSubkey', {name: 'fishingRod', key, subkey: 'owned', value: true});\n            });\n        }\n        if (data.weatherChaos_location !== undefined) {\n            data.weatherChaos_location.forEach(key => {\n                store.commit('weatherChaos/updateSubkey', {name: 'location', key, subkey: 'owned', value: true});\n            });\n        }\n        if (data.weatherChaos_bait !== undefined) {\n            for (const [key, elem] of Object.entries(data.weatherChaos_bait)) {\n                store.commit('weatherChaos/updateSubkey', {name: 'bait', key, subkey: 'owned', value: elem});\n            }\n        }\n        if (data.weatherChaos_fish !== undefined) {\n            for (const [key, elem] of Object.entries(data.weatherChaos_fish)) {\n                store.commit('weatherChaos/updateSubkey', {name: 'fish', key, subkey: 'catchRecord', value: elem});\n            }\n        }\n        if (data.summerFestival_buildQueue !== undefined) {\n            store.commit('summerFestival/updateKey', {key: 'buildQueue', value: data.summerFestival_buildQueue});\n        }\n        if (data.summerFestival_nextBuildingId !== undefined) {\n            store.commit('summerFestival/updateKey', {key: 'nextBuildingId', value: data.summerFestival_nextBuildingId});\n        }\n        if (data.summerFestival_island !== undefined) {\n            store.commit('summerFestival/updateKey', {key: 'island', value: data.summerFestival_island.map(row => row.map(cell => {\n                return {\n                    ...cell,\n                    cacheAutocollect: null,\n                };\n            }))});\n        }\n        if (data.summerFestival_freeExpansion !== undefined) {\n            store.commit('summerFestival/updateKey', {key: 'freeExpansion', value: data.summerFestival_freeExpansion});\n        }\n        if (data.summerFestival_topazExpansion !== undefined) {\n            store.commit('summerFestival/updateKey', {key: 'topazExpansion', value: data.summerFestival_topazExpansion});\n        }\n        if (data.summerFestival_questsCompleted !== undefined) {\n            store.commit('summerFestival/updateKey', {key: 'questsCompleted', value: data.summerFestival_questsCompleted});\n        }\n        if (data.summerFestival_placedBuilding !== undefined) {\n            store.commit('summerFestival/updateKey', {key: 'placedBuilding', value: data.summerFestival_placedBuilding});\n            for (const [key, elem] of Object.entries(data.summerFestival_placedBuilding)) {\n                if (elem.level > 0) {\n                    store.dispatch('summerFestival/applyBuildingEffects', parseInt(key));\n                }\n            }\n            store.dispatch('summerFestival/calculateConnectCaches');\n        }\n        if (data.nightHunt_changedCurrency !== undefined) {\n            store.commit('nightHunt/updateKey', {key: 'changedCurrency', value: data.nightHunt_changedCurrency});\n        }\n        if (data.nightHunt_ritualIngredients !== undefined) {\n            store.commit('nightHunt/updateKey', {key: 'ritualIngredients', value: data.nightHunt_ritualIngredients});\n        }\n        if (data.nightHunt_bonusIngredients !== undefined) {\n            store.commit('nightHunt/updateKey', {key: 'bonusIngredients', value: data.nightHunt_bonusIngredients});\n        }\n        if (data.nightHunt_performedRituals !== undefined) {\n            store.commit('nightHunt/updateKey', {key: 'performedRituals', value: data.nightHunt_performedRituals});\n        }\n        if (data.nightHunt_ritualFamiliarity !== undefined) {\n            store.commit('nightHunt/updateKey', {key: 'ritualFamiliarity', value: data.nightHunt_ritualFamiliarity});\n        }\n        if (data.nightHunt_ritualHint !== undefined) {\n            store.commit('nightHunt/updateKey', {key: 'ritualHint', value: data.nightHunt_ritualHint});\n        }\n        if (data.nightHunt_favouriteIngredient !== undefined) {\n            store.commit('nightHunt/updateKey', {key: 'favouriteIngredient', value: data.nightHunt_favouriteIngredient});\n        }\n        if (data.nightHunt_potion !== undefined) {\n            for (const [key, elem] of Object.entries(data.nightHunt_potion)) {\n                store.commit('nightHunt/updatePotionKey', {name: key, key: 'recipe', value: elem.recipe});\n                if (elem.level > 0) {\n                    store.commit('nightHunt/updatePotionKey', {name: key, key: 'level', value: elem.level});\n                    store.dispatch('nightHunt/applyPotionEffects', key);\n                }\n            }\n        }\n        if (data.snowdown_fight !== undefined) {\n            store.commit('snowdown/updateKey', {key: 'fight', value: data.snowdown_fight});\n        }\n        if (data.snowdown_rewardProducer !== undefined) {\n            store.commit('snowdown/updateKey', {key: 'rewardProducer', value: data.snowdown_rewardProducer});\n        }\n        if (data.snowdown_rewardItem !== undefined) {\n            store.commit('snowdown/updateKey', {key: 'rewardItem', value: data.snowdown_rewardItem});\n        }\n        if (data.snowdown_itemsBought !== undefined) {\n            store.commit('snowdown/updateKey', {key: 'itemsBought', value: data.snowdown_itemsBought});\n        }\n        if (data.snowdown_itemsBoughtTopaz !== undefined) {\n            store.commit('snowdown/updateKey', {key: 'itemsBoughtTopaz', value: data.snowdown_itemsBoughtTopaz});\n        }\n        if (data.snowdown_revenge !== undefined) {\n            store.commit('snowdown/updateKey', {key: 'revenge', value: data.snowdown_revenge});\n            store.dispatch('snowdown/applyRevengeEffect');\n        }\n        if (data.snowdown_item !== undefined) {\n            for (const [key, elem] of Object.entries(data.snowdown_item)) {\n                store.commit('snowdown/updateItemKey', {name: key, key: 'amount', value: elem});\n                store.dispatch('snowdown/applyItemEffects', key);\n            }\n        }\n    }"
    }
  },
  "js/modules/gem.js": {
    "name": "gem",
    "tickspeed": 1,
    "unlockNeeded": "gemFeature",
    "tick": {
      "_type": "formula",
      "code": "tick(seconds, oldTime, newTime) {\n        let progress = store.state.gem.progress;\n        const genSpeed = store.getters['gem/genSpeed'] / GEM_SPEED_BASE;\n\n        if (store.state.unlock.eventFeature.see) {\n            let currentTime = oldTime;\n            let nextDay = Math.floor((new Date(oldTime * 1000)).setHours(0, 0, 0, 0) / 1000) + SECONDS_PER_DAY;\n\n            let topazProgress = 0;\n            let eventProgress = 0;\n            let totalProgress = 0;\n\n            const isSimulation = oldTime === 0 || store.state.event.force_event !== null;\n\n            const lastEvent = store.getters['event/eventOnDay'](getDay(new Date(isSimulation ? Date.now() : (newTime * 1000))));\n            let lastEventTime = null;\n            if (lastEvent !== null && store.getters['event/eventIsBig'](lastEvent)) {\n                const year = (new Date(newTime * 1000)).getFullYear();\n                const start = store.state.event.big[lastEvent].start;\n                lastEventTime = isSimulation ? -1 : Math.floor((new Date(`${year}-${start}T00:00:00`)).getTime() / 1000);\n            }\n\n            while (currentTime < newTime) {\n                let timeDiff = Math.min(nextDay, newTime) - currentTime;\n\n                progress += timeDiff * genSpeed * store.state.system.timeMult;\n\n                if (progress >= 1) {\n                    if (lastEventTime !== null && currentTime > lastEventTime) {\n                        eventProgress += Math.floor(progress) - totalProgress;\n                    } else {\n                        const currentEvent = store.getters['event/eventOnDay'](getDay(new Date(isSimulation ? Date.now() : (currentTime * 1000))));\n                        if (currentEvent === null || !store.getters['event/eventIsBig'](currentEvent)) {\n                            topazProgress += Math.floor(progress) - totalProgress;\n                        }\n                    }\n                }\n\n                currentTime = nextDay;\n                nextDay += SECONDS_PER_DAY;\n                totalProgress = Math.floor(progress);\n            }\n\n            if (eventProgress > 0) {\n                store.dispatch('currency/gain', {feature: 'event', name: store.state.event.big[lastEvent].currency, amount: eventProgress});\n                store.dispatch('note/find', 'event_2');\n            }\n            if (topazProgress > 0) {\n                store.dispatch('currency/gain', {feature: 'gem', name: 'topaz', amount: topazProgress});\n            }\n        } else {\n            progress += seconds * genSpeed;\n        }\n\n        if (progress >= 1) {\n            const gems = Math.floor(progress);\n            ['ruby', 'emerald', 'sapphire', 'amethyst'].forEach(elem => {\n                store.dispatch('currency/gain', {feature: 'gem', name: elem, amount: gems});\n            });\n            progress -= gems;\n        }\n\n        store.commit('gem/updateKey', {key: 'progress', value: progress});\n    }"
    },
    "unlock": [
      "gemFeature"
    ],
    "currency": {
      "ruby": {
        "color": "red",
        "icon": "mdi-rhombus",
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            return store.getters['gem/genSpeed'] / GEM_SPEED_BASE;\n        }"
        },
        "timerIsEstimate": true,
        "hideGainTag": true
      },
      "emerald": {
        "color": "green",
        "icon": "mdi-hexagon",
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            return store.getters['gem/genSpeed'] / GEM_SPEED_BASE;\n        }"
        },
        "timerIsEstimate": true,
        "hideGainTag": true
      },
      "sapphire": {
        "color": "indigo",
        "icon": "mdi-pentagon",
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            return store.getters['gem/genSpeed'] / GEM_SPEED_BASE;\n        }"
        },
        "timerIsEstimate": true,
        "hideGainTag": true
      },
      "amethyst": {
        "color": "purple",
        "icon": "mdi-cards-diamond",
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            return store.getters['gem/genSpeed'] / GEM_SPEED_BASE;\n        }"
        },
        "timerIsEstimate": true,
        "hideGainTag": true
      },
      "topaz": {
        "color": "amber",
        "icon": "mdi-triangle",
        "overcapMult": 0,
        "capMult": {
          "round": true,
          "baseValue": 1000
        },
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            return store.getters['gem/genSpeed'] / GEM_SPEED_BASE;\n        }"
        },
        "timerIsEstimate": true,
        "hideGainTag": true
      },
      "diamond": {
        "color": "cyan",
        "icon": "mdi-diamond"
      },
      "onyx": {
        "color": "deep-purple",
        "icon": "mdi-octagon"
      }
    },
    "upgrade": {
      "topazBag": {
        "type": "premium",
        "requirement": {
          "_type": "formula",
          "code": "requirement() {\n            return store.state.unlock.eventFeature.see;\n        }"
        },
        "price": {
          "_type": "formula",
          "code": "price(lvl) {\n            return {gem_ruby: [2, 3][lvl % 2] * Math.pow(2, Math.floor(lvl / 2)) * 100};\n        }"
        },
        "effect": [
          {
            "name": "currencyGemTopazCap",
            "type": "base",
            "value": {
              "_type": "formula",
              "code": "lvl => lvl * 200"
            }
          }
        ]
      }
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(2).map(() => 'g')"
    },
    "consumable": {
      "prestigeStone": {
        "icon": "mdi-circle-double",
        "color": "deep-purple",
        "price": {
          "gem_sapphire": 400
        }
      }
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        return {\n            progress: store.state.gem.progress\n        };\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        if (data.progress !== undefined) {\n            store.commit('gem/updateKey', {key: 'progress', value: data.progress});\n        }\n    }"
    }
  },
  "js/modules/achievement.js": {
    "name": "achievement",
    "tickspeed": 1,
    "unlockNeeded": "achievementFeature",
    "tick": {
      "_type": "formula",
      "code": "tick() {\n        store.dispatch('achievement/check');\n    }"
    },
    "unlock": [
      "achievementFeature"
    ],
    "relic": {
      "excavator": {
        "icon": "mdi-excavator",
        "feature": [
          "achievement",
          "mining"
        ],
        "color": "orange",
        "effect": [
          {
            "name": "currencyMiningScrapGain",
            "type": "mult",
            "value": 2
          },
          {
            "name": "currencyMiningScrapCap",
            "type": "mult",
            "value": 2
          }
        ]
      },
      "redCard": {
        "icon": "mdi-cards",
        "feature": [
          "achievement",
          "horde"
        ],
        "color": "red",
        "effect": [
          {
            "name": "currencyHordeMonsterPartCap",
            "type": "bonus",
            "value": {
              "_type": "expression",
              "code": "buildNum(10, 'K')"
            }
          },
          {
            "name": "hordeCardCap",
            "type": "base",
            "value": 1
          }
        ]
      },
      "briefcase": {
        "icon": "mdi-briefcase",
        "feature": [
          "achievement",
          "treasure"
        ],
        "color": "pale-blue",
        "effect": [
          {
            "name": "treasureSlots",
            "type": "base",
            "value": 8
          }
        ]
      },
      "strangePlant": {
        "icon": "mdi-sprout",
        "feature": [
          "achievement",
          "village",
          "farm"
        ],
        "color": "pale-purple",
        "effect": [
          {
            "name": "villageMaterialGain",
            "type": "mult",
            "value": 2
          },
          {
            "name": "farmCropGain",
            "type": "mult",
            "value": 2
          }
        ]
      },
      "beneficialVirus": {
        "icon": "mdi-virus",
        "feature": [
          "achievement",
          "mining",
          "horde"
        ],
        "color": "pale-green",
        "effect": [
          {
            "name": "miningToughness",
            "type": "mult",
            "value": 0.5
          },
          {
            "name": "hordeCorruption",
            "type": "bonus",
            "value": -0.5
          }
        ]
      }
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(1).map(() => 'g')"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        let obj = {};\n\n        for (const [key, elem] of Object.entries(store.state.achievement)) {\n            if (elem.level > 0) {\n                obj[key] = elem.level;\n            }\n        }\n\n        return obj;\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        for (const [key, elem] of Object.entries(data)) {\n            if (store.state.achievement[key] !== undefined) {\n                store.commit('achievement/updateKey', {name: key, key: 'cacheHideNotification', value: elem});\n            }\n        }\n        store.dispatch('achievement/check');\n    }"
    }
  },
  "js/modules/horde.js": {},
  "js/modules/school.js": {
    "name": "school",
    "tickspeed": 60,
    "unlockNeeded": "schoolFeature",
    "tick": {
      "_type": "formula",
      "code": "tick(minutes, oldTime, newTime) {\n        store.dispatch('currency/gain', {feature: 'school', name: 'book', amount: store.getters['mult/get']('currencySchoolBookGain', store.getters['school/subjectsBookGain']) * minutes / MINUTES_PER_HOUR});\n        store.dispatch('note/find', 'school_2');\n        const dayDiff = Math.floor(newTime / SECONDS_PER_DAY) - Math.floor(oldTime / SECONDS_PER_DAY);\n        if (dayDiff > 0) {\n            store.dispatch('currency/gain', {feature: 'school', name: 'examPass', amount: dayDiff}, {root: true});\n        }\n    }"
    },
    "unlock": [
      "schoolFeature",
      "schoolLiteratureSubfeature",
      "schoolHistorySubfeature",
      "schoolArtSubfeature"
    ],
    "stat": {
      "highestGrade": {
        "display": "grade"
      }
    },
    "currency": {
      "book": {
        "color": "brown",
        "icon": "mdi-book",
        "gainMult": {
          "display": "perHour"
        },
        "showGainMult": true,
        "gainTimerFunction": {
          "_type": "formula",
          "code": "gainTimerFunction() {\n            return store.getters['mult/get']('currencySchoolBookGain', store.getters['school/subjectsBookGain']);\n        }"
        }
      },
      "goldenDust": {
        "color": "amber",
        "icon": "mdi-timer-sand",
        "overcapMult": 0,
        "capMult": {
          "baseValue": {
            "_type": "expression",
            "code": "buildNum(10, 'K')"
          }
        }
      },
      "examPass": {
        "color": "pale-blue",
        "icon": "mdi-ticket-account"
      }
    },
    "upgrade": {
      "_type": "expression",
      "code": "upgradePremium"
    },
    "note": {
      "_type": "expression",
      "code": "buildArray(5).map(() => 'g')"
    },
    "init": {
      "_type": "formula",
      "code": "init() {\n        for (const [key, elem] of Object.entries({\n            math: {scoreGoal: 12},\n            literature: {unlock: 'schoolLiteratureSubfeature', scoreGoal: 8},\n            history: {unlock: 'schoolHistorySubfeature', scoreGoal: 5},\n            art: {unlock: 'schoolArtSubfeature', scoreGoal: 10}\n        })) {\n            store.commit('school/init', {name: key, ...elem});\n        }\n    }"
    },
    "saveGame": {
      "_type": "formula",
      "code": "saveGame() {\n        let obj = {};\n        for (const [key, elem] of Object.entries(store.state.school)) {\n            if (elem.grade > 0 || elem.progress > 0) {\n                obj[key] = [elem.grade, elem.currentGrade, elem.progress];\n            }\n        }\n        return obj;\n    }"
    },
    "loadGame": {
      "_type": "formula",
      "code": "loadGame(data) {\n        for (const [key, elem] of Object.entries(data)) {\n            if (store.state.school[key] !== undefined) {\n                store.commit('school/updateKey', {name: key, key: 'grade', value: elem[0]});\n                store.commit('school/updateKey', {name: key, key: 'currentGrade', value: elem[1]});\n                store.commit('school/updateKey', {name: key, key: 'progress', value: elem[2]});\n            }\n        }\n    }"
    }
  },
  "js/modules/village.js": {},
  "js/modules/village/card.js": {
    "feature": {
      "prefix": "VI",
      "reward": [
        {
          "name": "villageResourceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.03 + 1"
          }
        }
      ],
      "shinyReward": [
        {
          "name": "villagePrestigeIncome",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ],
      "powerReward": [
        {
          "name": "villageMaterialGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.07, lvl)"
          }
        },
        {
          "name": "villageMaterialCap",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.03, lvl)"
          }
        },
        {
          "name": "villagePrestigeIncome",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.05, lvl)"
          }
        }
      ],
      "unlock": "villageFeature"
    },
    "collection": {
      "neighborhood": {
        "reward": [
          {
            "name": "villageWorker",
            "type": "base",
            "value": 8
          }
        ]
      },
      "plantsInTheCity": {
        "reward": [
          {
            "name": "currencyVillagePlantFiberGain",
            "type": "mult",
            "value": 1.5
          }
        ]
      },
      "industrialRevolution": {
        "reward": [
          {
            "name": "currencyVillageWoodGain",
            "type": "mult",
            "value": 1.5
          }
        ]
      },
      "maintainingSafety": {
        "reward": [
          {
            "name": "villageCardCap",
            "type": "base",
            "value": 1
          },
          {
            "name": "hordeCardCap",
            "type": "base",
            "value": 1
          }
        ]
      }
    },
    "pack": {
      "meetingNewPeople": {
        "unlock": "villageBuildings3",
        "amount": 3,
        "price": 18,
        "content": {
          "VI-0001": 1.11,
          "VI-0003": 0.9,
          "VI-0004": 1.04,
          "VI-0005": 1.11,
          "VI-0006": 2.4,
          "VI-0007": 0.63,
          "VI-0008": 2.8,
          "VI-0010": 2.55,
          "VI-0011": 1.85,
          "VI-0012": 1.6,
          "VI-0014": 0.7,
          "VI-0015": 0.1,
          "VI-0016": 1.11,
          "VI-0017": 0.35,
          "VI-0018": 0.1,
          "VI-0019": 1.44,
          "VI-0024": 0.97,
          "VI-0025": 1.03,
          "VI-0027": 0.7
        }
      },
      "darkCult": {
        "unlock": "villageBuildings4",
        "amount": 5,
        "price": 65,
        "content": {
          "VI-0002": 0.84,
          "VI-0009": 1.75,
          "VI-0015": 0.22,
          "VI-0017": 0.82,
          "VI-0018": 0.22,
          "VI-0019": 1.33,
          "VI-0020": 0.84,
          "VI-0021": 1.25,
          "VI-0022": 1.4,
          "VI-0024": 1.07,
          "VI-0025": 1.23,
          "VI-0026": 2.55,
          "VI-0027": 0.7,
          "VI-0028": 2.3,
          "VI-0029": 0.38,
          "VI-0030": 1.6,
          "VI-0031": 1.15
        }
      },
      "technologicalAdvancement": {
        "unlock": "villageBuildings5",
        "amount": 4,
        "price": 115,
        "content": {
          "VI-0013": 0.5,
          "VI-0023": 1.1,
          "VI-0030": 2.6,
          "VI-0031": 1.65,
          "VI-0032": 0.38,
          "VI-0033": 0.7,
          "VI-0034": 1.32,
          "VI-0035": 1.05,
          "VI-0036": 0.82,
          "VI-0037": 1.02,
          "VI-0038": 1.4,
          "VI-0039": 0.9
        }
      }
    },
    "card": {
      "_type": "expression",
      "code": "cardList"
    }
  },
  "js/modules/village/upgradePrestige.js": {},
  "js/modules/village/offering.js": {
    "plantFiber": {
      "unlock": "villageOffering1",
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.5, lvl) * buildNum(1, 'M')"
      },
      "effect": 200
    },
    "wood": {
      "unlock": "villageOffering1",
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.5, lvl) * buildNum(1, 'M')"
      },
      "effect": 200
    },
    "stone": {
      "unlock": "villageOffering1",
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.5, lvl) * buildNum(1, 'M')"
      },
      "effect": 200
    },
    "coin": {
      "unlock": "villageOffering2",
      "amount": 3,
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.75, lvl) * buildNum(10, 'M')"
      },
      "effect": 200
    },
    "metal": {
      "unlock": "villageOffering2",
      "amount": 3,
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.5, lvl) * buildNum(3, 'M')"
      },
      "effect": 200
    },
    "water": {
      "unlock": "villageOffering2",
      "amount": 3,
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(2, lvl) * buildNum(5, 'M')"
      },
      "effect": 500
    },
    "glass": {
      "unlock": "villageOffering3",
      "amount": 8,
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.5, lvl) * buildNum(120, 'K')"
      },
      "effect": 100
    },
    "hardwood": {
      "unlock": "villageOffering3",
      "amount": 8,
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.5, lvl) * buildNum(40, 'K')"
      },
      "effect": 100
    },
    "gem": {
      "unlock": "villageOffering3",
      "amount": 8,
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.5, lvl) * buildNum(40, 'K')"
      },
      "effect": 100
    },
    "knowledge": {
      "unlock": "villageOffering4",
      "amount": 20,
      "increment": 1,
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.25, lvl) * 250"
      },
      "effect": 2
    },
    "science": {
      "unlock": "villageOffering4",
      "amount": 20,
      "increment": 1,
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.25, lvl) * 100"
      },
      "effect": 1
    },
    "joy": {
      "unlock": "villageOffering4",
      "amount": 20,
      "increment": 1,
      "cost": {
        "_type": "formula",
        "code": "lvl => Math.pow(1.25, lvl) * 750"
      },
      "effect": 5
    }
  },
  "js/modules/village/upgradePremium.js": {},
  "js/modules/village/upgrade.js": {},
  "js/modules/village/job.js": {
    "collector": {
      "max": null,
      "needed": 1,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillagePlantFiberGain",
          "amount": 0.3
        },
        {
          "type": "base",
          "name": "currencyVillageWoodGain",
          "amount": 0.3
        },
        {
          "type": "base",
          "name": "currencyVillageStoneGain",
          "amount": 0.3
        }
      ]
    },
    "farmer": {
      "max": 0,
      "needed": 2,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillagePlantFiberGain",
          "amount": 2
        },
        {
          "type": "base",
          "name": "currencyVillageGrainGain",
          "amount": 0.5
        }
      ]
    },
    "harvester": {
      "max": 0,
      "needed": 2,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageWoodGain",
          "amount": 2
        },
        {
          "type": "base",
          "name": "currencyVillageFruitGain",
          "amount": 0.5
        }
      ]
    },
    "miner": {
      "max": 0,
      "needed": 2,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageStoneGain",
          "amount": 2
        },
        {
          "type": "base",
          "name": "currencyVillageMetalGain",
          "amount": 0.5
        }
      ]
    },
    "wellWorker": {
      "max": 0,
      "needed": 3,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageWaterGain",
          "amount": 3
        }
      ]
    },
    "librarian": {
      "max": 0,
      "needed": 4,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageKnowledgeGain",
          "amount": 0.02
        }
      ]
    },
    "glassblower": {
      "max": 0,
      "needed": 4,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageGlassGain",
          "amount": 0.25
        }
      ]
    },
    "entertainer": {
      "max": 0,
      "needed": 5,
      "rewards": [
        {
          "type": "base",
          "name": "villageHappiness",
          "amount": 0.03
        }
      ]
    },
    "lumberjack": {
      "max": 0,
      "needed": 6,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageWoodGain",
          "amount": 12
        },
        {
          "type": "base",
          "name": "currencyVillageHardwoodGain",
          "amount": 0.25
        }
      ]
    },
    "blastMiner": {
      "max": 0,
      "needed": 6,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageStoneGain",
          "amount": 12
        },
        {
          "type": "base",
          "name": "currencyVillageGemGain",
          "amount": 0.25
        }
      ]
    },
    "fisherman": {
      "max": 0,
      "needed": 7,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageFishGain",
          "amount": 30
        }
      ]
    },
    "scientist": {
      "max": 0,
      "needed": 8,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageScienceGain",
          "amount": 0.008
        }
      ]
    },
    "gardener": {
      "max": 0,
      "needed": 8,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillagePlantFiberGain",
          "amount": 20
        },
        {
          "type": "base",
          "name": "currencyVillageVegetableGain",
          "amount": 40
        }
      ]
    },
    "oilWorker": {
      "max": 0,
      "needed": 11,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageOilGain",
          "amount": 0.35
        }
      ]
    },
    "sculptor": {
      "max": 0,
      "needed": 14,
      "rewards": [
        {
          "type": "base",
          "name": "currencyVillageMarbleGain",
          "amount": 0.001
        }
      ]
    },
    "explorer": {
      "max": 0,
      "needed": 600,
      "rewards": [
        {
          "type": "base",
          "name": "villageLootGain",
          "amount": 0.5
        }
      ]
    }
  },
  "js/modules/village/policy.js": {
    "taxes": {
      "mult": "villagePolicyTaxes",
      "icon": "mdi-cash-register",
      "effect": [
        {
          "name": "villageTaxRate",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.25 + 1"
          }
        },
        {
          "name": "villageHappiness",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * (lvl > 0 ? -0.05 : -0.03)"
          }
        }
      ]
    },
    "immigration": {
      "mult": "villagePolicyImmigration",
      "icon": "mdi-account-group",
      "effect": [
        {
          "name": "villageWorker",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.15 + 1"
          }
        },
        {
          "name": "villageHappiness",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * (lvl > 0 ? -0.05 : -0.1)"
          }
        }
      ]
    },
    "religion": {
      "mult": "villagePolicyReligion",
      "icon": "mdi-hands-pray",
      "effect": [
        {
          "name": "villageResourceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * (lvl > 0 ? -0.25 : -0.1) + 1"
          }
        },
        {
          "name": "currencyVillageFaithGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.25 + 1"
          }
        }
      ]
    },
    "scanning": {
      "mult": "villagePolicyScanning",
      "icon": "mdi-magnify-scan",
      "effect": [
        {
          "name": "villageLootGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => 1 - lvl * (lvl > 0 ? 0.1 : 0.05)"
          }
        },
        {
          "name": "villageLootQuality",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.max(lvl, 0)"
          }
        },
        {
          "name": "villageLootQuality",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.min(1 + lvl * 0.1, 1)"
          }
        }
      ]
    }
  },
  "js/modules/village/cardList.js": {},
  "js/modules/village/relic.js": {
    "mudBrick": {
      "icon": "mdi-wall",
      "color": "brown",
      "effect": [
        {
          "name": "village_hut",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "currencyVillageWaterGain",
          "type": "mult",
          "value": 1.5
        }
      ]
    },
    "sapling": {
      "icon": "mdi-sprout",
      "color": "light-green",
      "effect": [
        {
          "name": "village_shed",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "currencyVillagePlantFiberGain",
          "type": "mult",
          "value": 1.5
        }
      ]
    },
    "keychain": {
      "icon": "mdi-key-chain",
      "color": "light-grey",
      "effect": [
        {
          "name": "village_smallHouse",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "currencyVillageWoodGain",
          "type": "mult",
          "value": 1.5
        }
      ]
    },
    "treasureChest": {
      "icon": "mdi-treasure-chest",
      "color": "amber",
      "effect": [
        {
          "name": "village_treasury",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "village_wallet",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "village_resourceBag",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "village_metalBag",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "screwdriver": {
      "icon": "mdi-screwdriver",
      "color": "indigo",
      "effect": [
        {
          "name": "village_crane",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "currencyVillageStoneGain",
          "type": "mult",
          "value": 1.5
        }
      ]
    },
    "rose": {
      "icon": "mdi-flower",
      "color": "red",
      "effect": [
        {
          "name": "village_garden",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "village_well",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "goldenKey": {
      "icon": "mdi-key-chain",
      "color": "amber",
      "effect": [
        {
          "name": "village_house",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "village_miniatureSmith",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "supervisor": {
      "icon": "mdi-account-tie",
      "color": "indigo",
      "effect": [
        {
          "name": "village_sawmill",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "village_tunnel",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "globe": {
      "icon": "mdi-globe-model",
      "color": "green",
      "effect": [
        {
          "name": "village_library",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "village_glassBlowery",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    }
  },
  "js/modules/village/building.js": {},
  "js/modules/village/craftingRecipe.js": {},
  "js/modules/village/achievement.js": {
    "maxBuilding": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_maxBuilding.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.round(lvl * 25 * Math.pow(1.2, lvl) + 35)"
      },
      "relic": {
        "3": "mudBrick",
        "4": "keychain",
        "5": "goldenKey"
      }
    },
    "basicResources": {
      "value": {
        "_type": "formula",
        "code": "() => Math.max(\n        store.state.stat.village_woodMax.total,\n        store.state.stat.village_plantFiberMax.total,\n        store.state.stat.village_stoneMax.total\n    )"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(10, lvl) * buildNum(10, 'K')"
      },
      "relic": {
        "3": "sapling"
      }
    },
    "metal": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_metalMax.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(10, lvl) * 5000"
      },
      "relic": {
        "3": "screwdriver"
      }
    },
    "coin": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_coin.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(16, lvl) * 2000"
      },
      "relic": {
        "4": "treasureChest"
      }
    },
    "water": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_waterMax.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(20, lvl) * 5000"
      },
      "relic": {
        "3": "rose"
      }
    },
    "knowledge": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_knowledgeMax.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.round(getSequence(2, lvl + 1) * Math.pow(1.2, Math.max(lvl - 10, 0)) * 250)"
      },
      "relic": {
        "2": "globe"
      }
    },
    "advancedResources": {
      "value": {
        "_type": "formula",
        "code": "() => Math.max(\n        store.state.stat.village_hardwoodMax.total,\n        store.state.stat.village_gemMax.total\n    )"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(6, lvl) * buildNum(10, 'K')"
      },
      "relic": {
        "3": "supervisor"
      }
    },
    "blessing": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_blessing.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(9, lvl) * 1000"
      }
    },
    "offering": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_offering.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.round(Math.pow(2.5, lvl) * 500)"
      }
    },
    "sacrifice": {
      "value": {
        "_type": "formula",
        "code": "() => store.getters['village/offeringCount']"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => getSequence(6, lvl + 1) * 5"
      }
    },
    "oil": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_oilMax.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(10, lvl) * buildNum(100, 'K')"
      }
    },
    "highestPower": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_highestPower.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => getSequence(2, lvl + 1) * 10"
      }
    },
    "minHappiness": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.village_minHappiness.total"
      },
      "secret": true,
      "display": "boolean",
      "cap": 1,
      "milestones": {
        "_type": "formula",
        "code": "() => 1"
      }
    }
  },
  "js/modules/village/upgrade2.js": {},
  "js/modules/treasure/upgradePremium.js": {
    "moreSlots": {
      "type": "premium",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {gem_ruby: lvl * 10 + 50};\n    }"
      },
      "effect": [
        {
          "name": "treasureSlots",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "moreFragments": {
      "type": "premium",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {gem_ruby: [2, 3][lvl % 2] * Math.pow(2, Math.floor(lvl / 2)) * 150};\n    }"
      },
      "effect": [
        {
          "name": "currencyTreasureFragmentGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.2 + 1"
          }
        }
      ]
    }
  },
  "js/modules/treasure/effect.js": {
    "miningDamage": {
      "feature": "mining",
      "icon": "mdi-bomb",
      "value": 0.25
    },
    "currencyMiningScrapGain": {
      "feature": "mining",
      "icon": "mdi-dots-triangle",
      "value": 0.3
    },
    "miningOreGain": {
      "feature": "mining",
      "icon": "mdi-chart-bubble",
      "value": 0.2
    },
    "miningSmelterySpeed": {
      "feature": "mining",
      "unlock": "miningSmeltery",
      "icon": "mdi-fire",
      "value": 0.2
    },
    "currencyMiningSmokeGain": {
      "feature": "mining",
      "unlock": "miningSmoke",
      "icon": "mdi-smoke",
      "value": 0.04
    },
    "currencyMiningCrystalGreenGain": {
      "feature": "mining",
      "type": "special",
      "icon": "mdi-star-three-points",
      "unique": true,
      "value": 0.1
    },
    "currencyMiningCrystalYellowGain": {
      "feature": "mining",
      "unlock": "miningGasSubfeature",
      "type": "special",
      "icon": "mdi-star-four-points",
      "unique": true,
      "value": 0.05
    },
    "queueSpeedVillageBuilding": {
      "feature": "village",
      "icon": "mdi-hammer",
      "value": 0.3
    },
    "villageMaterialGain": {
      "feature": "village",
      "icon": "mdi-tree",
      "value": 0.1
    },
    "currencyVillageCoinGain": {
      "feature": "village",
      "icon": "mdi-circle-multiple",
      "value": 0.25
    },
    "villageMentalGain": {
      "feature": "village",
      "icon": "mdi-brain",
      "value": 0.1
    },
    "currencyVillageFaithGain": {
      "feature": "village",
      "type": "special",
      "icon": "mdi-hands-pray",
      "unique": true,
      "value": 0.1
    },
    "currencyVillageSharesGain": {
      "feature": "village",
      "unlock": "villageCraftingSubfeature",
      "type": "special",
      "icon": "mdi-certificate",
      "unique": true,
      "value": 0.05
    },
    "hordeAttack": {
      "feature": "horde",
      "icon": "mdi-sword",
      "value": 0.2
    },
    "currencyHordeBoneGain": {
      "feature": "horde",
      "icon": "mdi-bone",
      "value": 0.3
    },
    "currencyHordeMonsterPartGain": {
      "feature": "horde",
      "icon": "mdi-stomach",
      "value": 0.15
    },
    "hordeItemMasteryGain": {
      "feature": "horde",
      "unlock": "hordeItemMastery",
      "icon": "mdi-seal",
      "value": 0.1
    },
    "currencyHordeSoulCorruptedGain": {
      "feature": "horde",
      "type": "special",
      "icon": "mdi-ghost",
      "unique": true,
      "value": 0.1
    },
    "currencyFarmVegetableGain": {
      "feature": "farm",
      "icon": "mdi-carrot",
      "value": 0.35
    },
    "currencyFarmBerryGain": {
      "feature": "farm",
      "icon": "mdi-fruit-grapes",
      "value": 0.35
    },
    "currencyFarmGrainGain": {
      "feature": "farm",
      "icon": "mdi-barley",
      "value": 0.35
    },
    "currencyFarmFlowerGain": {
      "feature": "farm",
      "icon": "mdi-flower",
      "value": 0.35
    },
    "farmExperience": {
      "feature": "farm",
      "unlock": "farmCropExp",
      "type": "special",
      "icon": "mdi-star",
      "unique": true,
      "value": 0.1
    },
    "currencyGalleryBeautyGain": {
      "feature": "gallery",
      "icon": "mdi-image-filter-vintage",
      "value": 0.4
    },
    "currencyGalleryConverterGain": {
      "feature": "gallery",
      "unlock": "galleryConversion",
      "icon": "mdi-recycle",
      "value": 0.15
    },
    "currencyGalleryPackageGain": {
      "feature": "gallery",
      "unlock": "galleryDrums",
      "icon": "mdi-package-variant",
      "value": 0.15
    },
    "currencyGalleryCashGain": {
      "feature": "gallery",
      "type": "special",
      "icon": "mdi-cash",
      "unique": true,
      "value": 0.1
    }
  },
  "js/modules/relic/glyph.js": {
    "dust": {
      "icon": "mdi-weather-dust",
      "color": "brown",
      "effect": [
        {
          "name": "currencyMiningScrapGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.2, lvl)"
          }
        },
        {
          "name": "currencyMiningScrapCap",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.15, lvl)"
          }
        }
      ]
    },
    "clay": {
      "icon": "mdi-ellipse",
      "color": "pale-orange",
      "effect": [
        {
          "name": "miningOreGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.12, lvl)"
          }
        },
        {
          "name": "miningRareEarthGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.16, lvl)"
          }
        }
      ]
    },
    "fire": {
      "icon": "mdi-fire",
      "color": "orange-red",
      "effect": [
        {
          "name": "miningSmelterySpeed",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.1, lvl)"
          }
        },
        {
          "name": "currencyMiningEmberCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 30"
          }
        }
      ]
    },
    "wood": {
      "icon": "mdi-tree",
      "color": "wooden",
      "effect": [
        {
          "name": "villageWorker",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 12"
          }
        },
        {
          "name": "villageArtisan",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "flow": {
      "icon": "mdi-waterfall",
      "color": "light-blue",
      "effect": [
        {
          "name": "villageMaterialGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.1, lvl)"
          }
        }
      ]
    },
    "stone": {
      "icon": "mdi-chart-bubble",
      "color": "dark-grey",
      "effect": [
        {
          "name": "villageMaterialCap",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.09, lvl)"
          }
        }
      ]
    },
    "spike": {
      "icon": "mdi-nail",
      "color": "pale-red",
      "effect": [
        {
          "name": "hordeAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.12, lvl)"
          }
        },
        {
          "name": "hordeHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.12, lvl)"
          }
        }
      ]
    },
    "dream": {
      "icon": "mdi-sleep",
      "color": "pale-light-blue",
      "effect": [
        {
          "name": "hordeNostalgia",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 15"
          }
        },
        {
          "name": "hordeHeirloomAmount",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "clover": {
      "icon": "mdi-clover",
      "color": "light-green",
      "effect": [
        {
          "name": "hordeItemChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.1, lvl)"
          }
        },
        {
          "name": "hordeItemMasteryGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.18, lvl)"
          }
        }
      ]
    },
    "rain": {
      "icon": "mdi-weather-pouring",
      "color": "dark-blue",
      "effect": [
        {
          "name": "currencyFarmVegetableGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.15, lvl)"
          }
        },
        {
          "name": "currencyFarmGrassCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 100"
          }
        }
      ]
    },
    "sun": {
      "icon": "mdi-white-balance-sunny",
      "color": "yellow",
      "effect": [
        {
          "name": "currencyFarmBerryGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.15, lvl)"
          }
        },
        {
          "name": "farmGoldChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.03 + 1"
          }
        }
      ]
    },
    "cloud": {
      "icon": "mdi-clouds",
      "color": "blue-grey",
      "effect": [
        {
          "name": "currencyFarmGrainGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.15, lvl)"
          }
        },
        {
          "name": "currencyFarmFlowerGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.15, lvl)"
          }
        }
      ]
    },
    "blossom": {
      "icon": "mdi-image-filter-vintage",
      "color": "purple",
      "effect": [
        {
          "name": "currencyGalleryBeautyGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.35, lvl)"
          }
        },
        {
          "name": "currencyGalleryConverterGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.06, lvl)"
          }
        }
      ]
    },
    "leaf": {
      "icon": "mdi-leaf",
      "color": "pale-green",
      "effect": [
        {
          "name": "galleryShapeGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.15, lvl)"
          }
        },
        {
          "name": "currencyGalleryMotivationCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        }
      ]
    },
    "paper": {
      "icon": "mdi-note",
      "color": "pale-yellow",
      "effect": [
        {
          "name": "galleryInspirationStart",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        },
        {
          "name": "galleryCanvasSize",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "book": {
      "icon": "mdi-book",
      "color": "beige",
      "effect": [
        {
          "name": "currencySchoolBookGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        },
        {
          "name": "currencySchoolGoldenDustCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 2500"
          }
        }
      ]
    },
    "coin": {
      "icon": "mdi-circle-multiple",
      "color": "amber",
      "effect": [
        {
          "name": "currencyTreasureFragmentGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        },
        {
          "name": "treasureSlots",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    }
  },
  "js/modules/event/card.js": {
    "feature": {
      "prefix": "EV",
      "reward": [
        {
          "name": "currencyGemTopazCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        }
      ],
      "shinyReward": [
        {
          "name": "currencyGemTopazCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        }
      ],
      "unlock": "eventFeature"
    },
    "collection": {
      "weekendTrip": {
        "reward": [
          {
            "name": "currencyGemTopazCap",
            "type": "base",
            "value": 50
          }
        ]
      },
      "tropicalParadise": {
        "reward": [
          {
            "name": "currencyGemTopazCap",
            "type": "base",
            "value": 50
          }
        ]
      },
      "coldTimes": {
        "reward": [
          {
            "name": "currencyGemTopazCap",
            "type": "base",
            "value": 50
          }
        ]
      }
    },
    "pack": {
      "goodDeal": {
        "unlock": "merchantEvent",
        "amount": 1,
        "content": {
          "_spread_0": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_1": {
            "_type": "spread",
            "from": "smallTable"
          },
          "EV-0005": 2,
          "EV-0006": 2,
          "EV-0007": 2
        }
      },
      "connectedLine": {
        "unlock": "bingoCasinoEvent",
        "amount": 1,
        "content": {
          "_spread_2": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_3": {
            "_type": "spread",
            "from": "smallTable"
          },
          "EV-0008": 6
        }
      },
      "feelingLucky": {
        "unlock": "wheelOfFortuneCasinoEvent",
        "amount": 1,
        "content": {
          "_spread_4": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_5": {
            "_type": "spread",
            "from": "smallTable"
          },
          "EV-0009": 6
        }
      },
      "investorsDream": {
        "unlock": "bankEvent",
        "amount": 3,
        "content": {
          "_spread_6": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_7": {
            "_type": "spread",
            "from": "smallTable"
          },
          "EV-0011": 2,
          "EV-0012": 2,
          "EV-0013": 2
        }
      },
      "greenThumb": {
        "unlock": "bloomEvent",
        "amount": 1,
        "content": {
          "_spread_8": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_9": {
            "_type": "spread",
            "from": "summerTable"
          },
          "EV-0018": 3,
          "EV-0019": 3
        }
      },
      "fishingForFun": {
        "unlock": "weatherChaosEvent",
        "amount": 1,
        "content": {
          "_spread_10": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_11": {
            "_type": "spread",
            "from": "summerTable"
          },
          "EV-0020": 3,
          "EV-0021": 3
        }
      },
      "charmingShip": {
        "unlock": "summerFestivalEvent",
        "amount": 1,
        "content": {
          "_spread_12": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_13": {
            "_type": "spread",
            "from": "summerTable"
          },
          "EV-0022": 3,
          "EV-0023": 3
        }
      },
      "midnightAnomaly": {
        "unlock": "nightHuntEvent",
        "amount": 1,
        "content": {
          "_spread_14": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_15": {
            "_type": "spread",
            "from": "winterTable"
          },
          "EV-0028": 3,
          "EV-0029": 3
        }
      },
      "icyWonderland": {
        "unlock": "snowdownEvent",
        "amount": 1,
        "content": {
          "_spread_16": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_17": {
            "_type": "spread",
            "from": "winterTable"
          },
          "EV-0030": 3,
          "EV-0031": 3
        }
      },
      "sparksOfJoy": {
        "unlock": "cindersEvent",
        "amount": 1,
        "content": {
          "_spread_18": {
            "_type": "spread",
            "from": "gemTable"
          },
          "_spread_19": {
            "_type": "spread",
            "from": "winterTable"
          },
          "EV-0032": 3,
          "EV-0033": 3
        }
      }
    },
    "card": {
      "_type": "expression",
      "code": "cardList"
    }
  },
  "js/modules/event/prize.js": {},
  "js/modules/event/cardList.js": {},
  "js/modules/event/relic.js": {
    "tinfoilHat": {
      "icon": "mdi-hat-fedora",
      "feature": [
        "event",
        "mining"
      ],
      "color": "blue-grey",
      "effect": [
        {
          "name": "currencyMiningOreAluminiumGain",
          "type": "mult",
          "value": 1.12
        }
      ]
    },
    "cupOfWater": {
      "icon": "mdi-cup-water",
      "feature": [
        "event",
        "village"
      ],
      "color": "blue",
      "effect": [
        {
          "name": "currencyVillageWaterGain",
          "type": "mult",
          "value": 1.12
        },
        {
          "name": "currencyVillageGlassGain",
          "type": "mult",
          "value": 1.05
        }
      ]
    },
    "combatStrategy": {
      "icon": "mdi-clipboard-list",
      "feature": [
        "event",
        "horde"
      ],
      "color": "pale-green",
      "effect": [
        {
          "name": "hordeItemMasteryGain",
          "type": "mult",
          "value": 1.18
        }
      ]
    },
    "hundredDollarBill": {
      "icon": "mdi-cash-100",
      "feature": [
        "event",
        "village"
      ],
      "color": "green",
      "effect": [
        {
          "name": "currencyVillageCoinGain",
          "type": "mult",
          "value": 1.1
        }
      ]
    },
    "hotAirBalloon": {
      "icon": "mdi-airballoon",
      "feature": [
        "event",
        "mining"
      ],
      "color": "orange-red",
      "effect": [
        {
          "name": "miningSmelterySpeed",
          "type": "mult",
          "value": 1.1
        }
      ]
    },
    "largeClover": {
      "icon": "mdi-clover",
      "feature": [
        "event",
        "horde"
      ],
      "color": "light-green",
      "effect": [
        {
          "name": "hordeItemChance",
          "type": "mult",
          "value": 1.15
        }
      ]
    },
    "eightBall": {
      "icon": "mdi-billiards",
      "feature": [
        "event",
        "mining"
      ],
      "color": "darker-grey",
      "effect": [
        {
          "name": "miningDamage",
          "type": "mult",
          "value": 1.08
        }
      ]
    },
    "youngPig": {
      "icon": "mdi-pig-variant",
      "feature": [
        "event",
        "horde"
      ],
      "color": "pale-pink",
      "effect": [
        {
          "name": "hordeNostalgia",
          "type": "base",
          "value": 5
        }
      ]
    },
    "silverHorseshoe": {
      "icon": "mdi-horseshoe",
      "feature": [
        "event",
        "farm"
      ],
      "color": "lighter-grey",
      "effect": [
        {
          "name": "farmRareDropChance",
          "type": "mult",
          "value": 1.05
        }
      ]
    },
    "bronzeTools": {
      "icon": "mdi-tools",
      "feature": [
        "event",
        "mining"
      ],
      "color": "amber",
      "effect": [
        {
          "name": "currencyMiningOreCopperGain",
          "type": "mult",
          "value": 1.12
        },
        {
          "name": "currencyMiningOreTinGain",
          "type": "mult",
          "value": 1.12
        }
      ]
    },
    "minersHat": {
      "icon": "mdi-hard-hat",
      "feature": [
        "event",
        "mining"
      ],
      "color": "yellow",
      "effect": [
        {
          "name": "currencyMiningOreIronGain",
          "type": "mult",
          "value": 1.12
        },
        {
          "name": "currencyMiningOreTitaniumGain",
          "type": "mult",
          "value": 1.12
        }
      ]
    },
    "dictionary": {
      "icon": "mdi-book-alphabet",
      "feature": [
        "event",
        "village"
      ],
      "color": "brown",
      "effect": [
        {
          "name": "currencyVillageKnowledgeGain",
          "type": "mult",
          "value": 1.1
        }
      ]
    },
    "expertTools": {
      "icon": "mdi-toolbox",
      "feature": [
        "event",
        "village"
      ],
      "color": "cherry",
      "effect": [
        {
          "name": "currencyVillageHardwoodGain",
          "type": "mult",
          "value": 1.07
        },
        {
          "name": "currencyVillageGemGain",
          "type": "mult",
          "value": 1.07
        }
      ]
    },
    "bloodBag": {
      "icon": "mdi-blood-bag",
      "feature": [
        "event",
        "gallery"
      ],
      "color": "red",
      "effect": [
        {
          "name": "currencyGalleryRedGain",
          "type": "mult",
          "value": 1.15
        }
      ]
    },
    "geode": {
      "icon": "mdi-circle-double",
      "feature": [
        "event",
        "mining"
      ],
      "color": "indigo",
      "effect": [
        {
          "name": "miningOreGain",
          "type": "mult",
          "value": 1.06
        }
      ]
    },
    "birthdayCake": {
      "icon": "mdi-cake",
      "feature": [
        "event",
        "treasure"
      ],
      "color": "red",
      "effect": [
        {
          "name": "treasureSlots",
          "type": "base",
          "value": 2
        }
      ]
    },
    "colorfulFlower": {
      "icon": "mdi-flower",
      "feature": [
        "event",
        "farm"
      ],
      "color": "red-pink",
      "effect": [
        {
          "name": "currencyFarmFlowerGain",
          "type": "mult",
          "value": 1.15
        }
      ]
    },
    "heatingBulb": {
      "icon": "mdi-lightbulb-on",
      "feature": [
        "event",
        "gallery"
      ],
      "color": "orange",
      "effect": [
        {
          "name": "galleryInspirationStart",
          "type": "base",
          "value": 1
        }
      ]
    },
    "trashCan": {
      "icon": "mdi-trash-can",
      "feature": [
        "event",
        "mining"
      ],
      "color": "dark-grey",
      "effect": [
        {
          "name": "currencyMiningScrapGain",
          "type": "mult",
          "value": 1.1
        }
      ]
    },
    "suitcase": {
      "icon": "mdi-bag-carry-on",
      "feature": [
        "event",
        "horde"
      ],
      "color": "dark-blue",
      "effect": [
        {
          "name": "currencyHordeBoneCap",
          "type": "mult",
          "value": 1.1
        }
      ]
    },
    "tropicalTent": {
      "icon": "mdi-tent",
      "feature": [
        "event",
        "village"
      ],
      "color": "green",
      "effect": [
        {
          "name": "villageWorker",
          "type": "base",
          "value": 3
        }
      ]
    },
    "fruitBasket": {
      "icon": "mdi-basket",
      "feature": [
        "event",
        "farm"
      ],
      "color": "red",
      "effect": [
        {
          "name": "currencyFarmBerryGain",
          "type": "mult",
          "value": 1.15
        }
      ]
    },
    "massiveGrain": {
      "icon": "mdi-barley",
      "feature": [
        "event",
        "farm"
      ],
      "color": "pale-yellow",
      "effect": [
        {
          "name": "currencyFarmGrainGain",
          "type": "mult",
          "value": 1.15
        }
      ]
    },
    "enchantedBottle": {
      "icon": "mdi-flask-round-bottom",
      "feature": [
        "event",
        "mining"
      ],
      "color": "purple",
      "effect": [
        {
          "name": "currencyMiningResinCap",
          "type": "base",
          "value": 1
        }
      ]
    },
    "moneyGift": {
      "icon": "mdi-gift",
      "feature": [
        "event",
        "village"
      ],
      "color": "green",
      "effect": [
        {
          "name": "currencyVillageCoinGain",
          "type": "mult",
          "value": 1.1
        }
      ]
    },
    "frozenCarrot": {
      "icon": "mdi-carrot",
      "feature": [
        "event",
        "farm"
      ],
      "color": "light-blue",
      "effect": [
        {
          "name": "currencyFarmVegetableGain",
          "type": "mult",
          "value": 1.15
        }
      ]
    }
  },
  "js/modules/event/big.js": {
    "cinders": {
      "start": "01-15",
      "end": "02-03",
      "color": "amber",
      "currency": "wax",
      "token": "cindersToken"
    },
    "bloom": {
      "start": "03-09",
      "end": "03-31",
      "color": "light-green",
      "currency": "humus",
      "token": "bloomToken"
    },
    "weatherChaos": {
      "start": "05-22",
      "end": "06-08",
      "color": "grey",
      "currency": "cloud",
      "token": "weatherChaosToken"
    },
    "summerFestival": {
      "start": "07-26",
      "end": "08-22",
      "color": "orange-red",
      "currency": "cocktail",
      "token": "summerFestivalToken"
    },
    "nightHunt": {
      "start": "10-04",
      "end": "10-19",
      "color": "deep-purple",
      "currency": "magic",
      "token": "nightHuntToken"
    },
    "snowdown": {
      "start": "11-25",
      "end": "12-15",
      "color": "skyblue",
      "currency": "snowball",
      "token": "snowdownToken"
    }
  },
  "js/modules/event/bloom/prize.js": {
    "theme_colorful": {
      "type": "theme",
      "item": "colorful",
      "pool": {
        "bloom": {
          "price": {
            "event_bloomToken": 180
          }
        }
      }
    },
    "relic_colorfulFlower": {
      "type": "relic",
      "item": "colorfulFlower",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFeature.see;\n        }"
      },
      "pool": {
        "bloom": {
          "price": {
            "event_bloomToken": 170
          }
        }
      }
    },
    "relic_heatingBulb": {
      "type": "relic",
      "item": "heatingBulb",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.galleryInspiration.see;\n        }"
      },
      "pool": {
        "bloom": {
          "price": {
            "event_bloomToken": 200
          }
        }
      }
    },
    "cardPack_greenThumb": {
      "type": "cardPack",
      "item": "greenThumb",
      "pool": {
        "bloom": {
          "price": {
            "event_bloomToken": 30
          }
        }
      }
    },
    "farm_superFlower": {
      "type": "consumable",
      "item": "farm_superFlower",
      "amount": 20,
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFertilizer.see;\n        }"
      },
      "pool": {
        "bloom": {
          "price": {
            "event_bloomToken": 1
          }
        }
      }
    }
  },
  "js/modules/event/bloom/upgrade.js": {},
  "js/modules/event/bloom/tick.js": {},
  "js/modules/event/cinders/prize.js": {
    "theme_candlelight": {
      "type": "theme",
      "item": "candlelight",
      "pool": {
        "cinders": {
          "price": {
            "event_cindersToken": 170
          }
        }
      }
    },
    "relic_geode": {
      "type": "relic",
      "item": "geode",
      "pool": {
        "cinders": {
          "price": {
            "event_cindersToken": 140
          }
        }
      }
    },
    "relic_birthdayCake": {
      "type": "relic",
      "item": "birthdayCake",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.treasureFeature.see;\n        }"
      },
      "pool": {
        "cinders": {
          "price": {
            "event_cindersToken": 180
          }
        }
      }
    },
    "cardPack_sparksOfJoy": {
      "type": "cardPack",
      "item": "sparksOfJoy",
      "pool": {
        "cinders": {
          "price": {
            "event_cindersToken": 30
          }
        }
      }
    },
    "farm_sunshine": {
      "type": "consumable",
      "item": "farm_sunshine",
      "amount": 20,
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFertilizer.see;\n        }"
      },
      "pool": {
        "cinders": {
          "price": {
            "event_cindersToken": 1
          }
        }
      }
    }
  },
  "js/modules/event/cinders/upgrade.js": {},
  "js/modules/event/cinders/producer.js": {},
  "js/modules/event/cinders/tick.js": {},
  "js/modules/event/nightHunt/ingredientStat.js": {
    "lavender": [
      {
        "name": "nightHuntRitualFamiliarity",
        "type": "base",
        "value": 0.03
      }
    ],
    "mapleLeaf": [
      {
        "name": "nightHuntRitualHintChance",
        "type": "base",
        "value": 0.1
      }
    ],
    "fourLeafClover": [
      {
        "name": "nightHuntRitualSuccessChance",
        "type": "base",
        "value": 0.08
      }
    ],
    "charredSkull": [
      {
        "name": "nightHuntRitualStability",
        "type": "base",
        "value": 0.12
      }
    ],
    "mysticalWater": [
      {
        "name": "nightHuntRitualSuccessChance",
        "type": "base",
        "value": 0.06
      },
      {
        "name": "nightHuntRitualStability",
        "type": "base",
        "value": 0.05
      }
    ],
    "cheese": [
      {
        "name": "nightHuntRitualFamiliarity",
        "type": "base",
        "value": 0.05
      },
      {
        "name": "nightHuntRitualSuccessChance",
        "type": "base",
        "value": -0.18
      },
      {
        "name": "nightHuntRitualStability",
        "type": "base",
        "value": -0.05
      }
    ],
    "spiderWeb": [
      {
        "name": "nightHuntRitualFamiliarity",
        "type": "base",
        "value": 0.01
      },
      {
        "name": "nightHuntRitualStability",
        "type": "base",
        "value": 0.1
      }
    ],
    "strangeEgg": [
      {
        "name": "nightHuntRitualHintChance",
        "type": "base",
        "value": 0.075
      },
      {
        "name": "nightHuntRitualSuccessChance",
        "type": "base",
        "value": 0.05
      }
    ],
    "puzzlePiece": [
      {
        "name": "nightHuntRitualHintChance",
        "type": "base",
        "value": 0.14
      },
      {
        "name": "nightHuntRitualStability",
        "type": "base",
        "value": -0.03
      }
    ],
    "wizardHat": [
      {
        "name": "nightHuntRitualStability",
        "type": "base",
        "value": 0.04
      },
      {
        "name": "nightHuntRitualSuccessChance",
        "type": "base",
        "value": 0.04
      },
      {
        "name": "nightHuntRitualHintChance",
        "type": "base",
        "value": 0.04
      },
      {
        "name": "nightHuntRitualFamiliarity",
        "type": "base",
        "value": 0.01
      }
    ],
    "cactus": [
      {
        "name": "nightHuntRitualStability",
        "type": "base",
        "value": -0.05
      },
      {
        "name": "nightHuntRitualSuccessChance",
        "type": "base",
        "value": 0.15
      }
    ],
    "feather": [
      {
        "name": "nightHuntRitualFamiliarity",
        "type": "base",
        "value": 0.02
      },
      {
        "name": "nightHuntRitualHintChance",
        "type": "base",
        "value": 0.05
      }
    ]
  },
  "js/modules/event/nightHunt/prize.js": {
    "theme_autumnForest": {
      "type": "theme",
      "item": "autumnForest",
      "pool": {
        "nightHunt": {
          "price": {
            "event_nightHuntToken": 200
          }
        }
      }
    },
    "relic_massiveGrain": {
      "type": "relic",
      "item": "massiveGrain",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFeature.see;\n        }"
      },
      "pool": {
        "nightHunt": {
          "price": {
            "event_nightHuntToken": 170
          }
        }
      }
    },
    "relic_enchantedBottle": {
      "type": "relic",
      "item": "enchantedBottle",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.miningResin.see;\n        }"
      },
      "pool": {
        "nightHunt": {
          "price": {
            "event_nightHuntToken": 175
          }
        }
      }
    },
    "cardPack_midnightAnomaly": {
      "type": "cardPack",
      "item": "midnightAnomaly",
      "pool": {
        "nightHunt": {
          "price": {
            "event_nightHuntToken": 30
          }
        }
      }
    },
    "farm_fieldBlessing": {
      "type": "consumable",
      "item": "farm_fieldBlessing",
      "amount": 20,
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFertilizer.see;\n        }"
      },
      "pool": {
        "nightHunt": {
          "price": {
            "event_nightHuntToken": 1
          }
        }
      }
    }
  },
  "js/modules/event/nightHunt/upgrade.js": {},
  "js/modules/event/nightHunt/potion.js": {
    "power": {
      "color": "red",
      "recipe": [
        {
          "max": 3
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 2"
          }
        }
      ]
    },
    "insight": {
      "color": "cyan",
      "recipe": [
        {
          "min": 5,
          "max": 6
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        },
        {
          "name": "nightHuntRitualHintChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.01"
          }
        }
      ]
    },
    "rage": {
      "color": "orange-red",
      "recipe": [
        {
          "max": 3
        },
        {
          "max": 3
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 6"
          }
        }
      ]
    },
    "calming": {
      "color": "lime",
      "recipe": [
        {
          "max": 3
        },
        {
          "max": 3
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 3"
          }
        },
        {
          "name": "nightHuntRitualStability",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.025"
          }
        }
      ]
    },
    "sorrow": {
      "color": "skyblue",
      "recipe": [
        {
          "max": 4
        },
        {
          "max": 4
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 3"
          }
        },
        {
          "name": "nightHuntRitualSuccessChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.02"
          }
        }
      ]
    },
    "energy": {
      "color": "amber",
      "recipe": [
        {
          "max": 4
        },
        {
          "max": 4
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 3"
          }
        },
        {
          "name": "currencyEventEssenceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ]
    },
    "nature": {
      "color": "light-green",
      "recipe": [
        {
          "min": 5,
          "max": 6
        },
        {
          "max": 6
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 3"
          }
        },
        {
          "name": "nightHuntRitualHintChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.02"
          }
        }
      ]
    },
    "intensity": {
      "color": "pink",
      "recipe": [
        {
          "min": 7,
          "max": 8
        },
        {
          "max": 8
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 3"
          }
        },
        {
          "name": "nightHuntRitualFamiliarity",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.01"
          }
        }
      ]
    },
    "hysteria": {
      "color": "red-pink",
      "recipe": [
        {
          "max": 5
        },
        {
          "max": 5
        },
        {
          "max": 5
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 8"
          }
        },
        {
          "name": "nightHuntRitualStability",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.04"
          }
        }
      ]
    },
    "insanity": {
      "color": "orange",
      "recipe": [
        {
          "max": 5
        },
        {
          "max": 5
        },
        {
          "max": 5
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 8"
          }
        },
        {
          "name": "nightHuntRitualSuccessChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.04"
          }
        }
      ]
    },
    "patience": {
      "color": "teal",
      "recipe": [
        {
          "max": 6
        },
        {
          "max": 6
        },
        {
          "max": 6
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 8"
          }
        },
        {
          "name": "nightHuntRitualFamiliarity",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.01"
          }
        }
      ]
    },
    "transformation": {
      "color": "deep-purple",
      "recipe": [
        {
          "max": 7
        },
        {
          "max": 7
        },
        {
          "max": 7
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 8"
          }
        },
        {
          "name": "currencyEventEssenceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.075 + 1"
          }
        }
      ]
    },
    "silence": {
      "color": "blue",
      "recipe": [
        {
          "min": 7,
          "max": 8
        },
        {
          "max": 8
        },
        {
          "max": 8
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 8"
          }
        },
        {
          "name": "nightHuntRitualHintChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.02"
          }
        }
      ]
    },
    "photosynthesis": {
      "color": "green",
      "recipe": [
        {
          "min": 8,
          "max": 9
        },
        {
          "max": 9
        },
        {
          "max": 9
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 20"
          }
        }
      ]
    },
    "sun": {
      "color": "yellow",
      "recipe": [
        {
          "min": 9,
          "max": 10
        },
        {
          "max": 10
        },
        {
          "max": 10
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 8"
          }
        },
        {
          "name": "nightHuntRitualStability",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.02"
          }
        },
        {
          "name": "nightHuntRitualSuccessChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.02"
          }
        }
      ]
    },
    "growth": {
      "color": "lime",
      "recipe": [
        {
          "max": 7
        },
        {
          "max": 7
        },
        {
          "max": 7
        },
        {
          "max": 7
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.12 + 1"
          }
        }
      ]
    },
    "solidification": {
      "color": "grey",
      "recipe": [
        {
          "max": 7
        },
        {
          "max": 7
        },
        {
          "max": 7
        },
        {
          "max": 7
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        },
        {
          "name": "nightHuntRitualSuccessChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05"
          }
        }
      ]
    },
    "liquification": {
      "color": "dark-blue",
      "recipe": [
        {
          "max": 8
        },
        {
          "max": 8
        },
        {
          "max": 8
        },
        {
          "max": 8
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 22"
          }
        },
        {
          "name": "currencyEventEssenceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ]
    },
    "glowing": {
      "color": "yellow",
      "recipe": [
        {
          "max": 8
        },
        {
          "max": 8
        },
        {
          "max": 8
        },
        {
          "max": 8
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        },
        {
          "name": "nightHuntRitualStability",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.01 + 1"
          }
        }
      ]
    },
    "stasis": {
      "color": "light-blue",
      "recipe": [
        {
          "min": 7,
          "max": 8
        },
        {
          "max": 8
        },
        {
          "max": 8
        },
        {
          "max": 8
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        },
        {
          "name": "nightHuntRitualSuccessChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.01 + 1"
          }
        }
      ]
    },
    "creativity": {
      "color": "pink",
      "recipe": [
        {
          "min": 8,
          "max": 9
        },
        {
          "max": 9
        },
        {
          "max": 9
        },
        {
          "max": 9
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 22"
          }
        },
        {
          "name": "nightHuntRitualHintChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.02"
          }
        }
      ]
    },
    "poison": {
      "color": "green",
      "recipe": [
        {
          "min": 9,
          "max": 10
        },
        {
          "max": 10
        },
        {
          "max": 10
        },
        {
          "max": 10
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        },
        {
          "name": "nightHuntRitualStability",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05"
          }
        }
      ]
    },
    "warmth": {
      "color": "orange",
      "recipe": [
        {
          "min": 10,
          "max": 11
        },
        {
          "max": 11
        },
        {
          "max": 11
        },
        {
          "max": 11
        }
      ],
      "effect": [
        {
          "name": "currencyEventEssenceGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        },
        {
          "name": "nightHuntRitualFamiliarity",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.01"
          }
        }
      ]
    }
  },
  "js/modules/event/nightHunt/tick.js": {},
  "js/modules/event/snowdown/item.js": {
    "forest": {
      "type": "producer",
      "icon": "mdi-forest",
      "effect": [
        {
          "name": "currencyEventSaplingGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(2, lvl) * Math.pow(lvl + 1, 2) * 0.01"
          }
        }
      ]
    },
    "shepherd": {
      "type": "producer",
      "icon": "mdi-sheep",
      "effect": [
        {
          "name": "currencyEventYarnGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(2, lvl) * Math.pow(lvl + 1, 2) * 0.01"
          }
        }
      ]
    },
    "rollingPin": {
      "type": "producer",
      "icon": "mdi-arrow-top-right-bottom-left-bold",
      "effect": [
        {
          "name": "currencyEventDoughGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(2, lvl) * Math.pow(lvl + 1, 2) * 0.01"
          }
        }
      ]
    },
    "snowCannon": {
      "type": "producer",
      "icon": "mdi-snowflake-alert",
      "effect": [
        {
          "name": "currencyEventSnowGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(2, lvl) * Math.pow(lvl + 1, 2) * 0.01"
          }
        }
      ]
    },
    "snowOwl": {
      "type": "pet",
      "icon": "mdi-owl",
      "max": 1
    },
    "dog": {
      "type": "pet",
      "icon": "mdi-dog",
      "max": 1
    },
    "cat": {
      "type": "pet",
      "icon": "mdi-cat",
      "max": 1
    },
    "penguin": {
      "type": "pet",
      "icon": "mdi-penguin",
      "max": 1
    },
    "rabbit": {
      "type": "pet",
      "icon": "mdi-rabbit",
      "max": 1
    },
    "turtle": {
      "type": "pet",
      "icon": "mdi-tortoise",
      "max": 1
    },
    "animalTooth": {
      "type": "petBoost",
      "icon": "mdi-tooth",
      "effect": [
        {
          "name": "snowdownPetAttack",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.5"
          }
        },
        {
          "name": "snowdownPetAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        }
      ]
    },
    "collar": {
      "type": "petBoost",
      "icon": "mdi-dog-service",
      "effect": [
        {
          "name": "snowdownPetHealth",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        },
        {
          "name": "snowdownPetHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        }
      ]
    },
    "chili": {
      "type": "petBoost",
      "icon": "mdi-chili-mild",
      "effect": [
        {
          "name": "snowdownCritRating",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 8"
          }
        },
        {
          "name": "snowdownPetCritRating",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 10"
          }
        }
      ]
    },
    "drumstick": {
      "type": "petBoost",
      "icon": "mdi-food-drumstick",
      "effect": [
        {
          "name": "snowdownPetAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        },
        {
          "name": "snowdownPetHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        },
        {
          "name": "snowdownPetBlockRating",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        }
      ]
    },
    "mouse": {
      "type": "petBoost",
      "icon": "mdi-rodent",
      "max": 5
    },
    "bone": {
      "type": "petBoost",
      "icon": "mdi-bone",
      "max": 5
    },
    "gravestone": {
      "type": "petBoost",
      "icon": "mdi-grave-stone",
      "max": 3
    },
    "spikedCollar": {
      "type": "petBoost",
      "icon": "mdi-decagram-outline",
      "max": 1
    },
    "heartCollar": {
      "type": "petBoost",
      "icon": "mdi-heart-outline",
      "max": 3
    },
    "treatBag": {
      "type": "petBoost",
      "icon": "mdi-sack"
    },
    "tennisBall": {
      "type": "petBoost",
      "icon": "mdi-tennis-ball",
      "max": 1
    },
    "appleJuice": {
      "type": "tank",
      "icon": "mdi-cup"
    },
    "hotWater": {
      "type": "tank",
      "icon": "mdi-needle",
      "max": 1
    },
    "dumbbell": {
      "type": "tank",
      "icon": "mdi-dumbbell",
      "max": 5
    },
    "target": {
      "type": "tank",
      "icon": "mdi-bullseye",
      "max": 5
    },
    "gloves": {
      "type": "tank",
      "icon": "mdi-hand-back-left",
      "max": 5
    },
    "snowboard": {
      "type": "crit",
      "icon": "mdi-snowboard",
      "max": 1
    },
    "tea": {
      "type": "crit",
      "icon": "mdi-tea",
      "max": 3
    },
    "starShield": {
      "type": "crit",
      "icon": "mdi-shield-star",
      "max": 1
    },
    "coffee": {
      "type": "crit",
      "icon": "mdi-coffee",
      "max": 3
    },
    "pebbles": {
      "type": "crit",
      "icon": "mdi-chart-bubble",
      "max": 1
    },
    "sunShield": {
      "icon": "mdi-shield-sun",
      "effect": [
        {
          "name": "snowdownDefense",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 2"
          }
        }
      ]
    },
    "moonShield": {
      "icon": "mdi-shield-moon",
      "effect": [
        {
          "name": "snowdownDefense",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        },
        {
          "name": "snowdownBlockRating",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        }
      ]
    },
    "fireplace": {
      "icon": "mdi-fireplace",
      "effect": [
        {
          "name": "snowdownHealth",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 10"
          }
        },
        {
          "name": "snowdownHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        }
      ]
    },
    "specialSnowflake": {
      "icon": "mdi-snowflake-variant",
      "effect": [
        {
          "name": "snowdownAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        },
        {
          "name": "snowdownCritRating",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        }
      ]
    },
    "candyCane": {
      "icon": "mdi-candycane",
      "effect": [
        {
          "name": "snowdownHealth",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 15"
          }
        },
        {
          "name": "snowdownBlockRating",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        }
      ]
    },
    "shovel": {
      "icon": "mdi-shovel",
      "effect": [
        {
          "name": "snowdownAttack",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        },
        {
          "name": "snowdownAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        }
      ]
    },
    "turkey": {
      "icon": "mdi-food-turkey",
      "effect": [
        {
          "name": "snowdownAttack",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        },
        {
          "name": "snowdownHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        }
      ]
    }
  },
  "js/modules/event/snowdown/prize.js": {
    "theme_frozen": {
      "type": "theme",
      "item": "frozen",
      "pool": {
        "snowdown": {
          "price": {
            "event_snowdownToken": 225
          }
        }
      }
    },
    "relic_moneyGift": {
      "type": "relic",
      "item": "moneyGift",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.villageFeature.see;\n        }"
      },
      "pool": {
        "snowdown": {
          "price": {
            "event_snowdownToken": 155
          }
        }
      }
    },
    "relic_frozenCarrot": {
      "type": "relic",
      "item": "frozenCarrot",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFeature.see;\n        }"
      },
      "pool": {
        "snowdown": {
          "price": {
            "event_snowdownToken": 170
          }
        }
      }
    },
    "cardPack_icyWonderland": {
      "type": "cardPack",
      "item": "icyWonderland",
      "pool": {
        "snowdown": {
          "price": {
            "event_snowdownToken": 30
          }
        }
      }
    },
    "farm_cinnamonBag": {
      "type": "consumable",
      "item": "farm_cinnamonBag",
      "amount": 20,
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFertilizer.see;\n        }"
      },
      "pool": {
        "snowdown": {
          "price": {
            "event_snowdownToken": 1
          }
        }
      }
    }
  },
  "js/modules/event/snowdown/upgrade.js": {
    "pineTrees": {
      "type": "snowdown",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {event_sapling: 250 * Math.pow(lvl * 0.5 + 1, 2) * Math.pow(2, lvl)};\n    }"
      },
      "effect": [
        {
          "name": "snowdownAllAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.02, lvl) * (lvl * 0.05 + 1)"
          }
        }
      ]
    },
    "woolHat": {
      "type": "snowdown",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {event_yarn: 250 * Math.pow(lvl * 0.5 + 1, 2) * Math.pow(2, lvl)};\n    }"
      },
      "effect": [
        {
          "name": "snowdownAllHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.02, lvl) * (lvl * 0.05 + 1)"
          }
        },
        {
          "name": "snowdownAllDefense",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.02, lvl) * (lvl * 0.05 + 1)"
          }
        }
      ]
    },
    "cookies": {
      "type": "snowdown",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {event_dough: 250 * Math.pow(lvl * 0.5 + 1, 2) * Math.pow(2, lvl)};\n    }"
      },
      "effect": [
        {
          "name": "snowdownRevengeStats",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.0005"
          }
        },
        {
          "name": "snowdownRevengeCrit",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.06"
          }
        },
        {
          "name": "snowdownRevengeBlock",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.04"
          }
        }
      ]
    },
    "attackBoost": {
      "type": "snowdown",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {gem_topaz: lvl * 50 + 150};\n    }"
      },
      "effect": [
        {
          "name": "snowdownAllAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.5 + 1"
          }
        }
      ]
    },
    "healthBoost": {
      "type": "snowdown",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {gem_topaz: lvl * 40 + 100};\n    }"
      },
      "effect": [
        {
          "name": "snowdownAllHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.5 + 1"
          }
        },
        {
          "name": "snowdownAllDefense",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.5 + 1"
          }
        }
      ]
    }
  },
  "js/modules/event/snowdown/tick.js": {},
  "js/modules/event/weatherChaos/fish.js": {},
  "js/modules/event/weatherChaos/location.js": {
    "pond": {
      "owned": true,
      "next": {
        "minPower": 40,
        "name": "lake"
      }
    },
    "lake": {
      "next": {
        "minPower": 100,
        "name": "river"
      },
      "effect": [
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": 1.2
        },
        {
          "name": "weatherChaosAlgaeWeight",
          "type": "mult",
          "value": 3
        },
        {
          "name": "currencyEventAlgaeGain",
          "type": "mult",
          "value": 2
        }
      ]
    },
    "river": {
      "next": {
        "minPower": 250,
        "name": "ocean"
      },
      "effect": [
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": 1.4
        },
        {
          "name": "weatherChaosDriftwoodWeight",
          "type": "mult",
          "value": 3
        },
        {
          "name": "currencyEventDriftwoodGain",
          "type": "mult",
          "value": 2
        }
      ]
    },
    "ocean": {
      "next": {
        "minPower": 500,
        "name": "mountain"
      },
      "effect": [
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": 1.6
        },
        {
          "name": "weatherChaosPlasticWeight",
          "type": "mult",
          "value": 3
        },
        {
          "name": "currencyEventPlasticGain",
          "type": "mult",
          "value": 2
        }
      ]
    },
    "mountain": {
      "next": {
        "minPower": 1000,
        "name": "cave"
      },
      "effect": [
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": 1.8
        },
        {
          "name": "currencyEventAlgaeGain",
          "type": "mult",
          "value": 1.5
        },
        {
          "name": "currencyEventDriftwoodGain",
          "type": "mult",
          "value": 1.5
        },
        {
          "name": "currencyEventPlasticGain",
          "type": "mult",
          "value": 1.5
        }
      ]
    },
    "cave": {
      "effect": [
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": 2
        },
        {
          "name": "weatherChaosTreasureChance",
          "type": "mult",
          "value": 1.5
        }
      ]
    }
  },
  "js/modules/event/weatherChaos/prize.js": {
    "theme_rain": {
      "type": "theme",
      "item": "rain",
      "pool": {
        "weatherChaos": {
          "price": {
            "event_weatherChaosToken": 260
          }
        }
      }
    },
    "relic_trashCan": {
      "type": "relic",
      "item": "trashCan",
      "pool": {
        "weatherChaos": {
          "price": {
            "event_weatherChaosToken": 130
          }
        }
      }
    },
    "relic_suitcase": {
      "type": "relic",
      "item": "suitcase",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.hordeHeirlooms.see;\n        }"
      },
      "pool": {
        "weatherChaos": {
          "price": {
            "event_weatherChaosToken": 155
          }
        }
      }
    },
    "cardPack_fishingForFun": {
      "type": "cardPack",
      "item": "fishingForFun",
      "pool": {
        "weatherChaos": {
          "price": {
            "event_weatherChaosToken": 30
          }
        }
      }
    },
    "farm_smellyMud": {
      "type": "consumable",
      "item": "farm_smellyMud",
      "amount": 20,
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFertilizer.see;\n        }"
      },
      "pool": {
        "weatherChaos": {
          "price": {
            "event_weatherChaosToken": 1
          }
        }
      }
    }
  },
  "js/modules/event/weatherChaos/upgrade.js": {
    "juicyBait": {
      "type": "weatherChaos",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {event_algae: Math.pow(1.35 + 0.08 * lvl, lvl) * 500};\n    }"
      },
      "effect": [
        {
          "name": "weatherChaosFishSizeMax",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1"
          }
        },
        {
          "name": "weatherChaosFishSizeMax",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        }
      ]
    },
    "incubator": {
      "type": "weatherChaos",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {event_driftwood: Math.pow(1.25 + 0.065 * lvl, lvl) * 250};\n    }"
      },
      "effect": [
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.2"
          }
        },
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ]
    },
    "fishWhistle": {
      "type": "weatherChaos",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {event_plastic: Math.pow(1.15 + 0.015 * lvl, lvl) * 100};\n    }"
      },
      "effect": [
        {
          "name": "weatherChaosFishingPower",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => getSequence(1, lvl) * 0.1 + lvl"
          }
        }
      ]
    },
    "pollution": {
      "type": "weatherChaos",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {event_slime: Math.pow(1.35, lvl) * 100};\n    }"
      },
      "effect": [
        {
          "name": "weatherChaosTrashGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        }
      ]
    },
    "goldenHook": {
      "type": "weatherChaos",
      "cap": 4,
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {gem_topaz: lvl * 250 + 500};\n    }"
      },
      "effect": [
        {
          "name": "weatherChaosFishingTime",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => 1 / (lvl * 0.25 + 1)"
          }
        }
      ]
    }
  },
  "js/modules/event/weatherChaos/bait.js": {
    "juicyBait": {
      "icon": "mdi-fruit-grapes",
      "stackSize": 10,
      "effect": [
        {
          "name": "weatherChaosFishingTime",
          "type": "mult",
          "value": 0.1
        },
        {
          "name": "weatherChaosFishChance",
          "type": "base",
          "value": 1
        },
        {
          "name": "weatherChaosFishDoubleChance",
          "type": "base",
          "value": 0.35
        },
        {
          "name": "weatherChaosTreasureChance",
          "type": "mult",
          "value": 0.1
        }
      ]
    },
    "rainbowBait": {
      "icon": "mdi-looks",
      "stackSize": 3,
      "effect": [
        {
          "name": "weatherChaosFishChance",
          "type": "base",
          "value": 1
        },
        {
          "name": "weatherChaosIgnoreWeather",
          "type": "base",
          "value": 0.25
        },
        {
          "name": "weatherChaosFishSizeMax",
          "type": "mult",
          "value": 0.9090909090909091
        },
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": 0.8
        }
      ]
    },
    "trashNet": {
      "icon": "mdi-spider-web",
      "stackSize": 10,
      "effect": [
        {
          "name": "weatherChaosFishingTime",
          "type": "mult",
          "value": 0.1
        },
        {
          "name": "weatherChaosFishChance",
          "type": "base",
          "value": -1
        },
        {
          "name": "weatherChaosTrashGain",
          "type": "mult",
          "value": 3
        },
        {
          "name": "weatherChaosTreasureChance",
          "type": "mult",
          "value": 0.1
        }
      ]
    },
    "magnet": {
      "icon": "mdi-magnet",
      "effect": [
        {
          "name": "weatherChaosTreasureChance",
          "type": "base",
          "value": 1
        }
      ]
    }
  },
  "js/modules/event/weatherChaos/weather.js": {
    "sunny": {
      "icon": "mdi-weather-sunny",
      "next": [
        "hazy",
        "partlyCloudy",
        "partlyLightning",
        "partlyRainy",
        "partlySnowy"
      ],
      "sun": true
    },
    "cloudy": {
      "icon": "mdi-weather-cloudy",
      "next": [
        "fog",
        "lightning",
        "partlyCloudy",
        "partlyLightning",
        "partlyRainy",
        "partlySnowy",
        "rainy",
        "snowy",
        "partlyWindy"
      ]
    },
    "fog": {
      "icon": "mdi-weather-fog",
      "next": [
        "cloudy",
        "hazy",
        "rainy",
        "partlyWindy"
      ]
    },
    "hail": {
      "icon": "mdi-weather-hail",
      "next": [
        "pouring",
        "rainy",
        "snowy",
        "snowstorm"
      ],
      "rain": true,
      "snow": true
    },
    "hazy": {
      "icon": "mdi-weather-hazy",
      "next": [
        "sunny",
        "fog",
        "partlyCloudy"
      ],
      "sun": true
    },
    "lightning": {
      "icon": "mdi-weather-lightning",
      "next": [
        "cloudy",
        "thunderstorm",
        "partlyLightning"
      ],
      "thunder": true
    },
    "thunderstorm": {
      "icon": "mdi-weather-lightning-rainy",
      "next": [
        "lightning",
        "pouring",
        "rainy"
      ],
      "rain": true,
      "thunder": true
    },
    "partlyCloudy": {
      "icon": "mdi-weather-partly-cloudy",
      "next": [
        "sunny",
        "cloudy",
        "hazy",
        "partlyLightning",
        "partlyRainy",
        "partlySnowy"
      ],
      "sun": true
    },
    "partlyLightning": {
      "icon": "mdi-weather-partly-lightning",
      "next": [
        "sunny",
        "cloudy",
        "lightning",
        "partlyCloudy"
      ],
      "sun": true,
      "thunder": true
    },
    "partlyRainy": {
      "icon": "mdi-weather-partly-rainy",
      "next": [
        "sunny",
        "cloudy",
        "partlyCloudy",
        "rainy"
      ],
      "sun": true,
      "rain": true
    },
    "partlySnowy": {
      "icon": "mdi-weather-partly-snowy",
      "next": [
        "sunny",
        "cloudy",
        "partlyCloudy",
        "snowy"
      ],
      "sun": true,
      "snow": true
    },
    "pouring": {
      "icon": "mdi-weather-pouring",
      "next": [
        "hail",
        "thunderstorm",
        "rainy"
      ],
      "rain": true
    },
    "rainy": {
      "icon": "mdi-weather-rainy",
      "next": [
        "cloudy",
        "fog",
        "hail",
        "thunderstorm",
        "partlyRainy",
        "pouring",
        "snowyRainy"
      ],
      "rain": true
    },
    "snowy": {
      "icon": "mdi-weather-snowy",
      "next": [
        "cloudy",
        "hail",
        "partlySnowy",
        "snowstorm",
        "snowyRainy"
      ],
      "snow": true
    },
    "snowstorm": {
      "icon": "mdi-weather-snowy-heavy",
      "next": [
        "hail",
        "snowy"
      ],
      "snow": true
    },
    "snowyRainy": {
      "icon": "mdi-weather-snowy-rainy",
      "next": [
        "rainy",
        "snowy"
      ],
      "rain": true
    },
    "windy": {
      "icon": "mdi-weather-windy",
      "next": [
        "partlyWindy",
        "storm"
      ],
      "wind": true
    },
    "partlyWindy": {
      "icon": "mdi-weather-windy-variant",
      "next": [
        "cloudy",
        "fog",
        "windy"
      ],
      "wind": true
    },
    "storm": {
      "icon": "mdi-weather-tornado",
      "next": [
        "windy"
      ],
      "wind": true
    }
  },
  "js/modules/event/weatherChaos/fishingRod.js": {
    "basic": {
      "owned": true
    },
    "fast": {
      "icon": "mdi-run-fast",
      "effect": [
        {
          "name": "weatherChaosFishingTime",
          "type": "mult",
          "value": 0.7142857142857143
        },
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": 0.625
        },
        {
          "name": "weatherChaosTrashGain",
          "type": "mult",
          "value": 0.6666666666666666
        }
      ]
    },
    "leafy": {
      "icon": "mdi-leaf",
      "effect": [
        {
          "name": "weatherChaosFishChance",
          "type": "base",
          "value": -0.1
        },
        {
          "name": "currencyEventAlgaeGain",
          "type": "mult",
          "value": 1.75
        }
      ]
    },
    "heavy": {
      "icon": "mdi-weight",
      "effect": [
        {
          "name": "weatherChaosFishingTime",
          "type": "mult",
          "value": 1.1
        },
        {
          "name": "weatherChaosFishSizeMax",
          "type": "base",
          "value": 1
        },
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": 0.9090909090909091
        }
      ]
    },
    "hardwood": {
      "icon": "mdi-palm-tree",
      "effect": [
        {
          "name": "weatherChaosFishingPower",
          "type": "mult",
          "value": 0.9090909090909091
        },
        {
          "name": "currencyEventDriftwoodGain",
          "type": "mult",
          "value": 1.75
        }
      ]
    },
    "master": {
      "icon": "mdi-trophy-award",
      "effect": [
        {
          "name": "weatherChaosFishingPower",
          "type": "base",
          "value": 12
        },
        {
          "name": "weatherChaosFishingTime",
          "type": "mult",
          "value": 1.15
        }
      ]
    },
    "smelly": {
      "icon": "mdi-scent",
      "effect": [
        {
          "name": "currencyEventSlimeGain",
          "type": "mult",
          "value": 2
        },
        {
          "name": "weatherChaosFishingTime",
          "type": "mult",
          "value": 1.5
        }
      ]
    },
    "turbo": {
      "icon": "mdi-truck-fast",
      "effect": [
        {
          "name": "weatherChaosFishingTime",
          "type": "mult",
          "value": 0.5
        },
        {
          "name": "weatherChaosFishChance",
          "type": "base",
          "value": -0.2
        },
        {
          "name": "weatherChaosTreasureChance",
          "type": "base",
          "value": -0.04
        },
        {
          "name": "weatherChaosTrashGain",
          "type": "mult",
          "value": 0.5714285714285714
        }
      ]
    },
    "golden": {
      "icon": "mdi-gold",
      "effect": [
        {
          "name": "weatherChaosFishChance",
          "type": "base",
          "value": 0.05
        },
        {
          "name": "weatherChaosTreasureChance",
          "type": "base",
          "value": 0.025
        },
        {
          "name": "weatherChaosTrashGain",
          "type": "mult",
          "value": 0.5714285714285714
        }
      ]
    },
    "dull": {
      "icon": "mdi-square-opacity",
      "effect": [
        {
          "name": "weatherChaosTreasureChance",
          "type": "base",
          "value": -0.025
        },
        {
          "name": "currencyEventPlasticGain",
          "type": "mult",
          "value": 1.75
        }
      ]
    },
    "mystical": {
      "icon": "mdi-auto-fix",
      "effect": [
        {
          "name": "weatherChaosIgnoreWeather",
          "type": "base",
          "value": 0.1
        },
        {
          "name": "weatherChaosFishSizeMax",
          "type": "mult",
          "value": 0.8333333333333334
        },
        {
          "name": "weatherChaosFishSizeAverage",
          "type": "mult",
          "value": 0.7142857142857143
        }
      ]
    },
    "twins": {
      "icon": "mdi-call-split",
      "effect": [
        {
          "name": "weatherChaosFishingTime",
          "type": "mult",
          "value": 1.1
        },
        {
          "name": "weatherChaosFishDoubleChance",
          "type": "base",
          "value": 0.2
        },
        {
          "name": "weatherChaosTrashGain",
          "type": "mult",
          "value": 0.625
        }
      ]
    }
  },
  "js/modules/event/weatherChaos/tick.js": {},
  "js/modules/event/bank/project.js": {
    "expandVault": {
      "price": {
        "_type": "formula",
        "code": "lvl => getSequence(2, lvl) * 500 + 2000"
      },
      "effect": [
        {
          "name": "currencyGemTopazCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 300"
          }
        }
      ]
    },
    "persuadeInvestors": {
      "price": {
        "_type": "formula",
        "code": "lvl => getSequence(2, lvl) * 500 + 2000"
      },
      "effect": [
        {
          "name": "currencySchoolGoldenDustCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 4000"
          }
        }
      ]
    },
    "improveCreditScore": {
      "price": {
        "_type": "formula",
        "code": "lvl => getSequence(2, lvl) * 500 + 2000"
      },
      "effect": [
        {
          "name": "bankInvestmentSize",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 200"
          }
        },
        {
          "name": "bankLoanSize",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 200"
          }
        }
      ]
    },
    "businessMarketing": {
      "price": {
        "_type": "formula",
        "code": "lvl => getSequence(2, lvl) * 500 + 2000"
      },
      "effect": [
        {
          "name": "merchantOffers",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "cardTournament": {
      "price": {
        "_type": "formula",
        "code": "lvl => getSequence(2, lvl) * 500 + 2000"
      },
      "effect": [
        {
          "name": "bankCardPackChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => 0.5 - Math.pow(0.8, lvl) * 0.5"
          }
        }
      ]
    }
  },
  "js/modules/event/summerFestival/prize.js": {
    "theme_waves": {
      "type": "theme",
      "item": "waves",
      "pool": {
        "summerFestival": {
          "price": {
            "event_summerFestivalToken": 240
          }
        }
      }
    },
    "relic_tropicalTent": {
      "type": "relic",
      "item": "tropicalTent",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.villageFeature.see;\n        }"
      },
      "pool": {
        "summerFestival": {
          "price": {
            "event_summerFestivalToken": 150
          }
        }
      }
    },
    "relic_fruitBasket": {
      "type": "relic",
      "item": "fruitBasket",
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFeature.see;\n        }"
      },
      "pool": {
        "summerFestival": {
          "price": {
            "event_summerFestivalToken": 170
          }
        }
      }
    },
    "cardPack_charmingShip": {
      "type": "cardPack",
      "item": "charmingShip",
      "pool": {
        "summerFestival": {
          "price": {
            "event_summerFestivalToken": 30
          }
        }
      }
    },
    "farm_tropicalWater": {
      "type": "consumable",
      "item": "farm_tropicalWater",
      "amount": 20,
      "requirement": {
        "_type": "formula",
        "code": "() => {\n            return store.state.unlock.farmFertilizer.see;\n        }"
      },
      "pool": {
        "summerFestival": {
          "price": {
            "event_summerFestivalToken": 1
          }
        }
      }
    }
  },
  "js/modules/event/summerFestival/upgrade.js": {
    "extraBuildingSlot": {
      "type": "summerFestival",
      "cap": 3,
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {gem_topaz: Math.pow(2, lvl) * 250};\n    }"
      },
      "effect": [
        {
          "name": "summerFestivalBuildQueueSlots",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 2"
          }
        }
      ]
    },
    "doubleTime": {
      "type": "summerFestival",
      "cap": 5,
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {gem_topaz: lvl * 100 + 200};\n    }"
      },
      "effect": [
        {
          "name": "summerFestivalBuildQueueSpeed",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl + 1"
          }
        }
      ]
    },
    "tropicalBlessing": {
      "type": "summerFestival",
      "cap": 8,
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {gem_topaz: lvl * 50 + 100};\n    }"
      },
      "effect": [
        {
          "name": "summerFestivalMaterialGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.25 + 1"
          }
        },
        {
          "name": "summerFestivalMaterialStackCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 5"
          }
        }
      ]
    }
  },
  "js/modules/event/summerFestival/quest.js": {},
  "js/modules/event/summerFestival/building.js": {},
  "js/modules/event/summerFestival/tick.js": {},
  "js/modules/mining/card.js": {
    "feature": {
      "prefix": "MI",
      "reward": [
        {
          "name": "miningDamage",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ],
      "shinyReward": [
        {
          "name": "miningPrestigeIncome",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ],
      "powerReward": [
        {
          "name": "miningDamage",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.08, lvl)"
          }
        },
        {
          "name": "miningPrestigeIncome",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.05, lvl)"
          }
        }
      ],
      "unlock": null
    },
    "collection": {
      "minersAndEquipment": {
        "reward": [
          {
            "name": "miningDamage",
            "type": "mult",
            "value": 1.35
          }
        ]
      },
      "scrapLogistics": {
        "reward": [
          {
            "name": "miningCardCap",
            "type": "base",
            "value": 1
          },
          {
            "name": "currencyMiningScrapCap",
            "type": "mult",
            "value": 2
          }
        ]
      },
      "caveLocations": {
        "reward": [
          {
            "name": "villageCardCap",
            "type": "base",
            "value": 1
          },
          {
            "name": "currencyVillageStoneGain",
            "type": "mult",
            "value": 1.5
          }
        ]
      },
      "dangersInTheDark": {
        "reward": [
          {
            "name": "miningCardCap",
            "type": "base",
            "value": 1
          },
          {
            "name": "hordeCardCap",
            "type": "base",
            "value": 1
          }
        ]
      }
    },
    "pack": {
      "intoDarkness": {
        "amount": 3,
        "price": 15,
        "content": {
          "MI-0001": 2.75,
          "MI-0002": 0.3,
          "MI-0003": 0.58,
          "MI-0004": 1.1,
          "MI-0005": 1.22,
          "MI-0006": 0.9,
          "MI-0007": 0.65,
          "MI-0008": 1.11,
          "MI-0009": 1.56,
          "MI-0010": 0.28,
          "MI-0011": 0.73,
          "MI-0012": 0.86,
          "MI-0013": 1.05,
          "MI-0014": 1.45,
          "MI-0015": 0.49,
          "MI-0016": 0.55,
          "MI-0017": 0.52,
          "MI-0018": 1.16,
          "MI-0023": 0.18,
          "MI-0024": 0.05
        }
      },
      "drillsAndDepths": {
        "unlock": "miningDepthDweller",
        "amount": 4,
        "price": 35,
        "content": {
          "MI-0001": 1.8,
          "MI-0002": 0.4,
          "MI-0003": 0.65,
          "MI-0004": 1.1,
          "MI-0005": 1.22,
          "MI-0006": 0.9,
          "MI-0013": 1.05,
          "MI-0014": 1.45,
          "MI-0015": 0.69,
          "MI-0016": 0.55,
          "MI-0017": 0.52,
          "MI-0018": 1.16,
          "MI-0019": 1.55,
          "MI-0020": 2.3,
          "MI-0021": 1.91,
          "MI-0022": 2.12,
          "MI-0023": 0.36,
          "MI-0024": 0.12,
          "MI-0025": 0.46,
          "MI-0026": 0.62,
          "MI-0027": 1.35
        }
      },
      "hotStuff": {
        "unlock": "miningSmeltery",
        "amount": 5,
        "price": 70,
        "content": {
          "MI-0007": 1.3,
          "MI-0008": 1.77,
          "MI-0009": 1.56,
          "MI-0010": 0.28,
          "MI-0011": 0.58,
          "MI-0012": 0.51,
          "MI-0023": 0.72,
          "MI-0024": 0.24,
          "MI-0025": 0.46,
          "MI-0026": 0.62,
          "MI-0027": 1.35,
          "MI-0028": 0.8,
          "MI-0029": 0.66,
          "MI-0030": 2.8,
          "MI-0031": 1.35,
          "MI-0032": 0.5
        }
      },
      "dangerZone": {
        "unlock": "miningResin",
        "amount": 4,
        "price": 105,
        "content": {
          "MI-0032": 1.6,
          "MI-0033": 1.45,
          "MI-0034": 1.35,
          "MI-0035": 2.1,
          "MI-0036": 1.95,
          "MI-0037": 3.35,
          "MI-0038": 2.1
        }
      }
    },
    "card": {
      "_type": "expression",
      "code": "cardList"
    }
  },
  "js/modules/mining/upgradePrestige.js": {},
  "js/modules/mining/upgradePremium.js": {},
  "js/modules/mining/beacon.js": {
    "piercing": {
      "color": "purple",
      "ownedMult": "miningBeaconPiercing",
      "effect": [
        {
          "name": "miningToughness",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => 1 / (lvl * 0.25 + 5)"
          }
        }
      ]
    },
    "rich": {
      "color": "orange",
      "ownedMult": "miningBeaconRich",
      "effect": [
        {
          "name": "miningOreGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 2"
          }
        }
      ]
    },
    "wonder": {
      "color": "blue",
      "ownedMult": "miningBeaconWonder",
      "effect": [
        {
          "name": "miningRareEarthGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.04 + 1.6"
          }
        }
      ]
    },
    "hope": {
      "color": "green",
      "ownedMult": "miningBeaconHope",
      "range": 5,
      "effect": [
        {
          "name": "miningDamage",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.01 + 1.1"
          }
        },
        {
          "name": "currencyMiningScrapGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.015 + 1.2"
          }
        }
      ]
    }
  },
  "js/modules/mining/ore.js": {
    "oreAluminium": {
      "power": 15,
      "impurity": 1.5,
      "minDepth": 15,
      "maxDepth": 45,
      "modulo": 3,
      "baseAmount": 0.02,
      "amountMult": 1.05
    },
    "oreCopper": {
      "power": 50,
      "impurity": 2,
      "minDepth": 30,
      "maxDepth": 68,
      "modulo": 4,
      "baseAmount": 0.004,
      "amountMult": 1.05
    },
    "oreTin": {
      "power": 240,
      "impurity": 2.5,
      "minDepth": 50,
      "maxDepth": 100,
      "modulo": 5,
      "baseAmount": 0.0008,
      "amountMult": 1.05
    },
    "oreIron": {
      "power": 1300,
      "impurity": 3,
      "minDepth": 80,
      "maxDepth": 140,
      "modulo": 7,
      "baseAmount": 0.00016,
      "amountMult": 1.05
    },
    "oreTitanium": {
      "power": 7000,
      "impurity": 3.5,
      "minDepth": 120,
      "maxDepth": 200,
      "modulo": 11,
      "baseAmount": 0.000032,
      "amountMult": 1.05
    },
    "orePlatinum": {
      "power": {
        "_type": "expression",
        "code": "buildNum(40, 'K')"
      },
      "impurity": 4,
      "minDepth": 175,
      "maxDepth": 295,
      "modulo": 13,
      "baseAmount": 0.0000064,
      "amountMult": 1.05
    },
    "oreIridium": {
      "power": {
        "_type": "expression",
        "code": "buildNum(250, 'K')"
      },
      "impurity": 5,
      "minDepth": 260,
      "maxDepth": 420,
      "modulo": 17,
      "baseAmount": 0.00000128,
      "amountMult": 1.05
    },
    "oreOsmium": {
      "power": {
        "_type": "expression",
        "code": "buildNum(1.75, 'M')"
      },
      "impurity": 6,
      "minDepth": 350,
      "maxDepth": 525,
      "modulo": 23,
      "baseAmount": 0.000000256,
      "amountMult": 1.05
    },
    "oreLead": {
      "power": {
        "_type": "expression",
        "code": "buildNum(12.5, 'M')"
      },
      "impurity": 7.5,
      "minDepth": 450,
      "maxDepth": 650,
      "modulo": 29,
      "baseAmount": 0.0000000512,
      "amountMult": 1.05
    }
  },
  "js/modules/mining/upgrade.js": {},
  "js/modules/mining/cardList.js": {},
  "js/modules/mining/smeltery.js": {
    "aluminium": {
      "price": {
        "mining_oreAluminium": {
          "base": 1000,
          "increment": 50
        },
        "mining_granite": {
          "base": 800,
          "increment": 800
        }
      },
      "output": "mining_barAluminium",
      "timeNeeded": 300,
      "minTemperature": 100
    },
    "bronze": {
      "price": {
        "mining_oreCopper": {
          "base": 900,
          "increment": 45
        },
        "mining_oreTin": {
          "base": 100,
          "increment": 5
        },
        "mining_salt": {
          "base": 150,
          "increment": 50
        }
      },
      "output": "mining_barBronze",
      "timeNeeded": {
        "_type": "expression",
        "code": "SECONDS_PER_HOUR"
      },
      "minTemperature": 275
    },
    "steel": {
      "price": {
        "mining_oreIron": {
          "base": 1000,
          "increment": 50
        },
        "mining_coal": {
          "base": 2,
          "increment": 0
        }
      },
      "output": "mining_barSteel",
      "timeNeeded": {
        "_type": "expression",
        "code": "8 * SECONDS_PER_HOUR"
      },
      "minTemperature": 500
    },
    "titanium": {
      "price": {
        "mining_oreTitanium": {
          "base": 1000,
          "increment": 50
        },
        "mining_sulfur": {
          "base": 200,
          "increment": 10
        },
        "mining_niter": {
          "base": 50,
          "increment": 0
        }
      },
      "output": "mining_barTitanium",
      "timeNeeded": {
        "_type": "expression",
        "code": "3 * SECONDS_PER_DAY"
      },
      "minTemperature": 800
    },
    "shiny": {
      "price": {
        "mining_orePlatinum": {
          "base": 1000,
          "increment": 50
        },
        "mining_obsidian": {
          "base": {
            "_type": "expression",
            "code": "buildNum(2, 'M')"
          },
          "increment": {
            "_type": "expression",
            "code": "buildNum(100, 'K')"
          }
        }
      },
      "output": "mining_barShiny",
      "timeNeeded": {
        "_type": "expression",
        "code": "30 * SECONDS_PER_DAY"
      },
      "minTemperature": 1200
    },
    "iridium": {
      "price": {
        "mining_oreIridium": {
          "base": 1000,
          "increment": 50
        },
        "mining_helium": {
          "base": {
            "_type": "expression",
            "code": "buildNum(10, 'K')"
          },
          "increment": 2500
        }
      },
      "output": "mining_barIridium",
      "timeNeeded": {
        "_type": "expression",
        "code": "365 * SECONDS_PER_DAY"
      },
      "minTemperature": 1750
    },
    "darkIron": {
      "price": {
        "mining_oreIron": {
          "base": {
            "_type": "expression",
            "code": "buildNum(10, 'M')"
          },
          "increment": {
            "_type": "expression",
            "code": "buildNum(500, 'K')"
          }
        },
        "mining_oreOsmium": {
          "base": 1000,
          "increment": 50
        },
        "mining_deeprock": {
          "base": {
            "_type": "expression",
            "code": "buildNum(100, 'M')"
          },
          "increment": {
            "_type": "expression",
            "code": "buildNum(25, 'M')"
          }
        },
        "mining_neon": {
          "base": {
            "_type": "expression",
            "code": "buildNum(10, 'K')"
          },
          "increment": 2500
        }
      },
      "output": "mining_barDarkIron",
      "timeNeeded": {
        "_type": "expression",
        "code": "5000 * SECONDS_PER_DAY"
      },
      "minTemperature": 2500
    }
  },
  "js/modules/mining/relic.js": {
    "friendlyBat": {
      "icon": "mdi-bat",
      "color": "dark-grey",
      "effect": [
        {
          "name": "currencyMiningScrapGain",
          "type": "mult",
          "value": 1.25
        }
      ]
    },
    "hammer": {
      "icon": "mdi-hammer",
      "color": "brown",
      "effect": [
        {
          "name": "mining_craftingStation",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "aluminiumBrick": {
      "icon": "mdi-wall",
      "color": "blue-grey",
      "effect": [
        {
          "name": "mining_aluminiumCache",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "mining_aluminiumHardening",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "copperBrick": {
      "icon": "mdi-wall",
      "color": "orange",
      "effect": [
        {
          "name": "mining_copperCache",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "aluminiumHeap": {
      "icon": "mdi-dots-triangle",
      "color": "blue-grey",
      "effect": [
        {
          "name": "mining_aluminiumTanks",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "mining_aluminiumAnvil",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "bomb": {
      "icon": "mdi-bomb",
      "color": "red",
      "effect": [
        {
          "name": "mining_hullbreaker",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "copperHeap": {
      "icon": "mdi-dots-triangle",
      "color": "orange",
      "effect": [
        {
          "name": "mining_copperTanks",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "radar": {
      "icon": "mdi-radar",
      "color": "light-green",
      "effect": [
        {
          "name": "mining_depthDweller",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "press": {
      "icon": "mdi-download",
      "color": "deep-purple",
      "effect": [
        {
          "name": "mining_compressor",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "cupboard": {
      "icon": "mdi-cupboard",
      "color": "brown",
      "effect": [
        {
          "name": "mining_oreSlots",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "catalyst": {
      "icon": "mdi-flask",
      "color": "teal",
      "effect": [
        {
          "name": "mining_refinery",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "jumprope": {
      "icon": "mdi-jump-rope",
      "color": "brown",
      "effect": [
        {
          "name": "mining_aluminiumExpansion",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "mining_copperExpansion",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "bronzePickaxe": {
      "icon": "mdi-pickaxe",
      "color": "amber",
      "effect": [
        {
          "name": "mining_graniteHardening",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "oreShelf": {
      "icon": "mdi-window-closed",
      "color": "brown",
      "effect": [
        {
          "name": "mining_oreShelf",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "mining_tinCache",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "coalBrick": {
      "icon": "mdi-wall",
      "color": "dark-grey",
      "effect": [
        {
          "name": "mining_furnace",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "washingMachine": {
      "icon": "mdi-washing-machine",
      "color": "skyblue",
      "effect": [
        {
          "name": "mining_oreWashing",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "openedGift": {
      "icon": "mdi-gift-open",
      "color": "blue",
      "effect": [
        {
          "name": "mining_bronzeCache",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "mining_ironCache",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "magnet": {
      "icon": "mdi-magnet",
      "color": "red",
      "effect": [
        {
          "name": "mining_ironExpansion",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "mining_ironHardening",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "mining_ironFilter",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "copperPickaxe": {
      "icon": "mdi-pickaxe",
      "color": "orange",
      "effect": [
        {
          "name": "mining_magnet",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "mining_warehouse",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "tinBucket": {
      "icon": "mdi-pail",
      "color": "grey",
      "effect": [
        {
          "name": "mining_titaniumExpansion",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "mining_titaniumCache",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "honeyPot": {
      "icon": "mdi-pot",
      "color": "amber",
      "effect": [
        {
          "name": "miningResinMax",
          "type": "base",
          "value": 1
        }
      ]
    }
  },
  "js/modules/mining/enhancement.js": {
    "barAluminium": {
      "effect": [
        {
          "name": "miningPickaxeCraftingQuality",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.5 + 1"
          }
        },
        {
          "name": "miningOreQuality",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(2, lvl)"
          }
        }
      ]
    },
    "barBronze": {
      "effect": [
        {
          "name": "miningOreGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.5, lvl)"
          }
        },
        {
          "name": "miningRareEarthGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.25, lvl)"
          }
        }
      ]
    },
    "barSteel": {
      "effect": [
        {
          "name": "miningDamage",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.35 + 1"
          }
        },
        {
          "name": "miningToughness",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1 / 1.5, lvl)"
          }
        }
      ]
    },
    "barTitanium": {
      "effect": [
        {
          "name": "currencyMiningScrapGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => getSequence(2, lvl) + 1"
          }
        }
      ]
    },
    "barShiny": {
      "effect": [
        {
          "name": "miningDepthDwellerSpeed",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.35, lvl)"
          }
        },
        {
          "name": "currencyMiningCrystalGreenGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.2 + 1"
          }
        }
      ]
    },
    "barIridium": {
      "effect": [
        {
          "name": "currencyMiningEmberGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl + 1"
          }
        }
      ]
    },
    "barDarkIron": {
      "effect": [
        {
          "name": "currencyMiningScrapCap",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => getSequence(2, lvl) * 0.5 + 1"
          }
        }
      ]
    }
  },
  "js/modules/mining/achievement.js": {
    "maxDepth0": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_maxDepth0.total"
      },
      "default": 1,
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl * 25 + 25"
      }
    },
    "maxDepth1": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_maxDepth1.total"
      },
      "default": 1,
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl * 10 + 10"
      }
    },
    "maxDepthSpeedrun": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_maxDepthSpeedrun.total"
      },
      "default": 1,
      "cap": 10,
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl > 0 ? (lvl * 10 + 10) : 15"
      },
      "relic": {
        "1": "radar",
        "2": "press",
        "3": "cupboard",
        "5": "bronzePickaxe",
        "9": "washingMachine"
      }
    },
    "totalDamage": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_totalDamage.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(buildNum(200, 'K'), lvl) * buildNum(10, 'M')"
      },
      "relic": {
        "6": "openedGift"
      }
    },
    "maxDamage": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_maxDamage.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(buildNum(200, 'K'), lvl) * buildNum(10, 'K')"
      },
      "relic": {
        "3": "bomb"
      }
    },
    "scrap": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_scrap.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(8000, lvl) * buildNum(5, 'M')"
      },
      "relic": {
        "3": "jumprope",
        "4": "oreShelf"
      }
    },
    "oreTotal": {
      "value": {
        "_type": "formula",
        "code": "() => [\n        store.state.stat.mining_oreAluminium.total,\n        store.state.stat.mining_oreCopper.total,\n        store.state.stat.mining_oreTin.total,\n        store.state.stat.mining_oreIron.total,\n        store.state.stat.mining_oreTitanium.total,\n        store.state.stat.mining_orePlatinum.total,\n        store.state.stat.mining_oreIridium.total,\n        store.state.stat.mining_oreOsmium.total,\n        store.state.stat.mining_oreLead.total,\n    ].reduce((a, b) => a + b, 0)"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(10, lvl) * 100"
      },
      "relic": {
        "2": "aluminiumBrick",
        "3": "copperBrick",
        "4": "aluminiumHeap",
        "5": "copperPickaxe",
        "6": "tinBucket"
      }
    },
    "oreVariety": {
      "value": {
        "_type": "formula",
        "code": "() => [\n        store.state.stat.mining_oreAluminium.total,\n        store.state.stat.mining_oreCopper.total,\n        store.state.stat.mining_oreTin.total,\n        store.state.stat.mining_oreIron.total,\n        store.state.stat.mining_oreTitanium.total,\n        store.state.stat.mining_orePlatinum.total,\n        store.state.stat.mining_oreIridium.total,\n        store.state.stat.mining_oreOsmium.total,\n        store.state.stat.mining_oreLead.total,\n    ].reduce((a, b) => a + (b > 0 ? 1 : 0), 0)"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl + 2"
      },
      "relic": {
        "1": "copperHeap",
        "2": "catalyst",
        "3": "magnet"
      }
    },
    "depthDwellerCap0": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_depthDwellerCap0.total"
      },
      "cap": 30,
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl * 10 + (lvl === 0 ? 5 : 0)"
      },
      "relic": {
        "0": "hammer"
      }
    },
    "depthDwellerCap1": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_depthDwellerCap1.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl * 10 + (lvl === 0 ? 5 : 0)"
      }
    },
    "coal": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_coal.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(2.5, lvl) * 100"
      },
      "relic": {
        "2": "coalBrick"
      }
    },
    "resin": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_resin.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(2, lvl) * 50"
      },
      "relic": {
        "3": "honeyPot"
      }
    },
    "craftingWasted": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_craftingWasted.total"
      },
      "secret": true,
      "display": "boolean",
      "cap": 1,
      "milestones": {
        "_type": "formula",
        "code": "() => 1"
      }
    },
    "dwellerCapHit": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_dwellerCapHit.total"
      },
      "secret": true,
      "display": "boolean",
      "cap": 1,
      "milestones": {
        "_type": "formula",
        "code": "() => 1"
      }
    },
    "craftingLuck": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.mining_craftingLuck.total"
      },
      "default": 1,
      "secret": true,
      "cap": 1,
      "milestones": {
        "_type": "formula",
        "code": "() => buildNum(1, 'M')"
      }
    }
  },
  "js/modules/mining/upgrade2.js": {},
  "js/modules/general/orladee.js": {
    "unlock": "generalOrladeeSubfeature",
    "quests": {
      "beautyOfThisWorld": {
        "reward": "chessboard",
        "stages": [
          {
            "note": "general_32",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "farm_bugMax",
                "operator": ">=",
                "value": 250
              },
              {
                "type": "stat",
                "subtype": "current",
                "name": "farm_ladybugMax",
                "operator": ">=",
                "value": 250
              },
              {
                "type": "stat",
                "subtype": "current",
                "name": "farm_butterflyMax",
                "operator": ">=",
                "value": 50
              }
            ]
          },
          {
            "note": "general_33",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "gallery_redDrumMax",
                "operator": ">=",
                "value": 1200
              }
            ]
          }
        ]
      }
    }
  },
  "js/modules/general/grobodal.js": {
    "quests": {
      "diggingDeeper": {
        "reward": "torch",
        "stages": [
          {
            "note": "general_1",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_timeSpent",
                "operator": "<=",
                "value": 1800
              },
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_oreAluminium",
                "operator": ">=",
                "value": 25
              }
            ]
          },
          {
            "note": "general_2",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "village_maxBuilding",
                "operator": ">=",
                "value": 200
              }
            ]
          },
          {
            "note": "general_3",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_depthDwellerCap0",
                "operator": ">=",
                "value": 5
              }
            ]
          },
          {
            "note": "general_4",
            "tasks": [
              {
                "type": "upgrade",
                "subtype": "current",
                "name": "village_school",
                "operator": ">=",
                "value": 1
              }
            ]
          },
          {
            "note": "general_5",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_timeSpent",
                "operator": "<=",
                "value": 900
              },
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_scrap",
                "operator": ">=",
                "value": {
                  "_type": "expression",
                  "code": "buildNum(10, 'B')"
                }
              }
            ]
          }
        ]
      },
      "combatTraining": {
        "reward": "purpleHeart",
        "stages": [
          {
            "note": "general_6",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "horde_maxZone",
                "operator": ">=",
                "value": 35
              }
            ]
          },
          {
            "note": "general_7",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "horde_totalDamage",
                "operator": ">=",
                "value": {
                  "_type": "expression",
                  "code": "buildNum(5, 'B')"
                }
              },
              {
                "type": "stat",
                "subtype": "current",
                "name": "horde_maxZone",
                "operator": "<=",
                "value": 1
              }
            ]
          },
          {
            "note": "general_8",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_maxDepth0",
                "operator": ">=",
                "value": 40
              },
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_craftingCount",
                "operator": "<=",
                "value": 0
              }
            ]
          },
          {
            "note": "general_9",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "horde_maxZone",
                "operator": ">=",
                "value": 48
              }
            ]
          },
          {
            "note": "general_10",
            "tasks": [
              {
                "type": "unlock",
                "name": "villageBuildings4",
                "feature": "village"
              }
            ]
          },
          {
            "note": "general_11",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "horde_soulCorrupted",
                "operator": ">=",
                "value": {
                  "_type": "expression",
                  "code": "buildNum(10, 'M')"
                }
              }
            ]
          }
        ]
      },
      "gardening": {
        "reward": "rottenLeaf",
        "unlock": "farmCropExp",
        "stages": [
          {
            "note": "general_12",
            "tasks": [
              {
                "type": "cropLevel",
                "subtype": "current",
                "name": "potato",
                "operator": ">=",
                "value": 1
              }
            ]
          },
          {
            "note": "general_13",
            "tasks": [
              {
                "type": "upgrade",
                "subtype": "current",
                "name": "village_garden",
                "operator": ">=",
                "value": 20
              }
            ]
          },
          {
            "note": "general_14",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "farm_bestPrestige",
                "operator": ">=",
                "value": 7
              }
            ]
          },
          {
            "note": "general_15",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "farm_maxOvergrow",
                "operator": ">=",
                "value": 7
              }
            ]
          },
          {
            "note": "general_16",
            "tasks": [
              {
                "type": "upgrade",
                "subtype": "current",
                "name": "farm_seedBox",
                "operator": ">=",
                "value": 7
              }
            ]
          }
        ]
      },
      "pitchBlack": {
        "reward": "stonepiercer",
        "unlock": "miningSmeltery",
        "stages": [
          {
            "note": "general_17",
            "tasks": [
              {
                "type": "upgrade",
                "subtype": "current",
                "name": "mining_graniteHardening",
                "operator": ">=",
                "value": 6
              }
            ]
          },
          {
            "note": "general_18",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_maxDepth0",
                "operator": ">=",
                "value": 95
              },
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_craftingCount",
                "operator": "<=",
                "value": 5
              }
            ]
          },
          {
            "note": "general_19",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "village_timeSpent",
                "operator": "<=",
                "value": 900
              },
              {
                "type": "stat",
                "subtype": "current",
                "name": "village_stone",
                "operator": ">=",
                "value": {
                  "_type": "expression",
                  "code": "buildNum(500, 'K')"
                }
              }
            ]
          },
          {
            "note": "general_20",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "mining_coalMax",
                "operator": ">=",
                "value": 30
              }
            ]
          }
        ]
      },
      "masterOfTheSystem": {
        "reward": "consolationPrize",
        "unlock": "hordeItemMastery",
        "stages": [
          {
            "note": "general_21",
            "tasks": [
              {
                "type": "stat",
                "subtype": "total",
                "name": "horde_maxMastery",
                "operator": ">=",
                "value": 2
              },
              {
                "type": "stat",
                "subtype": "total",
                "name": "horde_totalMastery",
                "operator": ">=",
                "value": 18
              }
            ]
          },
          {
            "note": "general_22",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "farm_maxOvergrow",
                "operator": ">=",
                "value": 15
              }
            ]
          },
          {
            "note": "general_23",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "village_maxBuilding",
                "operator": ">=",
                "value": 575
              }
            ]
          },
          {
            "note": "general_24",
            "tasks": [
              {
                "type": "equipmentMastery",
                "name": "milkCup",
                "operator": ">=",
                "value": 3
              },
              {
                "type": "equipmentMastery",
                "name": "corruptEye",
                "operator": ">=",
                "value": 2
              },
              {
                "type": "equipmentMastery",
                "name": "luckyCharm",
                "operator": ">=",
                "value": 1
              }
            ]
          },
          {
            "note": "general_25",
            "tasks": [
              {
                "type": "stat",
                "subtype": "total",
                "name": "village_offeringMax",
                "operator": ">=",
                "value": 4500
              }
            ]
          },
          {
            "note": "general_26",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "horde_maxZone",
                "operator": ">=",
                "value": 110
              },
              {
                "type": "stat",
                "subtype": "current",
                "name": "horde_maxItems",
                "operator": "<=",
                "value": 1
              }
            ]
          }
        ]
      },
      "thinkPlayerThink": {
        "reward": "prettyLamp",
        "unlock": "galleryAuction",
        "stages": [
          {
            "note": "general_27",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "gallery_inspirationMax",
                "operator": ">=",
                "value": 12
              }
            ]
          },
          {
            "note": "general_28",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "gallery_greenMax",
                "operator": ">=",
                "value": {
                  "_type": "expression",
                  "code": "buildNum(10, 'K')"
                }
              }
            ]
          },
          {
            "note": "general_29",
            "tasks": [
              {
                "type": "stat",
                "subtype": "current",
                "name": "gallery_redDrumMax",
                "operator": ">=",
                "value": 250
              }
            ]
          },
          {
            "note": "general_30",
            "tasks": [
              {
                "type": "upgrade",
                "subtype": "current",
                "name": "village_theater",
                "operator": ">=",
                "value": 12
              }
            ]
          },
          {
            "note": "general_31",
            "tasks": [
              {
                "type": "stat",
                "subtype": "total",
                "name": "gallery_bestPrestige",
                "operator": ">=",
                "value": {
                  "_type": "expression",
                  "code": "buildNum(100, 'K')"
                }
              }
            ]
          }
        ]
      }
    }
  },
  "js/modules/migration/v1_5_0.js": {},
  "js/modules/migration/v1_4_0.js": {
    "_default": {
      "_type": "formula",
      "code": "function(save) {\n    if (save.farm?.field) {\n        let newField = {};\n        save.farm.field.forEach(cell => {\n            let content = {...cell.content};\n            if (content.type === 'crop') {\n                content.grow = 0;\n                content.time = 0;\n                content.buildingEffect = {};\n            }\n            newField[cell.y * 7 + cell.x] = content;\n        });\n        save.farm.field = newField;\n    }\n\n    if (save.farm?.crop) {\n        for (const [, elem] of Object.entries(save.farm.crop)) {\n            elem.dna = deltaLinear(14, 4, elem.level);\n            elem.genes = [];\n            elem.genesBlocked = [];\n            elem.cardSelected = [];\n            elem.cardEquipped = [];\n            elem.upgrades = {};\n        }\n    }\n\n    // Update dweller cap stats\n    if (save.stat.mining_depthDweller0) {\n        save.stat.mining_depthDwellerCap0 = save.stat.mining_depthDweller0;\n    }\n    if (save.stat.mining_depthDweller1) {\n        save.stat.mining_depthDwellerCap1 = save.stat.mining_depthDweller1;\n    }\n    if (save.achievement?.mining_depthDweller0) {\n        save.achievement.mining_depthDwellerCap0 = save.achievement.mining_depthDweller0;\n    }\n    if (save.achievement?.mining_depthDweller1) {\n        save.achievement.mining_depthDwellerCap1 = save.achievement.mining_depthDweller1;\n    }\n\n    return save;\n}"
    }
  },
  "js/modules/migration/v1_1_0.js": {},
  "js/modules/migration/v1_5_4.js": {},
  "js/modules/migration/v1_3_5.js": {
    "_default": {
      "_type": "formula",
      "code": "function(save) {\n    if (save.horde && save.horde.loadout) {\n        save.horde.loadout = save.horde.loadout.map(elem => {\n            return {name: encodeURIComponent(elem.name), content: elem.content};\n        });\n    }\n    return save;\n}"
    }
  },
  "js/modules/migration/helper.js": {},
  "js/modules/migration/v1_5_3.js": {},
  "js/modules/migration/v1_5_6.js": {},
  "js/modules/migration/v1_3_0.js": {},
  "js/modules/migration/v1_3_4.js": {
    "_default": {
      "_type": "formula",
      "code": "function(save) {\n    // Delete all rng prerolls because of the new seeded rng\n    save.rng = {};\n\n    // New unlock format\n    for (const [key, elem] of Object.entries(save.unlock)) {\n        save.unlock[key] = elem.use;\n    }\n\n    // New stat format\n    for (const [key, elem] of Object.entries(save.stat)) {\n        save.stat[key] = [elem.value, elem.total];\n    }\n\n    // New upgrade format\n    for (const [key, elem] of Object.entries(save.upgrade)) {\n        save.upgrade[key] = elem.bought === undefined ? [elem.collapse, elem.level, elem.highestLevel] : [elem.collapse, elem.level, elem.highestLevel, elem.bought, elem.timeProgress];\n    }\n\n    return save;\n}"
    }
  },
  "js/modules/migration/v1_5_1.js": {
    "_default": {
      "_type": "formula",
      "code": "function(save) {\n    // Use new school subject format\n    if (save.school) {\n        for (const [key, elem] of Object.entries(save.school)) {\n            save.school[key] = [elem.grade, elem.currentGrade, elem.progress];\n        }\n    }\n\n    // Use new smeltery format\n    if (save.mining && save.mining.smeltery) {\n        for (const [key, elem] of Object.entries(save.mining.smeltery)) {\n            save.mining.smeltery[key] = [elem.progress, elem.stored, elem.total];\n        }\n    }\n\n    // Use new offering format\n    if (save.village && save.village.offering) {\n        for (const [key, elem] of Object.entries(save.village.offering)) {\n            save.village.offering[key] = [elem.offeringBought, elem.upgradeBought];\n        }\n    }\n\n    return save;\n}"
    }
  },
  "js/modules/migration/v1_1_2.js": {},
  "js/modules/migration/v1_4_1.js": {
    "_default": {
      "_type": "formula",
      "code": "function(save) {\n    // Update offering stats\n    if (save.stat.village_offering) {\n        save.stat.village_offeringAmount = save.stat.village_offering;\n    }\n    return save;\n}"
    }
  },
  "js/modules/gallery/card.js": {
    "feature": {
      "prefix": "GA",
      "reward": [
        {
          "name": "currencyGalleryBeautyGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.075 + 1"
          }
        }
      ],
      "shinyReward": [
        {
          "name": "currencyGalleryCashGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ],
      "powerReward": [
        {
          "name": "currencyGalleryBeautyGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.1, lvl)"
          }
        },
        {
          "name": "currencyGalleryCashGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.05, lvl)"
          }
        }
      ],
      "unlock": "galleryFeature"
    },
    "collection": {
      "artDisplay": {
        "reward": [
          {
            "name": "galleryCardCap",
            "type": "base",
            "value": 1
          },
          {
            "name": "currencyGalleryBeautyGain",
            "type": "mult",
            "value": 2
          }
        ]
      },
      "deliveryService": {
        "reward": [
          {
            "name": "currencyGalleryConverterGain",
            "type": "mult",
            "value": 1.25
          },
          {
            "name": "currencyGalleryPackageGain",
            "type": "mult",
            "value": 1.25
          }
        ]
      }
    },
    "pack": {
      "newArtist": {
        "unlock": "galleryAuction",
        "amount": 3,
        "price": 55,
        "content": {
          "GA-0001": 1.2,
          "GA-0002": 1,
          "GA-0003": 0.8,
          "GA-0004": 0.6,
          "GA-0005": 3.2,
          "GA-0006": 1.45,
          "GA-0007": 2.5,
          "GA-0008": 1.55,
          "GA-0009": 1.8,
          "GA-0010": 0.8,
          "GA-0011": 0.66,
          "GA-0012": 1.24,
          "GA-0013": 1.5,
          "GA-0014": 1.18,
          "GA-0015": 1.4,
          "GA-0016": 1.32,
          "GA-0017": 1.12,
          "GA-0018": 1.03
        }
      },
      "inspiringCreations": {
        "unlock": "galleryAuction",
        "amount": 3,
        "price": 120,
        "content": {
          "GA-0012": 1.24,
          "GA-0013": 2.25,
          "GA-0014": 1.18,
          "GA-0015": 1.4,
          "GA-0016": 1.32,
          "GA-0017": 1.12,
          "GA-0018": 1.03,
          "GA-0019": 1.6,
          "GA-0020": 0.77,
          "GA-0021": 0.92,
          "GA-0022": 0.85,
          "GA-0023": 1.08
        }
      }
    },
    "card": {
      "_type": "expression",
      "code": "cardList"
    }
  },
  "js/modules/gallery/upgradePrestige.js": {},
  "js/modules/gallery/upgradePremium.js": {},
  "js/modules/gallery/upgradeShape.js": {},
  "js/modules/gallery/upgrade.js": {},
  "js/modules/gallery/cardList.js": {},
  "js/modules/gallery/relic.js": {
    "printer": {
      "icon": "mdi-printer",
      "color": "pale-light-blue",
      "effect": [
        {
          "name": "gallery_newStyle",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "gallery_recycling",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "sortWaste",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "lightbulb": {
      "icon": "mdi-lightbulb",
      "color": "pale-yellow",
      "effect": [
        {
          "name": "gallery_epiphany",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "galleryInspirationStart",
          "type": "base",
          "value": 1
        }
      ]
    },
    "oldTV": {
      "icon": "mdi-television-classic",
      "color": "brown",
      "effect": [
        {
          "name": "advertise",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "worryingMail": {
      "icon": "mdi-email-alert",
      "color": "red",
      "effect": [
        {
          "name": "beImpatient",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "redBalloon": {
      "icon": "mdi-balloon",
      "color": "red",
      "effect": [
        {
          "name": "gallery_redPower",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "gallery_redConversion",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "sackOfGold": {
      "icon": "mdi-sack",
      "color": "amber",
      "effect": [
        {
          "name": "observeRainbow",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "shredder": {
      "icon": "mdi-shredder",
      "color": "pale-purple",
      "effect": [
        {
          "name": "gallery_filters",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "gallery_trashCan",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "buildComposter",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "redprint": {
      "icon": "mdi-script-text",
      "color": "red",
      "effect": [
        {
          "name": "gallery_redRage",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "buildRedReservoir",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "orangeBalloon": {
      "icon": "mdi-balloon",
      "color": "orange",
      "effect": [
        {
          "name": "gallery_orangePower",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "gallery_orangeConversion",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "creditCard": {
      "icon": "mdi-credit-card",
      "color": "pale-green",
      "effect": [
        {
          "name": "orderMassiveSafe",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "simpleCalculator": {
      "icon": "mdi-calculator",
      "color": "pale-orange",
      "effect": [
        {
          "name": "calculateOdds",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "orangeprint": {
      "icon": "mdi-script-text",
      "color": "orange",
      "effect": [
        {
          "name": "gallery_redLuck",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "buildOrangeReservoir",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "yellowBalloon": {
      "icon": "mdi-balloon",
      "color": "yellow",
      "effect": [
        {
          "name": "gallery_yellowPower",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "gallery_yellowConversion",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "fishbowl": {
      "icon": "mdi-fishbowl",
      "color": "pale-blue",
      "effect": [
        {
          "name": "galleryShapeGain",
          "type": "mult",
          "value": 1.5
        },
        {
          "name": "beExcited",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "pencil": {
      "icon": "mdi-lead-pencil",
      "color": "pale-red",
      "effect": [
        {
          "name": "galleryShapeGain",
          "type": "mult",
          "value": 1.5
        },
        {
          "name": "buyPen",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "smallBrush": {
      "icon": "mdi-brush",
      "color": "pale-pink",
      "effect": [
        {
          "name": "galleryShapeGain",
          "type": "mult",
          "value": 1.5
        },
        {
          "name": "buyBrush",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "strangePills": {
      "icon": "mdi-pill-multiple",
      "color": "pale-red",
      "effect": [
        {
          "name": "galleryShapeGain",
          "type": "mult",
          "value": 1.5
        },
        {
          "name": "hyperfocus",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "strangeScroll": {
      "icon": "mdi-script-text",
      "color": "dark-grey",
      "effect": [
        {
          "name": "beMysterious",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "printingPress": {
      "icon": "mdi-arrow-collapse-vertical",
      "color": "brown",
      "effect": [
        {
          "name": "currencyGalleryCashGain",
          "type": "mult",
          "value": 1.5
        },
        {
          "name": "printNewspaper",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "yellowprint": {
      "icon": "mdi-script-text",
      "color": "yellow",
      "effect": [
        {
          "name": "gallery_orangeLuck",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "buildYellowReservoir",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "greenBalloon": {
      "icon": "mdi-balloon",
      "color": "green",
      "effect": [
        {
          "name": "gallery_greenPower",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "gallery_greenConversion",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "woodenHanger": {
      "icon": "mdi-hanger",
      "color": "wooden",
      "effect": [
        {
          "name": "paintFaster",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "bedsheet": {
      "icon": "mdi-bed-empty",
      "color": "pale-red",
      "effect": [
        {
          "name": "expandCanvas",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "imageAlbum": {
      "icon": "mdi-image-album",
      "color": "orange-red",
      "effect": [
        {
          "name": "gallery_paintDrumStorage",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "paintForFun",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "greenprint": {
      "icon": "mdi-script-text",
      "color": "green",
      "effect": [
        {
          "name": "gallery_yellowLuck",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "buildGreenReservoir",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "blueBalloon": {
      "icon": "mdi-balloon",
      "color": "blue",
      "effect": [
        {
          "name": "gallery_bluePower",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "gallery_blueConversion",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "blueprint": {
      "icon": "mdi-script-text",
      "color": "blue",
      "effect": [
        {
          "name": "gallery_greenLuck",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "buildBlueReservoir",
          "type": "galleryIdea",
          "value": true
        }
      ]
    },
    "purpleBalloon": {
      "icon": "mdi-balloon",
      "color": "blue",
      "effect": [
        {
          "name": "gallery_purplePower",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "gallery_purpleConversion",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    }
  },
  "js/modules/gallery/achievement.js": {
    "beauty": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_beauty.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(buildNum(1, 'M'), lvl) * buildNum(1, 'T')"
      },
      "relic": {
        "2": "sackOfGold",
        "6": "imageAlbum"
      }
    },
    "converter": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_converter.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(20, lvl) * buildNum(200, 'K')"
      },
      "relic": {
        "0": "printer",
        "2": "shredder"
      }
    },
    "colorVariety": {
      "value": {
        "_type": "formula",
        "code": "() => [\n        store.state.stat.gallery_red.total,\n        store.state.stat.gallery_orange.total,\n        store.state.stat.gallery_yellow.total,\n        store.state.stat.gallery_green.total,\n        store.state.stat.gallery_blue.total,\n        store.state.stat.gallery_purple.total,\n        store.state.stat[\"gallery_deep-orange\"].total,\n        store.state.stat.gallery_amber.total,\n        store.state.stat[\"gallery_light-green\"].total,\n        store.state.stat.gallery_teal.total,\n        store.state.stat[\"gallery_light-blue\"].total,\n        store.state.stat.gallery_pink.total\n    ].reduce((a, b) => a + (b > 0 ? 1 : 0), 0)"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl + 2"
      },
      "relic": {
        "2": "redBalloon",
        "3": "orangeBalloon",
        "4": "yellowBalloon",
        "5": "greenBalloon",
        "6": "blueBalloon",
        "7": "purpleBalloon"
      }
    },
    "highestTierIdea": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_highestTierIdea.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl + 2"
      },
      "relic": {
        "0": "lightbulb",
        "1": "simpleCalculator",
        "3": "strangeScroll"
      }
    },
    "cash": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_cash.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(100, lvl) * 100"
      },
      "relic": {
        "1": "oldTV",
        "5": "printingPress"
      }
    },
    "packageMax": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_packageMax.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(3, lvl) * 100"
      },
      "relic": {
        "0": "worryingMail",
        "1": "creditCard"
      }
    },
    "redDrumMax": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_redDrumMax.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl > 0 ? (Math.pow(2, lvl) * 25) : 20"
      },
      "relic": {
        "2": "redprint",
        "4": "orangeprint",
        "6": "yellowprint",
        "9": "greenprint",
        "12": "blueprint"
      }
    },
    "shapeComboTotal": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_shapeComboTotal.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.round(Math.pow(lvl + 2, 2) * Math.pow(1.2, lvl) * 25)"
      },
      "relic": {
        "2": "fishbowl",
        "4": "smallBrush",
        "7": "strangePills"
      }
    },
    "shapeComboHighest": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_shapeComboHighest.total"
      },
      "cap": 7,
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl * 5 + 10"
      },
      "relic": {
        "2": "pencil"
      }
    },
    "canvasLevelTotal": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_canvasLevelTotal.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => getSequence(2, lvl + 1) * 10"
      },
      "relic": {
        "0": "woodenHanger",
        "2": "bedsheet"
      }
    },
    "hourglassHighest": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.gallery_hourglassHighest.total"
      },
      "secret": true,
      "display": "time",
      "cap": 1,
      "milestones": {
        "_type": "formula",
        "code": "() => 86400"
      }
    }
  },
  "js/modules/gallery/idea.js": {},
  "js/modules/gallery/shape.js": {
    "circle": {
      "unlocked": true,
      "icon": "mdi-circle",
      "color": "orange"
    },
    "rectangle": {
      "icon": "mdi-rectangle",
      "color": "indigo"
    },
    "triangle": {
      "icon": "mdi-triangle",
      "color": "light-green"
    },
    "star": {
      "icon": "mdi-star",
      "color": "amber"
    },
    "ellipse": {
      "icon": "mdi-ellipse",
      "color": "purple"
    },
    "heart": {
      "icon": "mdi-heart",
      "color": "red"
    },
    "square": {
      "icon": "mdi-square",
      "color": "light-blue"
    },
    "octagon": {
      "icon": "mdi-octagon",
      "color": "babypink"
    },
    "pentagon": {
      "icon": "mdi-pentagon",
      "color": "aqua"
    },
    "hexagon": {
      "icon": "mdi-hexagon",
      "color": "brown"
    },
    "bomb": {
      "isSpecial": true,
      "icon": "mdi-bomb",
      "color": "pale-red"
    },
    "dice": {
      "isSpecial": true,
      "icon": "mdi-dice-multiple",
      "color": "pale-pink"
    },
    "accelerator": {
      "isSpecial": true,
      "icon": "mdi-rotate-orbit",
      "color": "pale-purple"
    },
    "sparkles": {
      "isSpecial": true,
      "icon": "mdi-shimmer",
      "color": "pale-green"
    },
    "hourglass": {
      "isSpecial": true,
      "icon": "mdi-timer-sand",
      "color": "pale-yellow"
    },
    "chest": {
      "isSpecial": true,
      "icon": "mdi-treasure-chest",
      "color": "pale-blue"
    }
  },
  "js/modules/gem/card.js": {
    "feature": {
      "prefix": "GE",
      "reward": [
        {
          "name": "currencyGemTopazCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 20"
          }
        }
      ],
      "shinyReward": [
        {
          "name": "currencyGemTopazCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 20"
          }
        }
      ],
      "unlock": "gemFeature"
    },
    "collection": {
      "preciousJewelry": {
        "reward": [
          {
            "name": "currencyGemTopazCap",
            "type": "base",
            "value": 160
          }
        ]
      }
    },
    "pack": {},
    "card": {
      "_type": "expression",
      "code": "cardList"
    }
  },
  "js/modules/gem/cardList.js": {},
  "js/modules/horde/battlePass.js": {
    "1": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "2": {
      "icon": "mdi-bow-arrow",
      "color": "light-green",
      "effect": [
        {
          "name": "hordeClassArcher",
          "type": "unlock",
          "value": true
        }
      ]
    },
    "3": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "5": {
      "icon": "mdi-wizard-hat",
      "color": "deep-purple",
      "effect": [
        {
          "name": "hordeClassMage",
          "type": "unlock",
          "value": true
        }
      ]
    },
    "7": {
      "icon": "mdi-arrow-up-bold",
      "color": "orange",
      "effect": [
        {
          "name": "hordeBattlePassPrestigeUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "8": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "10": {
      "icon": "mdi-arrow-up-bold",
      "color": "orange",
      "effect": [
        {
          "name": "hordeBattlePassPrestigeUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "12": {
      "icon": "mdi-arrow-up-bold",
      "color": "orange",
      "effect": [
        {
          "name": "hordeBattlePassPrestigeUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "14": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "15": {
      "icon": "mdi-shield",
      "color": "blue-grey",
      "effect": [
        {
          "name": "hordeClassKnight",
          "type": "unlock",
          "value": true
        }
      ]
    },
    "16": {
      "icon": "mdi-arrow-up-bold",
      "color": "orange",
      "effect": [
        {
          "name": "hordeBattlePassPrestigeUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "18": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "20": {
      "icon": "mdi-arrow-up-bold",
      "color": "orange",
      "effect": [
        {
          "name": "hordeBattlePassPrestigeUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "24": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "25": {
      "icon": "mdi-cached",
      "color": "pink",
      "effect": [
        {
          "name": "hordeAutocast",
          "type": "base",
          "value": 1
        }
      ]
    },
    "27": {
      "icon": "mdi-arrow-up-bold",
      "color": "orange",
      "effect": [
        {
          "name": "hordeBattlePassPrestigeUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "30": {
      "icon": "mdi-necklace",
      "color": "cyan",
      "effect": [
        {
          "name": "hordeHeirloomAmount",
          "type": "mult",
          "value": 2
        }
      ]
    },
    "31": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "33": {
      "icon": "mdi-arrow-up-bold",
      "color": "orange",
      "effect": [
        {
          "name": "hordeBattlePassPrestigeUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "35": {
      "icon": "mdi-pirate",
      "color": "orange",
      "effect": [
        {
          "name": "hordeClassPirate",
          "type": "unlock",
          "value": true
        }
      ]
    },
    "40": {
      "icon": "mdi-star",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeSkillPointsPerLevel",
          "type": "base",
          "value": 1
        }
      ]
    },
    "42": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "45": {
      "icon": "mdi-arrow-up-bold",
      "color": "orange",
      "effect": [
        {
          "name": "hordeBattlePassPrestigeUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "50": {
      "icon": "mdi-treasure-chest",
      "color": "red",
      "effect": [
        {
          "name": "hordeMaxTrinkets",
          "type": "base",
          "value": 1
        }
      ]
    },
    "55": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "60": {
      "icon": "mdi-billiards-rack",
      "color": "teal",
      "effect": [
        {
          "name": "hordeShardChance",
          "type": "mult",
          "value": 3
        }
      ]
    },
    "65": {
      "icon": "mdi-arrow-up-bold",
      "color": "orange",
      "effect": [
        {
          "name": "hordeBattlePassPrestigeUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "70": {
      "icon": "mdi-arrow-up-thin",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeBattlePassUpgrade",
          "type": "text",
          "value": true
        }
      ]
    },
    "75": {
      "icon": "mdi-treasure-chest",
      "color": "wooden",
      "effect": [
        {
          "name": "hordeMaxItems",
          "type": "base",
          "value": 1
        }
      ]
    },
    "80": {
      "icon": "mdi-star",
      "color": "light-blue",
      "effect": [
        {
          "name": "hordeSkillPointsPerLevel",
          "type": "base",
          "value": 1
        }
      ]
    }
  },
  "js/modules/horde/card.js": {
    "feature": {
      "prefix": "HO",
      "reward": [
        {
          "name": "hordeAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.03 + 1"
          }
        },
        {
          "name": "hordeHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.03 + 1"
          }
        }
      ],
      "shinyReward": [
        {
          "name": "hordePrestigeIncome",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ],
      "powerReward": [
        {
          "name": "hordeAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.06, lvl)"
          }
        },
        {
          "name": "hordeHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.06, lvl)"
          }
        },
        {
          "name": "hordePrestigeIncome",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.05, lvl)"
          }
        }
      ],
      "unlock": "hordeFeature"
    },
    "collection": {
      "dangerousWeapons": {
        "reward": [
          {
            "name": "hordeAttack",
            "type": "mult",
            "value": 1.35
          }
        ]
      },
      "supplyAndSupport": {
        "reward": [
          {
            "name": "hordeHealth",
            "type": "mult",
            "value": 1.35
          },
          {
            "name": "currencyFarmVegetableGain",
            "type": "mult",
            "value": 1.25
          }
        ]
      },
      "againstTheCorruption": {
        "reward": [
          {
            "name": "currencyHordeCorruptedFleshGain",
            "type": "mult",
            "value": 1.5
          }
        ]
      }
    },
    "pack": {
      "rookieOnTheBattlefield": {
        "unlock": "hordeItems",
        "amount": 3,
        "price": 20,
        "content": {
          "HO-0001": 2.6,
          "HO-0002": 0.45,
          "HO-0003": 1.25,
          "HO-0004": 0.92,
          "HO-0005": 1.55,
          "HO-0006": 1.36,
          "HO-0007": 0.6,
          "HO-0008": 0.8,
          "HO-0009": 0.88,
          "HO-0010": 0.4,
          "HO-0011": 0.48,
          "HO-0012": 2.1,
          "HO-0013": 1.6,
          "HO-0014": 0.77
        }
      },
      "spiritualSuccess": {
        "unlock": "hordePrestige",
        "amount": 4,
        "price": 65,
        "content": {
          "HO-0003": 1.25,
          "HO-0004": 0.92,
          "HO-0005": 1.55,
          "HO-0006": 1.36,
          "HO-0009": 0.88,
          "HO-0010": 0.8,
          "HO-0011": 0.96,
          "HO-0012": 2.1,
          "HO-0013": 1.6,
          "HO-0014": 0.77,
          "HO-0015": 1.2,
          "HO-0016": 1.3,
          "HO-0017": 1.8,
          "HO-0018": 1.6,
          "HO-0019": 0.75,
          "HO-0020": 0.84,
          "HO-0021": 1.05,
          "HO-0022": 1.5,
          "HO-0023": 0.43,
          "HO-0024": 0.7,
          "HO-0026": 0.9
        }
      },
      "oldMemories": {
        "unlock": "hordeHeirlooms",
        "amount": 2,
        "price": 50,
        "content": {
          "HO-0007": 1.2,
          "HO-0010": 0.8,
          "HO-0011": 0.96,
          "HO-0019": 1.5,
          "HO-0020": 1.68,
          "HO-0021": 2.1,
          "HO-0022": 3.75,
          "HO-0024": 1.4,
          "HO-0026": 1.8,
          "HO-0027": 1.15,
          "HO-0028": 2,
          "HO-0030": 2.3
        }
      },
      "taintedWorld": {
        "unlock": "hordeItemMastery",
        "amount": 6,
        "price": 225,
        "content": {
          "HO-0023": 0.72,
          "HO-0024": 1.2,
          "HO-0025": 1.3,
          "HO-0026": 1.55,
          "HO-0027": 1.15,
          "HO-0028": 2,
          "HO-0029": 1.1,
          "HO-0030": 2.3,
          "HO-0031": 3.5,
          "HO-0032": 2.1,
          "HO-0033": 0.9,
          "HO-0034": 1.22,
          "HO-0035": 1.58,
          "HO-0036": 1.18,
          "HO-0037": 1.4,
          "HO-0038": 0.5,
          "HO-0039": 0.77,
          "HO-0040": 1.36,
          "HO-0041": 0.22
        }
      }
    },
    "card": {
      "_type": "expression",
      "code": "cardList"
    }
  },
  "js/modules/horde/enemyType.js": {},
  "js/modules/horde/upgradePrestige.js": {},
  "js/modules/horde/upgradePremium.js": {},
  "js/modules/horde/upgrade.js": {},
  "js/modules/horde/trinket.js": {},
  "js/modules/horde/tower.js": {
    "brick": {
      "unlock": "hordeBrickTower",
      "sigils": [
        "bashing",
        "toughness",
        "strength",
        "growing",
        "fury"
      ],
      "statBase": 140,
      "statScaling": 0.25,
      "crowns": 1,
      "heirlooms": [
        "brick"
      ],
      "reward": {
        "50": {
          "type": "unlock",
          "name": "hordeUpgradeRoyalArmor",
          "value": true
        },
        "100": {
          "type": "mult",
          "name": "hordeHealth",
          "value": 1.5
        },
        "150": {
          "type": "mult",
          "name": "currencyHordeMonsterPartCap",
          "value": 1.35
        },
        "200": {
          "type": "base",
          "name": "hordeNostalgia",
          "value": 50
        },
        "300": {
          "type": "unlock",
          "name": "hordeUpgradeRoyalButcher",
          "value": true
        },
        "400": {
          "type": "base",
          "name": "hordeNostalgia",
          "value": 50
        },
        "500": {
          "type": "mult",
          "name": "currencyHordeBoneCap",
          "value": 1.5
        }
      }
    },
    "fire": {
      "unlock": "hordeFireTower",
      "sigils": [
        "magicBolt",
        "fireball",
        "sparks",
        "wisdom",
        "berserk"
      ],
      "statBase": 170,
      "statScaling": 0.3,
      "crowns": 2,
      "heirlooms": [
        "heat"
      ],
      "reward": {
        "50": {
          "type": "unlock",
          "name": "hordeUpgradeRoyalStorage",
          "value": true
        },
        "100": {
          "type": "base",
          "name": "hordeMaxItems",
          "value": 1
        },
        "150": {
          "type": "mult",
          "name": "hordeAttack",
          "value": 1.35
        },
        "200": {
          "type": "base",
          "name": "hordeCritMult",
          "value": 0.2
        },
        "300": {
          "type": "mult",
          "name": "currencyHordeBoneCap",
          "value": 1.5
        },
        "400": {
          "type": "mult",
          "name": "currencyHordeMonsterPartCap",
          "value": 1.35
        }
      }
    },
    "ice": {
      "unlock": "hordeIceTower",
      "sigils": [
        "health",
        "resistance",
        "cold",
        "angelic",
        "iceGiant"
      ],
      "statBase": 200,
      "statScaling": 0.35,
      "crowns": 3,
      "heirlooms": [
        "ice"
      ],
      "reward": {
        "50": {
          "type": "mult",
          "name": "currencyHordeBoneGain",
          "value": 1.5
        },
        "100": {
          "type": "unlock",
          "name": "hordeUpgradeRoyalCrypt",
          "value": true
        },
        "150": {
          "type": "mult",
          "name": "currencyHordeSoulCorruptedGain",
          "value": 1.2
        },
        "200": {
          "type": "base",
          "name": "hordeMaxSacrifice",
          "value": 1
        },
        "300": {
          "type": "mult",
          "name": "hordeHealth",
          "value": 1.5
        }
      }
    },
    "danger": {
      "unlock": "hordeDangerTower",
      "sigils": [
        "executing",
        "focus",
        "nuke",
        "precision",
        "power"
      ],
      "statBase": 245,
      "statScaling": 0.4,
      "crowns": 5,
      "heirlooms": [
        "crystal"
      ],
      "reward": {
        "50": {
          "type": "unlock",
          "name": "hordeUpgradeRoyalSecret",
          "value": true
        },
        "100": {
          "type": "mult",
          "name": "hordeAttack",
          "value": 1.5
        },
        "150": {
          "type": "base",
          "name": "currencyHordeMysticalShardCap",
          "value": 5
        },
        "200": {
          "type": "mult",
          "name": "hordeAttack",
          "value": 1.5
        },
        "300": {
          "type": "base",
          "name": "currencyHordeMysticalShardCap",
          "value": 5
        }
      }
    },
    "toxic": {
      "unlock": "hordeToxicTower",
      "sigils": [
        "toxic",
        "foulBreath",
        "drain",
        "spitting",
        "sharp"
      ],
      "statBase": 290,
      "statScaling": 0.45,
      "crowns": 8,
      "heirlooms": [
        "vitality"
      ],
      "reward": {
        "50": {
          "type": "base",
          "name": "hordeMaxSacrifice",
          "value": 1
        },
        "100": {
          "type": "mult",
          "name": "hordeHealth",
          "value": 1.5
        },
        "150": {
          "type": "mult",
          "name": "hordeHealing",
          "value": 1.2
        },
        "200": {
          "type": "mult",
          "name": "hordeAttack",
          "value": 1.5
        }
      }
    }
  },
  "js/modules/horde/cardList.js": {},
  "js/modules/horde/sigil.js": {},
  "js/modules/horde/sigil_boss.js": {},
  "js/modules/horde/relic.js": {
    "forgottenShield": {
      "icon": "mdi-shield-sun",
      "color": "pale-light-blue",
      "effect": [
        {
          "name": "horde_resilience",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "horde_rest",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "burningSkull": {
      "icon": "mdi-skull",
      "color": "orange-red",
      "effect": [
        {
          "name": "horde_boneBag",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "horde_anger",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "energyDrink": {
      "icon": "mdi-bottle-soda",
      "color": "yellow",
      "effect": [
        {
          "name": "currencyHordeMonsterPartGain",
          "type": "base",
          "value": 0.5
        },
        {
          "name": "horde_monsterSoup",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "luckyDice": {
      "icon": "mdi-dice-6",
      "color": "light-green",
      "effect": [
        {
          "name": "horde_luckyStrike",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "dumbbell": {
      "icon": "mdi-dumbbell",
      "color": "indigo",
      "effect": [
        {
          "name": "horde_training",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "bandage": {
      "icon": "mdi-bandage",
      "color": "pale-pink",
      "effect": [
        {
          "name": "horde_thickSkin",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "newBackpack": {
      "icon": "mdi-bag-personal",
      "color": "pale-orange",
      "effect": [
        {
          "name": "horde_hoarding",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "horde_plunderSecret",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "ultimateGuide": {
      "icon": "mdi-book-multiple",
      "color": "brown",
      "effect": [
        {
          "name": "horde_stabbingGuide",
          "type": "keepUpgrade",
          "value": true
        },
        {
          "name": "horde_dodgingGuide",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    },
    "crackedSafe": {
      "icon": "mdi-safe-square",
      "color": "darker-grey",
      "effect": [
        {
          "name": "horde_looting",
          "type": "keepUpgrade",
          "value": true
        }
      ]
    }
  },
  "js/modules/horde/boss.js": {
    "ohilio_guard1": {
      "attack": 0.15,
      "health": 150,
      "textShadow": "1px 1px 2px palevioletred, 0 0 25px lightpink, 0 0 5px pink",
      "sigil": {
        "shotgun_gun": 3,
        "war_bandage": 3
      },
      "stats": {}
    },
    "ohilio_guard2": {
      "attack": 0.6125,
      "health": 45,
      "textShadow": "1px 1px 2px palevioletred, 0 0 25px lightpink, 0 0 5px pink",
      "sigil": {
        "rifle_gun": 3,
        "war_grenade": 2
      },
      "stats": {}
    },
    "ohilio": {
      "attack": 0.01,
      "health": 0.01,
      "textShadow": "1px 1px 2px palevioletred, 0 0 25px lightpink, 0 0 5px pink",
      "sigil": {
        "ohilio_megagun": 1
      },
      "stats": {}
    },
    "mina": {
      "attack": 0.5,
      "health": 87.5,
      "textShadow": "1px 1px 2px palevioletred, 0 0 25px lightpink, 0 0 5px pink",
      "sigil": {
        "mina_charm": 1
      },
      "stats": {
        "toxic_base": 0.03,
        "execute_base": 0.2
      }
    },
    "chriz1": {
      "attack": 0.375,
      "health": 42.5,
      "textShadow": "1px 1px 2px blue",
      "sigil": {
        "chriz_magicMissile": 1,
        "chriz_fireball": 1,
        "chriz_iceBlast": 1,
        "chriz_lightningStrike": 1,
        "chriz_heal": 1
      },
      "stats": {
        "magicConversion_base": 4,
        "physicTaken_mult": 0.01,
        "magicTaken_mult": 1.75
      }
    },
    "chriz2": {
      "attack": 0.5,
      "health": 50,
      "textShadow": "1px 1px 2px red",
      "sigil": {},
      "stats": {
        "critChance_base": 0.35,
        "critMult_base": 3,
        "physicTaken_mult": 1.75,
        "magicTaken_mult": 0.01
      }
    }
  },
  "js/modules/horde/heirloom.js": {
    "power": {
      "color": "red",
      "icon": "mdi-sword",
      "effect": [
        {
          "name": "hordeAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.2 + 1"
          }
        }
      ]
    },
    "fortitude": {
      "color": "green",
      "icon": "mdi-heart",
      "effect": [
        {
          "name": "hordeHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.2 + 1"
          }
        }
      ]
    },
    "wealth": {
      "color": "amber",
      "icon": "mdi-circle-multiple",
      "effect": [
        {
          "name": "currencyHordeBoneGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.15 + 1"
          }
        },
        {
          "name": "currencyHordeMonsterPartGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ]
    },
    "spirit": {
      "minZone": 40,
      "color": "purple",
      "icon": "mdi-ghost",
      "effect": [
        {
          "name": "currencyHordeSoulCorruptedGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.06 + 1"
          }
        }
      ]
    },
    "sharpsight": {
      "minZone": 50,
      "color": "cyan",
      "icon": "mdi-magnify",
      "effect": [
        {
          "name": "hordeItemChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ]
    },
    "reaping": {
      "minZone": 60,
      "color": "pink",
      "icon": "mdi-skull",
      "effect": [
        {
          "name": "currencyHordeCorruptedFleshGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.03"
          }
        }
      ]
    },
    "remembrance": {
      "minZone": 70,
      "color": "deep-purple",
      "icon": "mdi-grave-stone",
      "effect": [
        {
          "name": "currencyHordeSoulCorruptedCap",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ]
    },
    "holding": {
      "minZone": 80,
      "color": "brown",
      "icon": "mdi-dresser",
      "effect": [
        {
          "name": "currencyHordeBoneCap",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        },
        {
          "name": "currencyHordeMonsterPartCap",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.02 + 1"
          }
        }
      ]
    },
    "expertise": {
      "minZone": 100,
      "color": "light-blue",
      "icon": "mdi-book-open-variant",
      "effect": [
        {
          "name": "hordeItemMasteryGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.01 + 1"
          }
        }
      ]
    },
    "mystery": {
      "minZone": 120,
      "color": "teal",
      "icon": "mdi-help-box",
      "effect": [
        {
          "name": "hordeShardChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.001 + 1"
          }
        }
      ]
    },
    "brick": {
      "minZone": null,
      "color": "cherry",
      "icon": "mdi-wall",
      "effect": [
        {
          "name": "currencyHordeBoneGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        },
        {
          "name": "hordeCritMult",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => (Math.pow(lvl / 10 + 1, 0.4) - 1) * 0.01"
          }
        }
      ]
    },
    "heat": {
      "minZone": null,
      "color": "orange-red",
      "icon": "mdi-fire",
      "effect": [
        {
          "name": "hordeAttack",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        },
        {
          "name": "hordeCritChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.log(lvl / 10 + 1) * 0.008"
          }
        }
      ]
    },
    "ice": {
      "minZone": null,
      "color": "skyblue",
      "icon": "mdi-snowflake-variant",
      "effect": [
        {
          "name": "hordeHealth",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        },
        {
          "name": "hordeRecovery",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.log(lvl / 10 + 1) * 0.003"
          }
        }
      ]
    },
    "crystal": {
      "minZone": null,
      "color": "indigo",
      "icon": "mdi-billiards-rack",
      "effect": [
        {
          "name": "hordeShardChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.001 + 1"
          }
        },
        {
          "name": "currencyHordeMysticalShardCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.floor(Math.log(lvl + 2))"
          }
        }
      ]
    },
    "vitality": {
      "minZone": null,
      "color": "light-green",
      "icon": "mdi-heart-multiple",
      "effect": [
        {
          "name": "currencyHordeBoneCap",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.001 + 1"
          }
        },
        {
          "name": "hordeHealing",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.log(lvl + 1) * 0.1 + 1"
          }
        }
      ]
    }
  },
  "js/modules/horde/achievement.js": {
    "maxZone": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_maxZone.total"
      },
      "default": 1,
      "cap": 30,
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl * 10 + 10"
      },
      "relic": {
        "7": "ultimateGuide",
        "11": "crackedSafe"
      }
    },
    "maxZoneSpeedrun": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_maxZoneSpeedrun.total"
      },
      "default": 1,
      "cap": 10,
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl * 5 + 10"
      },
      "relic": {
        "8": "dumbbell"
      }
    },
    "totalDamage": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_totalDamage.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(lvl * 250 + 7500, lvl) * buildNum(10, 'K')"
      },
      "relic": {
        "6": "newBackpack"
      }
    },
    "maxDamage": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_maxDamage.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(lvl * 250 + 7500, lvl) * 10"
      },
      "relic": {
        "3": "burningSkull"
      }
    },
    "bone": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_bone.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(2, getSequence(10, lvl) - 10) * buildNum(1, 'M')"
      },
      "relic": {
        "2": "forgottenShield"
      }
    },
    "monsterPart": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_monsterPart.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(16, lvl) * 50"
      },
      "relic": {
        "3": "energyDrink",
        "5": "bandage"
      }
    },
    "soulCorrupted": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_soulCorrupted.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(7 + lvl, lvl) * 1000"
      },
      "relic": {
        "4": "luckyDice"
      }
    },
    "maxCorruptionKill": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_maxCorruptionKill.total"
      },
      "display": "percent",
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl + 1"
      }
    },
    "maxMastery": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_maxMastery.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl + 1"
      }
    },
    "totalMastery": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_totalMastery.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.round((lvl + 1) * 25 * (lvl * 0.2 + 1))"
      }
    },
    "unlucky": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.horde_unlucky.total"
      },
      "secret": true,
      "display": "boolean",
      "cap": 1,
      "milestones": {
        "_type": "formula",
        "code": "() => 1"
      }
    }
  },
  "js/modules/horde/upgrade2.js": {},
  "js/modules/horde/area/loveIsland.js": {
    "unlock": "hordeAreaLoveIsland",
    "icon": "mdi-heart-multiple",
    "color": "babypink",
    "zones": {
      "sign_4": {
        "x": -3.25,
        "y": 5.5,
        "unlockedBy": null,
        "type": "sign"
      },
      "1": {
        "x": -0.7,
        "y": 5,
        "unlockedBy": null,
        "type": "regular",
        "difficulty": 78,
        "enemyType": [
          "seal",
          "guineaPig"
        ]
      },
      "2": {
        "x": -3.5,
        "y": 2.5,
        "unlockedBy": "1",
        "type": "regular",
        "difficulty": 81,
        "enemyType": [
          "seal",
          "guineaPig",
          "puppy"
        ]
      },
      "3": {
        "x": -6.25,
        "y": -0.25,
        "unlockedBy": "2",
        "type": "regular",
        "difficulty": 84,
        "enemyType": [
          "guineaPig",
          "puppy"
        ]
      },
      "4": {
        "x": -7,
        "y": -3.5,
        "unlockedBy": "3",
        "type": "regular",
        "difficulty": 87,
        "enemyType": [
          "puppy",
          "rabbit"
        ]
      },
      "5": {
        "x": -5.25,
        "y": -5.5,
        "unlockedBy": "4",
        "type": "regular",
        "difficulty": 90,
        "enemyType": [
          "guineaPig",
          "puppy",
          "rabbit"
        ]
      },
      "6": {
        "x": -3,
        "y": -6,
        "unlockedBy": "5",
        "type": "regular",
        "difficulty": 93,
        "enemyType": [
          "rabbit",
          "kitten"
        ]
      },
      "7": {
        "x": -1,
        "y": -4.5,
        "unlockedBy": "6",
        "type": "regular",
        "difficulty": 96,
        "enemyType": [
          "seal",
          "rabbit",
          "puppy",
          "kitten"
        ]
      },
      "8": {
        "x": 0,
        "y": -2.5,
        "unlockedBy": "7",
        "type": "regular",
        "difficulty": 99,
        "enemyType": [
          "puppy",
          "kitten"
        ]
      },
      "9": {
        "x": 1,
        "y": -4.5,
        "unlockedBy": "8",
        "type": "regular",
        "difficulty": 102,
        "enemyType": [
          "seal",
          "guineaPig",
          "kitten"
        ]
      },
      "10": {
        "x": 3,
        "y": -6,
        "unlockedBy": "9",
        "type": "regular",
        "difficulty": 105,
        "enemyType": [
          "puppy",
          "rabbit",
          "kitten"
        ]
      },
      "11": {
        "x": 5.25,
        "y": -5.5,
        "unlockedBy": "10",
        "type": "regular",
        "difficulty": 108,
        "enemyType": [
          "kitten",
          "piglet"
        ]
      },
      "12": {
        "x": 7,
        "y": -3.5,
        "unlockedBy": "11",
        "type": "regular",
        "difficulty": 111,
        "enemyType": [
          "piglet",
          "guineaPig"
        ]
      },
      "13": {
        "x": 6.25,
        "y": -0.25,
        "unlockedBy": "12",
        "type": "regular",
        "difficulty": 114,
        "enemyType": [
          "seal",
          "panda"
        ]
      },
      "14": {
        "x": 3.5,
        "y": 2.5,
        "unlockedBy": "13",
        "type": "regular",
        "difficulty": 117,
        "enemyType": [
          "piglet",
          "panda",
          "koala"
        ]
      },
      "boss_1": {
        "x": 0,
        "y": 3.6,
        "unlockedBy": "14",
        "type": "boss",
        "difficulty": 120,
        "boss": [
          "mina"
        ],
        "reward": "hordeEndOfContent"
      },
      "endless": {
        "x": 0.7,
        "y": 5,
        "unlockedBy": "14",
        "type": "endless",
        "difficulty": 120,
        "enemyType": [
          "seal",
          "guineaPig",
          "puppy",
          "rabbit",
          "kitten",
          "piglet",
          "panda",
          "koala"
        ]
      }
    },
    "decoration": [
      {
        "x": 0,
        "y": 3.75,
        "rotate": 0,
        "icon": "mdi-seat",
        "size": 2
      },
      {
        "x": -8.5,
        "y": 1.2,
        "rotate": 0,
        "icon": "mdi-home-variant",
        "size": 3
      },
      {
        "x": -8.5,
        "y": 1.9,
        "rotate": -20,
        "icon": "mdi-dog",
        "size": 0.75
      },
      {
        "x": -6,
        "y": 2.2,
        "rotate": 0,
        "icon": "mdi-dog-side",
        "size": 1
      },
      {
        "x": -8,
        "y": 3.2,
        "rotate": -30,
        "icon": "mdi-bone",
        "size": 0.6
      },
      {
        "x": -7.6,
        "y": 3.5,
        "rotate": 20,
        "icon": "mdi-bone",
        "size": 0.5
      },
      {
        "x": -7.9,
        "y": -1,
        "rotate": 70,
        "icon": "mdi-tennis-ball",
        "size": 0.4
      },
      {
        "x": 0.4,
        "y": -6.3,
        "rotate": 0,
        "icon": "mdi-inbox",
        "size": 2
      },
      {
        "x": 0.4,
        "y": -6.45,
        "rotate": 0,
        "icon": "mdi-cat",
        "size": 1
      },
      {
        "x": -7.5,
        "y": -5.7,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 1.25
      },
      {
        "x": -7.4,
        "y": -6.35,
        "rotate": 15,
        "icon": "mdi-rabbit-variant",
        "size": 0.7
      },
      {
        "x": -8.7,
        "y": -4,
        "rotate": 0,
        "icon": "mdi-rabbit",
        "size": 0.8
      },
      {
        "x": -8,
        "y": -3.83,
        "rotate": 70,
        "icon": "mdi-carrot",
        "size": 0.6
      },
      {
        "x": 6.6,
        "y": -6.1,
        "rotate": 0,
        "icon": "mdi-pig-variant",
        "size": 0.6
      },
      {
        "x": 8.5,
        "y": -6.4,
        "rotate": 0,
        "icon": "mdi-pig-variant",
        "size": 0.65
      },
      {
        "x": 7.7,
        "y": -5.5,
        "rotate": 0,
        "icon": "mdi-pig-variant",
        "size": 0.8
      },
      {
        "x": 8.4,
        "y": -5.33,
        "rotate": 70,
        "icon": "mdi-carrot",
        "size": 0.6
      },
      {
        "x": 7,
        "y": 3.1,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 2.5
      },
      {
        "x": 7.4,
        "y": 2,
        "rotate": 40,
        "icon": "mdi-koala",
        "size": 1
      },
      {
        "x": 8.1,
        "y": -1,
        "rotate": 0,
        "icon": "mdi-panda",
        "size": 1.2
      },
      {
        "x": 8.1,
        "y": 0,
        "rotate": 0,
        "icon": "mdi-package",
        "size": 1.5
      }
    ]
  },
  "js/modules/horde/area/monkeyJungle.js": {
    "unlock": "hordeAreaMonkeyJungle",
    "icon": "mdi-temple-hindu",
    "color": "teal",
    "zones": {
      "1": {
        "x": 8,
        "y": -2,
        "unlockedBy": null,
        "type": "regular",
        "difficulty": 33,
        "enemyType": [
          "strongMonkey",
          "monkeyWizard_1"
        ]
      },
      "2": {
        "x": 5,
        "y": -4,
        "unlockedBy": "1",
        "type": "regular",
        "difficulty": 36,
        "enemyType": [
          "strongMonkey",
          "monkeyWizard_1"
        ]
      },
      "3": {
        "x": 3,
        "y": -5.5,
        "unlockedBy": "2",
        "type": "regular",
        "difficulty": 38,
        "enemyType": [
          "monkeyWizard_1",
          "monkeyWizard_2",
          "monkeyWizard_3",
          "monkeyDefender"
        ]
      },
      "4": {
        "x": 2,
        "y": -3,
        "unlockedBy": "2",
        "type": "regular",
        "difficulty": 39,
        "enemyAmount": 150,
        "enemyType": [
          "strongMonkey",
          "angryMonkey",
          "dartMonkey",
          "monkeyMonk"
        ]
      },
      "5": {
        "x": 0,
        "y": -5,
        "unlockedBy": "3",
        "type": "regular",
        "difficulty": 40,
        "enemyType": [
          "monkeyWizard_1",
          "monkeyWizard_2",
          "monkeyWizard_3",
          "monkeyDefender"
        ]
      },
      "6": {
        "x": -2,
        "y": -3.5,
        "unlockedBy": [
          "4",
          "5"
        ],
        "type": "regular",
        "difficulty": 43,
        "enemyType": [
          "angryMonkey",
          "monkeyWizard_2"
        ]
      },
      "7": {
        "x": -5,
        "y": -4,
        "unlockedBy": "6",
        "type": "regular",
        "difficulty": 46,
        "enemyType": [
          "dartMonkey",
          "monkeyWizard_3"
        ]
      },
      "8": {
        "x": -6,
        "y": -0.5,
        "unlockedBy": "7",
        "type": "regular",
        "difficulty": 49,
        "enemyType": [
          "strongMonkey",
          "angryMonkey",
          "monkeyWizard_1",
          "monkeyWizard_2"
        ]
      },
      "9": {
        "x": -8,
        "y": 1,
        "unlockedBy": "8",
        "type": "regular",
        "difficulty": 51,
        "enemyAmount": 150,
        "enemyType": [
          "strongMonkey",
          "angryMonkey",
          "dartMonkey",
          "monkeyMonk"
        ]
      },
      "10": {
        "x": -4,
        "y": -1.5,
        "unlockedBy": "8",
        "type": "regular",
        "difficulty": 52,
        "enemyType": [
          "monkeyWizard_1",
          "monkeyWizard_2",
          "monkeyWizard_3",
          "monkeyDefender"
        ]
      },
      "11": {
        "x": -7.5,
        "y": 4,
        "unlockedBy": "9",
        "type": "regular",
        "difficulty": 56,
        "enemyAmount": 50,
        "enemyType": [
          "strongMonkey",
          "angryMonkey",
          "dartMonkey",
          "monkeyMonk"
        ]
      },
      "12": {
        "x": -2.5,
        "y": 1,
        "unlockedBy": "10",
        "type": "regular",
        "difficulty": 55,
        "enemyType": [
          "monkeyWizard_1",
          "monkeyWizard_2",
          "monkeyWizard_3",
          "monkeyDefender"
        ]
      },
      "13": {
        "x": -4,
        "y": 3,
        "unlockedBy": [
          "11",
          "12"
        ],
        "type": "regular",
        "difficulty": 58,
        "enemyAmount": 150,
        "enemyType": [
          "angryMonkey",
          "dartMonkey",
          "monkeyWizard_2",
          "monkeyWizard_3"
        ]
      },
      "14": {
        "x": -0.5,
        "y": 4,
        "unlockedBy": "13",
        "type": "regular",
        "difficulty": 62,
        "enemyType": [
          "strongMonkey",
          "dartMonkey",
          "monkeyWizard_1",
          "monkeyWizard_3"
        ]
      },
      "15": {
        "x": 2,
        "y": 6,
        "unlockedBy": "14",
        "type": "regular",
        "difficulty": 64,
        "enemyType": [
          "strongMonkey",
          "angryMonkey",
          "dartMonkey",
          "monkeyMonk"
        ]
      },
      "16": {
        "x": 3.5,
        "y": 1.5,
        "unlockedBy": "14",
        "type": "regular",
        "difficulty": 66,
        "enemyType": [
          "monkeyWizard_1",
          "monkeyWizard_2",
          "monkeyWizard_3",
          "monkeyDefender"
        ]
      },
      "17": {
        "x": 5,
        "y": 5,
        "unlockedBy": "15",
        "type": "regular",
        "difficulty": 67,
        "enemyType": [
          "strongMonkey",
          "angryMonkey",
          "dartMonkey",
          "monkeyMonk"
        ]
      },
      "18": {
        "x": 7.5,
        "y": 2,
        "unlockedBy": [
          "16",
          "17"
        ],
        "type": "regular",
        "difficulty": 69,
        "enemyType": [
          "angryMonkey",
          "dartMonkey",
          "monkeyWizard_2",
          "monkeyWizard_3"
        ]
      },
      "19": {
        "x": 2.5,
        "y": -0.5,
        "unlockedBy": "18",
        "type": "regular",
        "difficulty": 72,
        "enemyType": [
          "strongMonkey",
          "angryMonkey",
          "dartMonkey",
          "monkeyWizard_1",
          "monkeyWizard_2",
          "monkeyWizard_3"
        ]
      },
      "boss_1": {
        "x": -1,
        "y": -1.5,
        "unlockedBy": "19",
        "type": "boss",
        "difficulty": 75,
        "boss": [
          "chriz1",
          "chriz2"
        ],
        "reward": "hordeAreaLoveIsland"
      },
      "endless": {
        "x": 4,
        "y": -2,
        "unlockedBy": "19",
        "type": "endless",
        "difficulty": 75,
        "enemyType": [
          "strongMonkey",
          "angryMonkey",
          "dartMonkey",
          "monkeyWizard_1",
          "monkeyWizard_2",
          "monkeyWizard_3"
        ]
      }
    },
    "decoration": [
      {
        "x": 8.2,
        "y": -3.4,
        "rotate": 0,
        "icon": "mdi-tent",
        "size": 2
      },
      {
        "x": 9,
        "y": -1.4,
        "rotate": 0,
        "icon": "mdi-campfire",
        "size": 1
      },
      {
        "x": 4.8,
        "y": -6,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.2
      },
      {
        "x": 5.6,
        "y": -6.4,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 1
      },
      {
        "x": 7,
        "y": -5.5,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.8
      },
      {
        "x": 7.3,
        "y": -6.25,
        "rotate": 0,
        "icon": "mdi-koala",
        "size": 0.5
      },
      {
        "x": 8.1,
        "y": -6.6,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 9.3,
        "y": -6.2,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.4
      },
      {
        "x": 8.9,
        "y": -5.7,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 5.8,
        "y": -4.4,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 1,
        "y": -4,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 1
      },
      {
        "x": 2.2,
        "y": -4.3,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1
      },
      {
        "x": 1.5,
        "y": -6,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 2.6,
        "y": -6.3,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": -5,
        "y": -6.1,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.6
      },
      {
        "x": -3,
        "y": -5.5,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 2.5
      },
      {
        "x": -3.85,
        "y": -5.55,
        "rotate": 0,
        "icon": "mdi-spider-thread",
        "size": 0.5
      },
      {
        "x": -1.25,
        "y": -5.8,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 1.1
      },
      {
        "x": -9.5,
        "y": -6.5,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 1
      },
      {
        "x": -7,
        "y": -6,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 1.45
      },
      {
        "x": -4,
        "y": -4.2,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": -7.2,
        "y": -4.6,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": -8.5,
        "y": -5,
        "rotate": 0,
        "icon": "mdi-elephant",
        "size": 1.1
      },
      {
        "x": -7.4,
        "y": -3.5,
        "rotate": 0,
        "icon": "mdi-elephant",
        "size": 1.25
      },
      {
        "x": -9,
        "y": -4.2,
        "rotate": 0,
        "icon": "mdi-elephant",
        "size": 0.8
      },
      {
        "x": -8.5,
        "y": -3.2,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": -9.4,
        "y": -2.4,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.3
      },
      {
        "x": -9.7,
        "y": -0.7,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 1.1
      },
      {
        "x": -7.8,
        "y": -1.2,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 1.3
      },
      {
        "x": -6.1,
        "y": -2.7,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 1.2
      },
      {
        "x": -6.35,
        "y": -1,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": -8.9,
        "y": 0.8,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.5
      },
      {
        "x": -9.5,
        "y": 2,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1
      },
      {
        "x": -8.7,
        "y": 2.5,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": -8.3,
        "y": 3.4,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.2
      },
      {
        "x": -9.7,
        "y": 3.7,
        "rotate": 0,
        "icon": "mdi-tortoise",
        "size": 0.5
      },
      {
        "x": -5.5,
        "y": 1.5,
        "rotate": 0,
        "icon": "mdi-volcano",
        "size": 2
      },
      {
        "x": -6.7,
        "y": 1,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 1
      },
      {
        "x": -6.6,
        "y": 2.7,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": -4.4,
        "y": -0.1,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.2
      },
      {
        "x": -3.7,
        "y": 1.3,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1
      },
      {
        "x": -4,
        "y": -2.5,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.35
      },
      {
        "x": -2.8,
        "y": -2.8,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": -0.5,
        "y": -1.8,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 0.8
      },
      {
        "x": -1,
        "y": -2.3,
        "rotate": 0,
        "icon": "mdi-tree",
        "size": 0.8
      },
      {
        "x": -1.5,
        "y": -1.9,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 0.8
      },
      {
        "x": -1.7,
        "y": -1.2,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 0.8
      },
      {
        "x": -1.2,
        "y": -0.7,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 0.8
      },
      {
        "x": -0.6,
        "y": -0.9,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.5
      },
      {
        "x": 1.4,
        "y": -2.1,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 3.8,
        "y": -0.9,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 1.7,
        "y": 1,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.2
      },
      {
        "x": -1,
        "y": 2.1,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1
      },
      {
        "x": -0.5,
        "y": 2.6,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 4,
        "y": 2.8,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.3
      },
      {
        "x": 1.2,
        "y": 3.9,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 2.75,
        "y": 4.6,
        "rotate": 0,
        "icon": "mdi-kangaroo",
        "size": 0.75
      },
      {
        "x": 6.6,
        "y": 0.8,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 4.7,
        "y": 6,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.1
      },
      {
        "x": 8.6,
        "y": 3.5,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.6
      },
      {
        "x": 7.3,
        "y": 4.2,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": 8.1,
        "y": 6.3,
        "rotate": 0,
        "icon": "mdi-snake",
        "size": 0.5
      },
      {
        "x": 9.5,
        "y": 5.6,
        "rotate": 0,
        "icon": "mdi-grass",
        "size": 0.6
      },
      {
        "x": -9.9,
        "y": 6.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -9.9,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -9.05,
        "y": 6.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -9.05,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -8.2,
        "y": 6,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -8.2,
        "y": 6.9,
        "rotate": 0,
        "icon": "mdi-shark-fin",
        "size": 1
      },
      {
        "x": -7.35,
        "y": 6.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -7.35,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -7.35,
        "y": 5.75,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -6.5,
        "y": 6.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -6.5,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -6.5,
        "y": 5.75,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -5.65,
        "y": 6.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -5.65,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -5.65,
        "y": 5.75,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -5.65,
        "y": 5.5,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -4.8,
        "y": 6.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -4.8,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -4.8,
        "y": 5.75,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -4.8,
        "y": 5.5,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -3.95,
        "y": 6.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.95,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.95,
        "y": 5.75,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -3.95,
        "y": 5.5,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -3.1,
        "y": 6.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.1,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.1,
        "y": 5.75,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -2.25,
        "y": 6.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -2.25,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -1.4,
        "y": 7,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -1.4,
        "y": 6.5,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -0.55,
        "y": 7.25,
        "rotate": 0,
        "icon": "mdi-wave",
        "size": 1
      },
      {
        "x": -9.2,
        "y": 5.45,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1
      },
      {
        "x": -5,
        "y": 4.85,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.2
      },
      {
        "x": -3.2,
        "y": 5.2,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1
      },
      {
        "x": -0.4,
        "y": 6.6,
        "rotate": 0,
        "icon": "mdi-palm-tree",
        "size": 1.1
      }
    ]
  },
  "js/modules/horde/area/warzone.js": {
    "unlock": null,
    "icon": "mdi-sign-caution",
    "color": "orange",
    "zones": {
      "1": {
        "x": -9.5,
        "y": 1.5,
        "unlockedBy": null,
        "type": "regular",
        "difficulty": 0,
        "enemyType": [
          "soldier_1",
          "officer_1"
        ]
      },
      "2": {
        "x": -8,
        "y": -1,
        "unlockedBy": "1",
        "type": "regular",
        "difficulty": 3,
        "enemyType": [
          "soldier_1",
          "officer_1"
        ]
      },
      "3": {
        "x": -5,
        "y": -2,
        "unlockedBy": "2",
        "type": "regular",
        "difficulty": 6,
        "enemyType": [
          "soldier_1",
          "soldier_2",
          "soldier_3",
          "officer_1",
          "officer_2",
          "officer_3"
        ]
      },
      "4": {
        "x": -3,
        "y": -4,
        "unlockedBy": "3",
        "type": "regular",
        "difficulty": 9,
        "enemyType": [
          "soldier_1",
          "soldier_2",
          "soldier_3",
          "officer_1",
          "officer_2",
          "officer_3"
        ]
      },
      "sign_1": {
        "x": -4.25,
        "y": -5.25,
        "unlockedBy": "4",
        "type": "sign"
      },
      "5": {
        "x": -1,
        "y": -5,
        "unlockedBy": "4",
        "type": "regular",
        "difficulty": 12,
        "enemyType": [
          "soldier_1",
          "soldier_2",
          "soldier_3",
          "hunter"
        ]
      },
      "6": {
        "x": 4,
        "y": -4.5,
        "unlockedBy": "5",
        "type": "regular",
        "difficulty": 15,
        "enemyType": [
          "soldier_1",
          "soldier_2",
          "soldier_3",
          "officer_1"
        ]
      },
      "7": {
        "x": 6,
        "y": -2,
        "unlockedBy": "6",
        "type": "regular",
        "difficulty": 18,
        "enemyType": [
          "officer_1",
          "officer_2",
          "officer_3",
          "sniper"
        ]
      },
      "sign_2": {
        "x": 7.5,
        "y": -2.5,
        "unlockedBy": "7",
        "type": "sign"
      },
      "8": {
        "x": 7,
        "y": 1.5,
        "unlockedBy": "7",
        "type": "regular",
        "difficulty": 21,
        "enemyType": [
          "officer_1",
          "officer_2",
          "officer_3",
          "soldier_1"
        ]
      },
      "9": {
        "x": 5.5,
        "y": 4,
        "unlockedBy": "8",
        "type": "regular",
        "difficulty": 24,
        "enemyType": [
          "soldier_1",
          "soldier_2",
          "soldier_3",
          "officer_1",
          "officer_2",
          "officer_3"
        ]
      },
      "10": {
        "x": 2,
        "y": 2,
        "unlockedBy": "9",
        "type": "regular",
        "difficulty": 27,
        "enemyType": [
          "soldier_1",
          "officer_1",
          "hunter",
          "sniper"
        ]
      },
      "sign_3": {
        "x": 2.5,
        "y": 0.5,
        "unlockedBy": "10",
        "type": "sign"
      },
      "boss_1": {
        "x": 0,
        "y": 0,
        "unlockedBy": "10",
        "type": "boss",
        "difficulty": 30,
        "boss": [
          "ohilio_guard1",
          "ohilio_guard2",
          "ohilio"
        ],
        "reward": "hordeAreaMonkeyJungle"
      },
      "endless": {
        "x": -1,
        "y": 5,
        "unlockedBy": "10",
        "type": "endless",
        "difficulty": 30,
        "enemyType": [
          "soldier_1",
          "soldier_2",
          "soldier_3",
          "officer_1",
          "officer_2",
          "officer_3",
          "hunter",
          "sniper"
        ]
      }
    },
    "decoration": [
      {
        "x": 0,
        "y": -0.5,
        "rotate": 0,
        "icon": "mdi-tent",
        "size": 3
      },
      {
        "x": -8,
        "y": 5,
        "rotate": 0,
        "icon": "mdi-forest",
        "size": 3
      },
      {
        "x": -6.5,
        "y": 3,
        "rotate": 0,
        "icon": "mdi-forest",
        "size": 2.25
      },
      {
        "x": 4,
        "y": -2,
        "rotate": 0,
        "icon": "mdi-pine-tree-variant",
        "size": 1.9
      },
      {
        "x": -2,
        "y": -5.5,
        "rotate": 0,
        "icon": "mdi-truck-cargo-container",
        "size": 1.2
      },
      {
        "x": -8,
        "y": 1,
        "rotate": 0,
        "icon": "mdi-flag-variant",
        "size": 1.75
      },
      {
        "x": -6,
        "y": -2.2,
        "rotate": 160,
        "icon": "mdi-pistol",
        "size": 0.75
      },
      {
        "x": -5,
        "y": -2.5,
        "rotate": 110,
        "icon": "mdi-magazine-pistol",
        "size": 0.5
      },
      {
        "x": 1.5,
        "y": -4.75,
        "rotate": 0,
        "icon": "mdi-bridge",
        "size": 1.5
      },
      {
        "x": 6.5,
        "y": -2.6,
        "rotate": 80,
        "icon": "mdi-magazine-rifle",
        "size": 0.5
      },
      {
        "x": 6.5,
        "y": 5,
        "rotate": 0,
        "icon": "mdi-truck",
        "size": 1.3
      },
      {
        "x": 5.55,
        "y": 5.25,
        "rotate": 270,
        "icon": "mdi-ammunition",
        "size": 0.5
      },
      {
        "x": 5.6,
        "y": 4.85,
        "rotate": 0,
        "icon": "mdi-ammunition",
        "size": 0.45
      },
      {
        "x": 5.1,
        "y": 5.1,
        "rotate": 20,
        "icon": "mdi-ammunition",
        "size": 0.7
      },
      {
        "x": 1.9,
        "y": -7.15,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": 1.65,
        "y": -6.4,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": 1.5,
        "y": -5.65,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": 1.5,
        "y": -4,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": 1.3,
        "y": -3.25,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": 0.9,
        "y": -2.5,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": 0,
        "y": -2.1,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -0.9,
        "y": -2.3,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -1.8,
        "y": -2.2,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -2.7,
        "y": -1.8,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.2,
        "y": -1.05,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.5,
        "y": -0.4,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.6,
        "y": 0.35,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.7,
        "y": 1.1,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.4,
        "y": 1.85,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.2,
        "y": 2.6,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.5,
        "y": 3.35,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -3.6,
        "y": 4.1,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -4,
        "y": 4.85,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -4.5,
        "y": 5.6,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -4.8,
        "y": 6.35,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      },
      {
        "x": -4.9,
        "y": 7.1,
        "rotate": 0,
        "icon": "mdi-waves",
        "size": 1
      }
    ]
  },
  "js/modules/horde/fighterClass/pirate.js": {},
  "js/modules/horde/fighterClass/scholar.js": {
    "unlock": "hordeClassScholar",
    "icon": "mdi-school",
    "baseStats": {
      "attack": 2,
      "health": 250
    },
    "exp": {
      "base": 18000,
      "increment": 2.1
    },
    "skills": {},
    "skillTree": [
      {
        "isInnate": true,
        "level": 0,
        "items": []
      }
    ],
    "quests": {
      "stat": [],
      "zone": [],
      "level": [],
      "boss": []
    }
  },
  "js/modules/horde/fighterClass/cultist.js": {
    "unlock": "hordeClassCultist",
    "icon": "mdi-pentagram",
    "baseStats": {
      "attack": 3.3,
      "health": 700
    },
    "exp": {
      "base": 12600,
      "increment": 1.875
    },
    "skills": {},
    "skillTree": [
      {
        "isInnate": true,
        "level": 0,
        "items": []
      }
    ],
    "quests": {
      "stat": [],
      "zone": [],
      "level": [],
      "boss": []
    }
  },
  "js/modules/horde/fighterClass/shaman.js": {
    "unlock": "hordeClassShaman",
    "icon": "mdi-tree",
    "baseStats": {
      "attack": 4.4,
      "health": 575,
      "mana": 150
    },
    "exp": {
      "base": 4200,
      "increment": 1.425
    },
    "skills": {},
    "skillTree": [
      {
        "isInnate": true,
        "level": 0,
        "items": []
      }
    ],
    "quests": {
      "stat": [],
      "zone": [],
      "level": [],
      "boss": []
    }
  },
  "js/modules/horde/fighterClass/assassin.js": {
    "unlock": "hordeClassAssassin",
    "icon": "mdi-robber",
    "baseStats": {
      "attack": 8.5,
      "health": 220,
      "mana": 90
    },
    "exp": {
      "base": 2700,
      "increment": 1.5
    },
    "skills": {},
    "skillTree": [
      {
        "isInnate": true,
        "level": 0,
        "items": []
      }
    ],
    "quests": {
      "stat": [],
      "zone": [],
      "level": [],
      "boss": []
    }
  },
  "js/modules/horde/fighterClass/undead.js": {
    "unlock": "hordeClassUndead",
    "icon": "mdi-emoticon-dead",
    "baseStats": {
      "attack": 1.8,
      "health": 60
    },
    "exp": {
      "base": 8400,
      "increment": 1.7
    },
    "skills": {},
    "skillTree": [
      {
        "isInnate": true,
        "level": 0,
        "items": []
      }
    ],
    "quests": {
      "stat": [],
      "zone": [],
      "level": [],
      "boss": []
    }
  },
  "js/modules/horde/fighterClass/archer.js": {},
  "js/modules/horde/fighterClass/mage.js": {},
  "js/modules/horde/fighterClass/knight.js": {},
  "js/modules/horde/fighterClass/adventurer.js": {},
  "js/modules/patchnote/v1_5_0.js": {},
  "js/modules/patchnote/v1_0_1.js": {
    "day": "2023-09-26",
    "content": {
      "meta": [
        {
          "type": "qol",
          "text": "6"
        }
      ],
      "mining": [
        {
          "type": "balance",
          "text": "0"
        },
        {
          "type": "clarity",
          "text": "1"
        },
        {
          "unlock": "miningDepthDweller",
          "type": "clarity",
          "text": "8"
        }
      ],
      "village": [
        {
          "type": "clarity",
          "text": "2"
        },
        {
          "type": "clarity",
          "text": "3"
        }
      ],
      "achievement": [
        {
          "type": "clarity",
          "text": "9"
        }
      ],
      "school": [
        {
          "type": "qol",
          "text": "4"
        },
        {
          "type": "context",
          "text": "10"
        },
        {
          "type": "balance",
          "text": "11",
          "balance": "nerf",
          "before": "100%",
          "after": "10% - 100%"
        },
        {
          "type": "balance",
          "text": "12"
        },
        {
          "unlock": "schoolLiteratureSubfeature",
          "type": "bugfix",
          "text": "13"
        }
      ],
      "horde": [
        {
          "unlock": "hordePrestige",
          "type": "clarity",
          "text": "7"
        }
      ],
      "card": [
        {
          "type": "clarity",
          "text": "5"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_4_0.js": {},
  "js/modules/patchnote/v1_2_0.js": {
    "day": "2023-10-06",
    "content": {
      "meta": [
        {
          "type": "clarity",
          "text": "100"
        },
        {
          "type": "clarity",
          "text": "101"
        }
      ],
      "mining": [
        {
          "unlock": "miningDepthDweller",
          "type": "bugfix",
          "text": "97"
        },
        {
          "unlock": "miningDepthDweller",
          "type": "qol",
          "text": "98"
        }
      ],
      "village": [
        {
          "type": "new",
          "text": "addedBuilding",
          "params": [
            30
          ]
        },
        {
          "unlock": "villageCoinUpgrades",
          "type": "new",
          "text": "addedUpgrade",
          "params": [
            8
          ]
        },
        {
          "unlock": "villagePrestige",
          "type": "new",
          "text": "addedPrestigeUpgrade",
          "params": [
            5
          ]
        },
        {
          "unlock": "achievementFeature",
          "type": "new",
          "text": "addedAchievement",
          "params": [
            2
          ]
        },
        {
          "unlock": "achievementFeature",
          "type": "new",
          "text": "secretAchievement",
          "params": [
            1
          ]
        },
        {
          "unlock": "villageBuildings5",
          "type": "balance",
          "text": "96"
        },
        {
          "unlock": "villageCoinUpgrades",
          "type": "qol",
          "text": "99"
        }
      ],
      "school": [
        {
          "unlock": "schoolHistorySubfeature",
          "type": "accessibility",
          "text": "103"
        }
      ],
      "horde": [
        {
          "unlock": "hordeCorruptedFlesh",
          "type": "bugfix",
          "text": "90"
        },
        {
          "unlock": "hordeItems",
          "type": "bugfix",
          "text": "91"
        },
        {
          "type": "clarity",
          "text": "93"
        },
        {
          "unlock": "hordeItems",
          "type": "bugfix",
          "text": "94"
        }
      ],
      "farm": [
        {
          "type": "qol",
          "text": "102"
        }
      ],
      "event": [
        {
          "unlock": "nightHuntEvent",
          "type": "clarity",
          "text": "104"
        },
        {
          "unlock": "farmFertilizer",
          "type": "clarity",
          "text": "107"
        },
        {
          "unlock": "nightHuntEvent",
          "type": "bugfix",
          "text": "108"
        }
      ],
      "treasure": [
        {
          "type": "bugfix",
          "text": "92"
        },
        {
          "type": "bugfix",
          "text": "95"
        },
        {
          "type": "appearance",
          "text": "105"
        },
        {
          "type": "clarity",
          "text": "106"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_1_0.js": {},
  "js/modules/patchnote/v1_4_2.js": {
    "day": "2024-06-09",
    "content": {
      "card": [
        {
          "type": "balance",
          "text": "299_2"
        }
      ],
      "farm": [
        {
          "unlock": "farmCropExp",
          "type": "balance",
          "text": "299_4"
        }
      ],
      "event": [
        {
          "unlock": "weatherChaosEvent",
          "type": "bugfix",
          "text": "299_1"
        },
        {
          "unlock": "weatherChaosEvent",
          "type": "balance",
          "text": "299_3"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_5_4.js": {},
  "js/modules/patchnote/v1_3_5.js": {},
  "js/modules/patchnote/v1_3_6.js": {
    "day": "2023-10-31",
    "content": {
      "meta": [
        {
          "type": "bugfix",
          "text": "228"
        }
      ],
      "event": [
        {
          "type": "bugfix",
          "text": "229"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_3_3.js": {
    "day": "2023-10-18",
    "content": {
      "village": [
        {
          "type": "clarity",
          "text": "178"
        }
      ],
      "horde": [
        {
          "type": "new",
          "text": "172"
        },
        {
          "unlock": "hordePrestige",
          "type": "new",
          "text": "173"
        },
        {
          "unlock": "hordeItems",
          "type": "bugfix",
          "text": "174"
        },
        {
          "unlock": "hordePrestige",
          "type": "bugfix",
          "text": "176"
        },
        {
          "unlock": "hordePrestige",
          "type": "qol",
          "text": "177"
        }
      ],
      "achievement": [
        {
          "type": "balance",
          "text": "175"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_5_8.js": {
    "day": "2025-01-20",
    "content": {
      "meta": [
        {
          "type": "bugfix",
          "text": "441"
        }
      ],
      "farm": [
        {
          "unlock": "farmFertilizer",
          "type": "bugfix",
          "text": "442"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_5_5.js": {
    "day": "2024-11-23",
    "content": {
      "meta": [
        {
          "type": "bugfix",
          "text": "428"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_5_3.js": {},
  "js/modules/patchnote/v1_5_6.js": {},
  "js/modules/patchnote/v1_1_1.js": {
    "day": "2023-09-29",
    "content": {
      "school": [
        {
          "type": "balance",
          "text": "42",
          "balance": "buff",
          "before": "+15%",
          "after": "+35%"
        },
        {
          "type": "bugfix",
          "text": "43"
        },
        {
          "type": "remove",
          "text": "44"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_5_7.js": {
    "day": "2025-01-19",
    "content": {
      "village": [
        {
          "unlock": "villageOffering1",
          "type": "bugfix",
          "text": "440"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_0_0.js": {
    "day": "2023-09-23",
    "content": {
      "mining": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "note": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "gem": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "village": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "achievement": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "school": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "relic": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "horde": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "card": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "general": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "farm": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "event": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "treasure": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "cryolab": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "gallery": [
        {
          "type": "new",
          "text": "addedFeature"
        }
      ],
      "mining_1": [
        {
          "type": "new",
          "text": "addedSubfeature"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_3_1.js": {
    "day": "2023-10-16",
    "content": {
      "treasure": [
        {
          "type": "bugfix",
          "text": "157"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_3_0.js": {},
  "js/modules/patchnote/v1_3_2.js": {
    "day": "2023-10-17",
    "content": {
      "meta": [
        {
          "type": "bugfix",
          "text": "171"
        }
      ],
      "horde": [
        {
          "unlock": "hordeItems",
          "type": "clarity",
          "text": "162"
        },
        {
          "unlock": "hordePrestige",
          "type": "qol",
          "text": "163"
        },
        {
          "unlock": "hordeHeirlooms",
          "type": "balance",
          "text": "165",
          "balance": "nerf",
          "before": "+1%",
          "after": "+0.8%"
        },
        {
          "type": "clarity",
          "text": "167"
        },
        {
          "unlock": "hordePrestige",
          "type": "balance",
          "text": "168",
          "balance": "buff",
          "before": "4x",
          "after": "1.5x"
        },
        {
          "unlock": "hordePrestige",
          "type": "balance",
          "text": "169",
          "balance": "buff",
          "before": "20%",
          "after": "50%"
        },
        {
          "unlock": "hordePrestige",
          "type": "bugfix",
          "text": "170"
        },
        {
          "type": "qol",
          "text": "166"
        }
      ],
      "general": [
        {
          "type": "bugfix",
          "text": "159"
        },
        {
          "type": "balance",
          "text": "164"
        }
      ],
      "event": [
        {
          "type": "info",
          "text": "160"
        }
      ],
      "cryolab": [
        {
          "type": "new",
          "text": "158"
        },
        {
          "type": "balance",
          "text": "161"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_3_4.js": {},
  "js/modules/patchnote/v1_5_1.js": {
    "day": "2024-09-28",
    "content": {
      "card": [
        {
          "type": "bugfix",
          "text": "392"
        }
      ],
      "horde": [
        {
          "unlock": "hordeItems",
          "type": "bugfix",
          "text": "388"
        }
      ],
      "farm": [
        {
          "type": "bugfix",
          "text": "389"
        }
      ],
      "gallery": [
        {
          "unlock": "galleryConversion",
          "type": "balance",
          "text": "390",
          "balance": "nerf",
          "before": "4x",
          "after": "16x"
        },
        {
          "unlock": "galleryConversion",
          "type": "new",
          "text": "391"
        },
        {
          "unlock": "galleryConversion",
          "type": "clarity",
          "text": "394"
        }
      ],
      "horde_1": [
        {
          "type": "bugfix",
          "text": "393"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_5_2.js": {
    "day": "2024-09-29",
    "content": {
      "gallery": [
        {
          "unlock": "galleryConversion",
          "type": "balance",
          "text": "395",
          "balance": "buff",
          "before": "1.5x",
          "after": "1.9x"
        }
      ]
    }
  },
  "js/modules/patchnote/v1_1_2.js": {},
  "js/modules/patchnote/v1_4_1.js": {
    "day": "2023-11-14",
    "content": {
      "mining": [
        {
          "unlock": "miningDepthDweller",
          "type": "context",
          "text": "278"
        },
        {
          "unlock": "miningDepthDweller",
          "type": "balance",
          "text": "257",
          "balance": "nerf",
          "before": "0.008%",
          "after": "0.0065%"
        },
        {
          "unlock": "miningDepthDweller",
          "type": "balance",
          "text": "277",
          "balance": "buff",
          "before": "0.1",
          "after": "5"
        }
      ],
      "village": [
        {
          "type": "context",
          "text": "279"
        },
        {
          "type": "balance",
          "text": "280"
        },
        {
          "unlock": "villageCoinUpgrades",
          "type": "balance",
          "text": "281"
        },
        {
          "unlock": "villageUpgradeBasics",
          "type": "balance",
          "text": "282",
          "balance": "buff",
          "before": "15",
          "after": "20"
        },
        {
          "unlock": "villageUpgradeBasics",
          "type": "balance",
          "text": "283"
        },
        {
          "unlock": "villageOffering1",
          "type": "change",
          "text": "284"
        },
        {
          "unlock": "villageOffering1",
          "type": "new",
          "text": "285"
        },
        {
          "unlock": "villageOffering4",
          "type": "balance",
          "text": "297"
        },
        {
          "unlock": "villageBuildings5",
          "type": "balance",
          "text": "286"
        },
        {
          "unlock": "villageBuildings6",
          "type": "balance",
          "text": "287"
        },
        {
          "unlock": "villageBuildings7",
          "type": "balance",
          "text": "288"
        },
        {
          "unlock": "villageBuildings6",
          "type": "balance",
          "text": "289",
          "balance": "nerf",
          "before": "+50%",
          "after": "+20%"
        },
        {
          "type": "bugfix",
          "text": "290"
        },
        {
          "unlock": "villageCoinUpgrades",
          "type": "bugfix",
          "text": "291"
        },
        {
          "type": "balance",
          "text": "296",
          "balance": "buff",
          "before": "25%",
          "after": "40%"
        },
        {
          "unlock": "achievementFeature",
          "type": "balance",
          "text": "299"
        }
      ],
      "achievement": [
        {
          "unlock": "relicFeature",
          "type": "accessibility",
          "text": "298"
        }
      ],
      "horde": [
        {
          "unlock": "hordeItemMastery",
          "type": "balance",
          "text": "295"
        }
      ],
      "farm": [
        {
          "type": "balance",
          "text": "292"
        },
        {
          "unlock": "farmFertilizer",
          "type": "balance",
          "text": "271",
          "balance": "buff",
          "before": "+10%",
          "after": "+50%"
        },
        {
          "unlock": "farmFertilizer",
          "type": "balance",
          "text": "293",
          "balance": "nerf",
          "before": "+250%",
          "after": "+150%"
        },
        {
          "unlock": "farmFertilizer",
          "type": "balance",
          "text": "294"
        },
        {
          "unlock": "farmDisableEarlyGame",
          "type": "balance",
          "text": "215",
          "balance": "buff",
          "before": "0.4%",
          "after": "0.8%"
        }
      ]
    }
  },
  "js/modules/farm/card.js": {
    "feature": {
      "prefix": "FA",
      "reward": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ],
      "shinyReward": [
        {
          "name": "farmExperience",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ],
      "powerReward": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.08, lvl)"
          }
        },
        {
          "name": "farmExperience",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.08"
          }
        }
      ],
      "unlock": "farmFeature"
    },
    "collection": {
      "feedingTheWorld": {
        "reward": [
          {
            "name": "currencyFarmGrainGain",
            "type": "mult",
            "value": 1.25
          },
          {
            "name": "currencyFarmFlowerGain",
            "type": "mult",
            "value": 1.25
          }
        ]
      },
      "organicDyes": {
        "reward": [
          {
            "name": "galleryCardCap",
            "type": "base",
            "value": 1
          },
          {
            "name": "currencyFarmBerryGain",
            "type": "mult",
            "value": 1.25
          }
        ]
      }
    },
    "pack": {
      "bountifulHarvest": {
        "unlock": "farmCropExp",
        "amount": 3,
        "price": 30,
        "content": {
          "FA-0001": 1.5,
          "FA-0002": 1.5,
          "FA-0003": 0.9,
          "FA-0004": 1.5,
          "FA-0005": 1.5,
          "FA-0006": 0.6,
          "FA-0007": 0.6,
          "FA-0008": 0.6,
          "FA-0009": 0.6,
          "FA-0010": 0.5,
          "FA-0011": 0.2
        }
      },
      "juicyYields": {
        "unlock": "farmFertilizer",
        "amount": 4,
        "price": 80,
        "content": {
          "FA-0006": 1.2,
          "FA-0007": 1.2,
          "FA-0008": 1.2,
          "FA-0009": 1.2,
          "FA-0010": 1.5,
          "FA-0011": 1,
          "FA-0012": 0.9,
          "FA-0013": 0.6,
          "FA-0014": 0.4,
          "FA-0015": 0.4,
          "FA-0016": 0.4
        }
      },
      "insectWorld": {
        "unlock": "farmAdvancedCardPack",
        "amount": 2,
        "price": 90,
        "content": {
          "FA-0010": 2,
          "FA-0011": 1.8,
          "FA-0017": 1.4,
          "FA-0019": 1.4,
          "FA-0020": 1.4,
          "FA-0021": 1.2,
          "FA-0025": 0.8
        }
      },
      "beesAndFlowers": {
        "unlock": "farmLuxuryCardPack",
        "amount": 3,
        "price": 200,
        "content": {
          "FA-0012": 0.7,
          "FA-0013": 0.6,
          "FA-0014": 0.4,
          "FA-0015": 0.4,
          "FA-0016": 0.4,
          "FA-0017": 1,
          "FA-0018": 0.1,
          "FA-0019": 1,
          "FA-0020": 1,
          "FA-0021": 0.9,
          "FA-0022": 0.8,
          "FA-0023": 0.8,
          "FA-0024": 0.5,
          "FA-0025": 0.6,
          "FA-0026": 0.4,
          "FA-0027": 0.4
        }
      }
    },
    "card": {
      "_type": "expression",
      "code": "cardList"
    }
  },
  "js/modules/farm/upgradePremium.js": {},
  "js/modules/farm/upgrade.js": {},
  "js/modules/farm/crop.js": {},
  "js/modules/farm/fertilizer.js": {},
  "js/modules/farm/gene.js": {
    "basics": {
      "icon": "mdi-sack",
      "effect": [],
      "upgrade": [
        {
          "name": "farmAllGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.03 + 1"
          }
        }
      ]
    },
    "yield": {
      "icon": "mdi-sack",
      "effect": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": 1.3
        }
      ],
      "upgrade": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1 + 1"
          }
        }
      ]
    },
    "gold": {
      "icon": "mdi-gold",
      "effect": [
        {
          "name": "farmGoldChance",
          "type": "mult",
          "value": 1.4
        }
      ],
      "upgrade": [
        {
          "name": "farmGoldChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ]
    },
    "exp": {
      "icon": "mdi-star",
      "effect": [
        {
          "name": "farmExperience",
          "type": "mult",
          "value": 1.175
        }
      ],
      "upgrade": [
        {
          "name": "farmExperience",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.15"
          }
        }
      ]
    },
    "rareDrop": {
      "icon": "mdi-dice-2",
      "effect": [
        {
          "name": "farmRareDropChance",
          "type": "mult",
          "value": 1.25
        }
      ],
      "upgrade": [
        {
          "name": "farmRareDropChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.09 + 1"
          }
        }
      ]
    },
    "grow": {
      "icon": "mdi-timer",
      "effect": [
        {
          "name": "farmGrow",
          "type": "mult",
          "value": 0.8
        }
      ],
      "upgrade": [
        {
          "name": "farmGrow",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => 1 / (lvl * 0.01 + 1)"
          }
        },
        {
          "name": "farmExperience",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1"
          }
        }
      ]
    },
    "overgrow": {
      "icon": "mdi-sprout",
      "effect": [
        {
          "name": "farmOvergrow",
          "type": "mult",
          "value": 2.5
        }
      ],
      "upgrade": [
        {
          "name": "farmOvergrow",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.15"
          }
        }
      ]
    },
    "giant": {
      "icon": "mdi-numeric-5-box-multiple",
      "effect": [
        {
          "name": "farmGrow",
          "type": "mult",
          "value": 5
        },
        {
          "name": "farmAllGain",
          "type": "mult",
          "value": 4
        },
        {
          "name": "farmCropCost",
          "type": "mult",
          "value": 4
        },
        {
          "name": "farmFertilizerCost",
          "type": "mult",
          "value": 4
        }
      ],
      "upgrade": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.08 + 1"
          }
        },
        {
          "name": "farmRareDropChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.04 + 1"
          }
        }
      ],
      "lockOnField": true
    },
    "grass": {
      "icon": "mdi-grass",
      "effect": [
        {
          "name": "farm_grass",
          "type": "addRareDrop",
          "value": 8,
          "chance": 0.2
        }
      ],
      "upgrade": [
        {
          "name": "farm_grass",
          "type": "addRareDropAmount",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "dna": {
      "icon": "mdi-dna",
      "effect": [
        {
          "name": "farmUnlockDna",
          "type": "text"
        }
      ],
      "upgrade": []
    },
    "gnome": {
      "icon": "mdi-human-child",
      "effect": [
        {
          "name": "farmGnomeBoost",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.06 + 1"
          }
        },
        {
          "name": "farmExperience",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05"
          }
        }
      ]
    },
    "lonely": {
      "icon": "mdi-circle-expand",
      "effect": [
        {
          "name": "farmLonelyGrow",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmGrow",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => 1 / (lvl * 0.01 + 1)"
          }
        },
        {
          "name": "farmOvergrow",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.12"
          }
        }
      ]
    },
    "fertile": {
      "icon": "mdi-sack-percent",
      "effect": [
        {
          "name": "farmFertileBoost",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.03 + 1"
          }
        },
        {
          "name": "farmOvergrow",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.1"
          }
        }
      ]
    },
    "mystery": {
      "icon": "mdi-eye-circle-outline",
      "effect": [
        {
          "name": "farm_mysteryStone",
          "type": "addRareDrop",
          "value": 1,
          "chance": -0.1,
          "mult": 0.01
        }
      ],
      "upgrade": [
        {
          "name": "farmMystery",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "conversion": {
      "icon": "mdi-swap-horizontal",
      "effect": [
        {
          "name": "farmYieldConversion",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.06 + 1"
          }
        },
        {
          "name": "farmExperience",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05"
          }
        }
      ]
    },
    "prestige": {
      "icon": "mdi-shimmer",
      "effect": [
        {
          "name": "farmFastPrestige",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmDnaNext",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 10"
          }
        }
      ]
    },
    "rareDropChance": {
      "icon": "mdi-dice-multiple",
      "effect": [
        {
          "name": "farmRareDropChance",
          "type": "base",
          "value": 0.05
        }
      ],
      "upgrade": [
        {
          "name": "farmRareDropChance",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.001"
          }
        }
      ]
    },
    "lucky": {
      "icon": "mdi-horseshoe",
      "effect": [
        {
          "name": "farmLuckyHarvest",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmLuckyHarvestMult",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "finalize": {
      "icon": "mdi-lock-alert",
      "effect": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": 1.5
        },
        {
          "name": "farmGoldChance",
          "type": "mult",
          "value": 1.2
        },
        {
          "name": "farmRareDropChance",
          "type": "mult",
          "value": 1.2
        },
        {
          "name": "farmExperience",
          "type": "mult",
          "value": 0
        }
      ],
      "upgrade": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.12 + 1"
          }
        }
      ]
    },
    "selfless": {
      "icon": "mdi-charity",
      "effect": [
        {
          "name": "farmSelfless",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.05 + 1"
          }
        }
      ]
    },
    "unyielding": {
      "icon": "mdi-content-duplicate",
      "effect": [
        {
          "name": "farmUnyielding",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmGrow",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => 1 / (lvl * 0.01 + 1)"
          }
        },
        {
          "name": "farmExperience",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.08"
          }
        }
      ]
    },
    "teamwork": {
      "icon": "mdi-handshake",
      "effect": [
        {
          "name": "farmTeamwork",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmCropGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.08 + 1"
          }
        }
      ]
    },
    "hunter": {
      "icon": "mdi-bow-arrow",
      "effect": [
        {
          "name": "farmHunter",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmHuntChance",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => Math.pow(1.15, lvl)"
          }
        }
      ]
    },
    "patient": {
      "icon": "mdi-sleep",
      "effect": [
        {
          "name": "farmPatient",
          "type": "text"
        }
      ],
      "upgrade": [
        {
          "name": "farmGrow",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => 1 / (lvl * 0.01 + 1)"
          }
        },
        {
          "name": "farmAllGain",
          "type": "mult",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl * 0.02 + 1"
          }
        }
      ]
    }
  },
  "js/modules/farm/relic.js": {
    "goldenCarrot": {
      "icon": "mdi-carrot",
      "color": "amber",
      "effect": [
        {
          "name": "currencyFarmVegetableGain",
          "type": "mult",
          "value": 1.4
        }
      ]
    },
    "goldenApple": {
      "icon": "mdi-food-apple",
      "color": "amber",
      "effect": [
        {
          "name": "currencyFarmBerryGain",
          "type": "mult",
          "value": 1.4
        }
      ]
    },
    "popcorn": {
      "icon": "mdi-popcorn",
      "color": "pale-yellow",
      "effect": [
        {
          "name": "currencyFarmGrainGain",
          "type": "mult",
          "value": 1.4
        }
      ]
    },
    "roseQuartz": {
      "icon": "mdi-crystal-ball",
      "color": "pale-pink",
      "effect": [
        {
          "name": "currencyFarmFlowerGain",
          "type": "mult",
          "value": 1.4
        }
      ]
    },
    "goldenSeed": {
      "icon": "mdi-seed",
      "color": "amber",
      "effect": [
        {
          "name": "goldenRose",
          "type": "farmSeed",
          "value": true
        }
      ]
    },
    "trellis": {
      "icon": "mdi-fence",
      "color": "brown",
      "effect": [
        {
          "name": "farmOvergrow",
          "type": "base",
          "value": 0.05
        }
      ]
    },
    "brickWall": {
      "icon": "mdi-wall",
      "color": "cherry",
      "effect": [
        {
          "name": "farmOvergrow",
          "type": "base",
          "value": 0.05
        }
      ]
    }
  },
  "js/modules/farm/building.js": {
    "gardenGnome": {
      "icon": "mdi-human-child"
    },
    "sprinkler": {
      "icon": "mdi-sprinkler-variant"
    },
    "lectern": {
      "icon": "mdi-book-open-page-variant"
    },
    "pinwheel": {
      "icon": "mdi-pinwheel"
    },
    "flag": {
      "icon": "mdi-flag"
    }
  },
  "js/modules/farm/achievement.js": {
    "harvests": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.farm_harvests.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.round(Math.pow(lvl + 1, 2) * Math.pow(1.5, lvl) * 10)"
      }
    },
    "maxOvergrow": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.farm_maxOvergrow.total"
      },
      "display": "percent",
      "milestones": {
        "_type": "formula",
        "code": "lvl => getSequence(1, lvl + 1)"
      },
      "relic": {
        "2": "trellis",
        "4": "brickWall"
      }
    },
    "bestPrestige": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.farm_bestPrestige.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => lvl * 2 + 4"
      }
    },
    "vegetable": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.farm_vegetable.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(81, lvl) * 250"
      },
      "relic": {
        "2": "goldenCarrot"
      }
    },
    "berry": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.farm_berry.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(81, lvl) * 750"
      },
      "relic": {
        "3": "goldenApple"
      }
    },
    "grain": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.farm_grain.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(81, lvl) * 2250"
      },
      "relic": {
        "4": "popcorn"
      }
    },
    "flower": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.farm_flower.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.pow(81, lvl) * 6750"
      },
      "relic": {
        "5": "roseQuartz"
      }
    },
    "gold": {
      "value": {
        "_type": "formula",
        "code": "() => store.state.stat.farm_gold.total"
      },
      "milestones": {
        "_type": "formula",
        "code": "lvl => Math.round(Math.pow(lvl + 2, 2) * Math.pow(2.25, lvl) * 2.5)"
      },
      "relic": {
        "6": "goldenSeed"
      }
    }
  },
  "js/modules/school/bookGallery.js": {},
  "js/modules/school/bookHorde.js": {
    "bookTraining": {
      "type": "book",
      "raiseOtherCap": "horde_training",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.horde_training.highestLevel >= 100;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.15, lvl) * (lvl + 5) * 28)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeHordeTrainingCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookLuckyStrike": {
      "type": "book",
      "raiseOtherCap": "horde_luckyStrike",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.horde_luckyStrike.highestLevel >= 15;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.15, lvl) * (lvl + 5) * 85)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeHordeLuckyStrikeCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookLooting": {
      "type": "book",
      "raiseOtherCap": "horde_looting",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.horde_looting.highestLevel >= 25;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.15, lvl) * (lvl + 5) * 140)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeHordeLootingCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookSurvivalGuide": {
      "type": "book",
      "raiseOtherCap": "horde_survivalGuide",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.horde_survivalGuide.highestLevel >= 25;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.15, lvl) * (lvl + 5) * 190)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeHordeSurvivalGuideCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookCarving": {
      "type": "book",
      "raiseOtherCap": "horde_carving",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.horde_carving.highestLevel >= 5;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.15, lvl) * (lvl + 5) * 310)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeHordeCarvingCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookWhitePaint": {
      "type": "book",
      "raiseOtherCap": "horde_whitePaint",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.horde_whitePaint.highestLevel >= 25;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.15, lvl) * (lvl + 5) * 475)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeHordeWhitePaintCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    }
  },
  "js/modules/school/upgradePremium.js": {
    "student": {
      "type": "premium",
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {gem_ruby: fallbackArray([5, 20, 60, 125], [4, 5, 6, 7][lvl % 4] * Math.pow(2, Math.floor(lvl / 4)) * 25, lvl)};\n    }"
      },
      "effect": [
        {
          "name": "currencySchoolBookGain",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => 5 * lvl"
          }
        }
      ]
    }
  },
  "js/modules/school/bookMining.js": {},
  "js/modules/school/bookVillage.js": {},
  "js/modules/school/bookFarm.js": {
    "bookSmallCrate": {
      "type": "book",
      "raiseOtherCap": "farm_smallCrate",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.farm_smallCrate.highestLevel >= 7;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.25, lvl) * (lvl + 5) * 72)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeFarmSmallCrateCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookScarecrow": {
      "type": "book",
      "raiseOtherCap": "farm_scarecrow",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.farm_scarecrow.highestLevel >= 10;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.25, lvl) * (lvl + 5) * 96)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeFarmScarecrowCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookShed": {
      "type": "book",
      "raiseOtherCap": "farm_shed",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.farm_shed.highestLevel >= 10;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.25, lvl) * (lvl + 5) * 144)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeFarmShedCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookMediumCrate": {
      "type": "book",
      "raiseOtherCap": "farm_mediumCrate",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.farm_mediumCrate.highestLevel >= 8;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.25, lvl) * (lvl + 5) * 185)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeFarmMediumCrateCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookInsectParadise": {
      "type": "book",
      "raiseOtherCap": "farm_insectParadise",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.farm_insectParadise.highestLevel >= 6;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.25, lvl) * (lvl + 5) * 330)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeFarmInsectParadiseCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    },
    "bookBigCrate": {
      "type": "book",
      "raiseOtherCap": "farm_bigCrate",
      "requirement": {
        "_type": "formula",
        "code": "requirement() {\n        return store.state.upgrade.item.farm_bigCrate.highestLevel >= 10;\n    }"
      },
      "price": {
        "_type": "formula",
        "code": "price(lvl) {\n        return {school_book: Math.round(Math.pow(1.25, lvl) * (lvl + 5) * 525)};\n    }"
      },
      "effect": [
        {
          "name": "upgradeFarmBigCrateCap",
          "type": "base",
          "value": {
            "_type": "formula",
            "code": "lvl => lvl"
          }
        }
      ]
    }
  }
}